
Pjt_DCMotor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080090f8  080090f8  000190f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009620  08009620  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009620  08009620  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e4  0800980c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800980c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1e0  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002347  00000000  00000000  0002d3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000305d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e3c  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ca  00000000  00000000  000341cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cfe  00000000  00000000  00043696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4394  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  000d43e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080090dc 	.word	0x080090dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080090dc 	.word	0x080090dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000be0:	1d39      	adds	r1, r7, #4
 8000be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be6:	2201      	movs	r2, #1
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <__io_putchar+0x20>)
 8000bea:	f002 ffe6 	bl	8003bba <HAL_UART_Transmit>

  return ch;
 8000bee:	687b      	ldr	r3, [r7, #4]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000300 	.word	0x20000300

08000bfc <ms_delay>:

//========================================

// Making our own 'milli-seconds delay' instead of using HAL_Delay(), for the purpose of protecting against connection error
void ms_delay(uint16_t delay)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <ms_delay+0x2c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000c0e:	bf00      	nop
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <ms_delay+0x2c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3f9      	bcc.n	8000c10 <ms_delay+0x14>
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000274 	.word	0x20000274

08000c2c <Drive>:

//========================================

void Drive() // Going straight
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <Drive+0x1c>)
 8000c36:	f001 ffb5 	bl	8002ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <Drive+0x1c>)
 8000c40:	f001 ffb0 	bl	8002ba4 <HAL_GPIO_WritePin>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40011000 	.word	0x40011000

08000c4c <Stop>:

void Stop()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <Stop+0x1c>)
 8000c56:	f001 ffa5 	bl	8002ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <Stop+0x1c>)
 8000c60:	f001 ffa0 	bl	8002ba4 <HAL_GPIO_WritePin>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40011000 	.word	0x40011000

08000c6c <Reverse>:

void Reverse() // Going back & Turning Left or Right
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	// Random (Turning Left || Turning Right)
	int random = rand() % 2;
 8000c72:	f004 fc31 	bl	80054d8 <rand>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	bfb8      	it	lt
 8000c80:	425b      	neglt	r3, r3
 8000c82:	607b      	str	r3, [r7, #4]

	if (distance < 10) // if the distance of the alarm clock(values from the ultrasonic sensor) becomes 10cm
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <Reverse+0x9c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	dc39      	bgt.n	8000d00 <Reverse+0x94>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_RESET); // Stop going straight
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2105      	movs	r1, #5
 8000c90:	481e      	ldr	r0, [pc, #120]	; (8000d0c <Reverse+0xa0>)
 8000c92:	f001 ff87 	bl	8002ba4 <HAL_GPIO_WritePin>
		ms_delay(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9a:	f7ff ffaf 	bl	8000bfc <ms_delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_3, GPIO_PIN_SET); // Going back for 1 sec
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <Reverse+0xa0>)
 8000ca4:	f001 ff7e 	bl	8002ba4 <HAL_GPIO_WritePin>
		ms_delay(1000);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f7ff ffa6 	bl	8000bfc <ms_delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_3, GPIO_PIN_RESET); // Stop going back
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	210a      	movs	r1, #10
 8000cb4:	4815      	ldr	r0, [pc, #84]	; (8000d0c <Reverse+0xa0>)
 8000cb6:	f001 ff75 	bl	8002ba4 <HAL_GPIO_WritePin>

		// Turning Left
		if (random == 0)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10e      	bne.n	8000cde <Reverse+0x72>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Start turning left for 1 sec
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4811      	ldr	r0, [pc, #68]	; (8000d0c <Reverse+0xa0>)
 8000cc6:	f001 ff6d 	bl	8002ba4 <HAL_GPIO_WritePin>
			ms_delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cce:	f7ff ff95 	bl	8000bfc <ms_delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // Stop turning left
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <Reverse+0xa0>)
 8000cd8:	f001 ff64 	bl	8002ba4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Start turning right for 1 sec
			ms_delay(1000);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Stop turning right
		}
	}
}
 8000cdc:	e010      	b.n	8000d00 <Reverse+0x94>
		else if (random == 1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10d      	bne.n	8000d00 <Reverse+0x94>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // Start turning right for 1 sec
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <Reverse+0xa0>)
 8000cea:	f001 ff5b 	bl	8002ba4 <HAL_GPIO_WritePin>
			ms_delay(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f7ff ff83 	bl	8000bfc <ms_delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // Stop turning right
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <Reverse+0xa0>)
 8000cfc:	f001 ff52 	bl	8002ba4 <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000398 	.word	0x20000398
 8000d0c:	40011000 	.word	0x40011000

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fd14 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f866 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f9d6 	bl	80010cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d20:	f000 f984 	bl	800102c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000d24:	f000 f9ac 	bl	8001080 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d28:	f000 f8b6 	bl	8000e98 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d2c:	f000 f954 	bl	8000fd8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d30:	f000 f900 	bl	8000f34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); // for using milli-second delay
 8000d34:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <main+0xc0>)
 8000d36:	f002 fc8f 	bl	8003658 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, adc_value, 2); // for getting joystick's values
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4925      	ldr	r1, [pc, #148]	; (8000dd4 <main+0xc4>)
 8000d3e:	4826      	ldr	r0, [pc, #152]	; (8000dd8 <main+0xc8>)
 8000d40:	f000 fe38 	bl	80019b4 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_DMA(&huart1, dis_flag, 2); // for receiving datas from Master Board
 8000d44:	2202      	movs	r2, #2
 8000d46:	4925      	ldr	r1, [pc, #148]	; (8000ddc <main+0xcc>)
 8000d48:	4825      	ldr	r0, [pc, #148]	; (8000de0 <main+0xd0>)
 8000d4a:	f002 ffc8 	bl	8003cde <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dis_flag[0] == 1) // if receiving "alarm ON"  (0 : alarm OFF / 1 : alarm ON )
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <main+0xcc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d108      	bne.n	8000d68 <main+0x58>
	  {
		  Drive(); // going straight(default)
 8000d56:	f7ff ff69 	bl	8000c2c <Drive>

		  if (dis_flag[1] < 15) // if the ultrasonic sensor's values becomes less than 10cm while going straight
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <main+0xcc>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b0e      	cmp	r3, #14
 8000d60:	dc08      	bgt.n	8000d74 <main+0x64>
		  {
			  Reverse(); // going back + turning left or right(random)
 8000d62:	f7ff ff83 	bl	8000c6c <Reverse>
 8000d66:	e005      	b.n	8000d74 <main+0x64>
		  }
	  }
	  else if (dis_flag[0] == 0)
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <main+0xcc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <main+0x64>
	  {
		  Stop(); // Stop moving
 8000d70:	f7ff ff6c 	bl	8000c4c <Stop>
	  }

	  // Checking and sending Joystick's values to Master Board
	  if(adc_value[1] <= 200) {comp = 0;} //U -> UP
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <main+0xc4>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2bc8      	cmp	r3, #200	; 0xc8
 8000d7a:	d803      	bhi.n	8000d84 <main+0x74>
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <main+0xd4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e01c      	b.n	8000dbe <main+0xae>
	  else if(adc_value[1] >= 4000) {comp = 1;} //D -> DOWN
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <main+0xc4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d8c:	d303      	bcc.n	8000d96 <main+0x86>
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0xd4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e013      	b.n	8000dbe <main+0xae>
	  else if(adc_value[0] >= 4000 ) {comp = 2;} //L -> LEFT
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <main+0xc4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d9e:	d303      	bcc.n	8000da8 <main+0x98>
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <main+0xd4>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e00a      	b.n	8000dbe <main+0xae>
	  else if(adc_value[0] <= 200) {comp = 3;} //R -> RIGHT
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <main+0xc4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2bc8      	cmp	r3, #200	; 0xc8
 8000dae:	d803      	bhi.n	8000db8 <main+0xa8>
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <main+0xd4>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e002      	b.n	8000dbe <main+0xae>
	  else {comp = 4;} // Default
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <main+0xd4>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, &comp, 1, 0xFFFF); // Sending Joystick's values to Master Board
 8000dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <main+0xd4>)
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <main+0xd0>)
 8000dc8:	f002 fef7 	bl	8003bba <HAL_UART_Transmit>
	  if (dis_flag[0] == 1) // if receiving "alarm ON"  (0 : alarm OFF / 1 : alarm ON )
 8000dcc:	e7bf      	b.n	8000d4e <main+0x3e>
 8000dce:	bf00      	nop
 8000dd0:	20000274 	.word	0x20000274
 8000dd4:	20000388 	.word	0x20000388
 8000dd8:	20000200 	.word	0x20000200
 8000ddc:	20000390 	.word	0x20000390
 8000de0:	200002bc 	.word	0x200002bc
 8000de4:	20000000 	.word	0x20000000

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fcf8 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e2c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 feee 	bl	8002c18 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e42:	f000 f9c7 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 f95a 	bl	800311c <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 f9b1 	bl	80011d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000e76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fae4 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e8a:	f000 f9a3 	bl	80011d4 <Error_Handler>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <MX_ADC1_Init+0x98>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ec4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ed8:	f000 fc94 	bl	8001804 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ee2:	f000 f977 	bl	80011d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000ef8:	f000 ff22 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f967 	bl	80011d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f06:	2307      	movs	r3, #7
 8000f08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <MX_ADC1_Init+0x94>)
 8000f14:	f000 ff14 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f1e:	f000 f959 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000200 	.word	0x20000200
 8000f30:	40012400 	.word	0x40012400

08000f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f52:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <MX_TIM1_Init+0xa0>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f58:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7e:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f80:	f002 fb1a 	bl	80035b8 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f8a:	f000 f923 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f9c:	f002 fba6 	bl	80036ec <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fa6:	f000 f915 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000fb8:	f002 fd54 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000fc2:	f000 f907 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000274 	.word	0x20000274
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_USART1_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART1_UART_Init+0x4c>)
 8001010:	f002 fd86 	bl	8003b20 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f000 f8db 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200002bc 	.word	0x200002bc
 8001028:	40013800 	.word	0x40013800

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_USART2_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART2_UART_Init+0x4c>)
 8001064:	f002 fd5c 	bl	8003b20 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 f8b1 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000300 	.word	0x20000300
 800107c:	40004400 	.word	0x40004400

08001080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_DMA_Init+0x48>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <MX_DMA_Init+0x48>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6153      	str	r3, [r2, #20]
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_DMA_Init+0x48>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200b      	movs	r0, #11
 80010a4:	f001 f925 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a8:	200b      	movs	r0, #11
 80010aa:	f001 f93e 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200f      	movs	r0, #15
 80010b4:	f001 f91d 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010b8:	200f      	movs	r0, #15
 80010ba:	f001 f936 	bl	800232a <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <MX_GPIO_Init+0xf8>)
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_GPIO_Init+0xf8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_GPIO_Init+0xf8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <MX_GPIO_Init+0xf8>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_GPIO_Init+0xf8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001140:	2200      	movs	r2, #0
 8001142:	f240 110f 	movw	r1, #271	; 0x10f
 8001146:	4820      	ldr	r0, [pc, #128]	; (80011c8 <MX_GPIO_Init+0xfc>)
 8001148:	f001 fd2c 	bl	8002ba4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2120      	movs	r1, #32
 8001150:	481e      	ldr	r0, [pc, #120]	; (80011cc <MX_GPIO_Init+0x100>)
 8001152:	f001 fd27 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_GPIO_Init+0x104>)
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4817      	ldr	r0, [pc, #92]	; (80011c8 <MX_GPIO_Init+0xfc>)
 800116c:	f001 fb96 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001170:	f240 130f 	movw	r3, #271	; 0x10f
 8001174:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <MX_GPIO_Init+0xfc>)
 800118a:	f001 fb87 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118e:	2320      	movs	r3, #32
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <MX_GPIO_Init+0x100>)
 80011a6:	f001 fb79 	bl	800289c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2028      	movs	r0, #40	; 0x28
 80011b0:	f001 f89f 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f001 f8b8 	bl	800232a <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	10110000 	.word	0x10110000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_MspInit+0x5c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_MspInit+0x5c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_MspInit+0x5c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x5c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x5c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x5c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_MspInit+0x60>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_MspInit+0x60>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <HAL_ADC_MspInit+0xcc>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d151      	bne.n	8001308 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_ADC_MspInit+0xd0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0xd4>)
 80012a4:	f001 fafa 	bl	800289c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_ADC_MspInit+0xdc>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012d2:	2220      	movs	r2, #32
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012de:	f001 f83f 	bl	8002360 <HAL_DMA_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80012e8:	f7ff ff74 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_ADC_MspInit+0xd8>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2012      	movs	r0, #18
 80012fe:	f000 fff8 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001302:	2012      	movs	r0, #18
 8001304:	f001 f811 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40012400 	.word	0x40012400
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800
 800131c:	20000230 	.word	0x20000230
 8001320:	40020008 	.word	0x40020008

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_TIM_Base_MspInit+0x34>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10b      	bne.n	800134e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_TIM_Base_MspInit+0x38>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_TIM_Base_MspInit+0x38>)
 800133c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001340:	6193      	str	r3, [r2, #24]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_TIM_Base_MspInit+0x38>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_UART_MspInit+0x140>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d15a      	bne.n	8001436 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_UART_MspInit+0x144>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4838      	ldr	r0, [pc, #224]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013c6:	f001 fa69 	bl	800289c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4619      	mov	r1, r3
 80013de:	4832      	ldr	r0, [pc, #200]	; (80014a8 <HAL_UART_MspInit+0x148>)
 80013e0:	f001 fa5c 	bl	800289c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013e6:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <HAL_UART_MspInit+0x150>)
 80013e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_UART_MspInit+0x14c>)
 80013fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001402:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_UART_MspInit+0x14c>)
 800140e:	2220      	movs	r2, #32
 8001410:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001418:	4824      	ldr	r0, [pc, #144]	; (80014ac <HAL_UART_MspInit+0x14c>)
 800141a:	f000 ffa1 	bl	8002360 <HAL_DMA_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001424:	f7ff fed6 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_UART_MspInit+0x14c>)
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <HAL_UART_MspInit+0x14c>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001434:	e030      	b.n	8001498 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_UART_MspInit+0x154>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d12b      	bne.n	8001498 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_UART_MspInit+0x144>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_UART_MspInit+0x144>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001470:	230c      	movs	r3, #12
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2302      	movs	r3, #2
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4619      	mov	r1, r3
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_UART_MspInit+0x148>)
 8001484:	f001 fa0a 	bl	800289c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2026      	movs	r0, #38	; 0x26
 800148e:	f000 ff30 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001492:	2026      	movs	r0, #38	; 0x26
 8001494:	f000 ff49 	bl	800232a <HAL_NVIC_EnableIRQ>
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000344 	.word	0x20000344
 80014b0:	40020058 	.word	0x40020058
 80014b4:	40004400 	.word	0x40004400

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f965 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Channel1_IRQHandler+0x10>)
 800150e:	f001 f891 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000230 	.word	0x20000230

0800151c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Channel5_IRQHandler+0x10>)
 8001522:	f001 f887 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000344 	.word	0x20000344

08001530 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <ADC1_2_IRQHandler+0x10>)
 8001536:	f000 fb1b 	bl	8001b70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000200 	.word	0x20000200

08001544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART2_IRQHandler+0x10>)
 800154a:	f002 fbf9 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000300 	.word	0x20000300

08001558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800155c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001560:	f001 fb38 	bl	8002bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_kill>:

int _kill(int pid, int sig)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001580:	f003 f90a 	bl	8004798 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	2216      	movs	r2, #22
 8001588:	601a      	str	r2, [r3, #0]
	return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_exit>:

void _exit (int status)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800159e:	f04f 31ff 	mov.w	r1, #4294967295
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffe7 	bl	8001576 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015a8:	e7fe      	b.n	80015a8 <_exit+0x12>

080015aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e00a      	b.n	80015d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015bc:	f3af 8000 	nop.w
 80015c0:	4601      	mov	r1, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	60ba      	str	r2, [r7, #8]
 80015c8:	b2ca      	uxtb	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf0      	blt.n	80015bc <_read+0x12>
	}

return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e009      	b.n	800160a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	60ba      	str	r2, [r7, #8]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff faea 	bl	8000bd8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbf1      	blt.n	80015f6 <_write+0x12>
	}
	return len;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_close>:

int _close(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001642:	605a      	str	r2, [r3, #4]
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f003 f874 	bl	8004798 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20005000 	.word	0x20005000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	2000039c 	.word	0x2000039c
 80016e4:	200003b8 	.word	0x200003b8

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800171a:	f7ff ffe5 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f003 f841 	bl	80047a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff faf5 	bl	8000d10 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001730:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8001734:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001738:	200003b4 	.word	0x200003b4

0800173c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <CAN1_RX1_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x28>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fdc3 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fd40 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fddb 	bl	8002346 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 fda3 	bl	80022f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000004 	.word	0x20000004
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000008 	.word	0x20000008

080017cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x1c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_IncTick+0x20>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_IncTick+0x20>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	200003a0 	.word	0x200003a0

080017f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_GetTick+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	200003a0 	.word	0x200003a0

08001804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0be      	b.n	80019a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fcfe 	bl	8001244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fbcb 	bl	8001fe4 <ADC_ConversionStop_Disable>
 800184e:	4603      	mov	r3, r0
 8001850:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8099 	bne.w	8001992 <HAL_ADC_Init+0x18e>
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8095 	bne.w	8001992 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	f043 0202 	orr.w	r2, r3, #2
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001884:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7b1b      	ldrb	r3, [r3, #12]
 800188a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800188c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4313      	orrs	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800189c:	d003      	beq.n	80018a6 <HAL_ADC_Init+0xa2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <HAL_ADC_Init+0xa8>
 80018a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018aa:	e000      	b.n	80018ae <HAL_ADC_Init+0xaa>
 80018ac:	2300      	movs	r3, #0
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7d1b      	ldrb	r3, [r3, #20]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d119      	bne.n	80018f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	035a      	lsls	r2, r3, #13
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	e00b      	b.n	80018f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <HAL_ADC_Init+0x1a8>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001920:	d003      	beq.n	800192a <HAL_ADC_Init+0x126>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d104      	bne.n	8001934 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	3b01      	subs	r3, #1
 8001930:	051b      	lsls	r3, r3, #20
 8001932:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	430a      	orrs	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_ADC_Init+0x1ac>)
 8001950:	4013      	ands	r3, r2
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d10b      	bne.n	8001970 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196e:	e018      	b.n	80019a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f023 0312 	bic.w	r3, r3, #18
 8001978:	f043 0210 	orr.w	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001990:	e007      	b.n	80019a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	ffe1f7fd 	.word	0xffe1f7fd
 80019b0:	ff1f0efe 	.word	0xff1f0efe

080019b4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a64      	ldr	r2, [pc, #400]	; (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_ADC_Start_DMA+0x24>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a63      	ldr	r2, [pc, #396]	; (8001b60 <HAL_ADC_Start_DMA+0x1ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x32>
 80019d8:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 80b3 	bne.w	8001b4c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_Start_DMA+0x40>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e0ae      	b.n	8001b52 <HAL_ADC_Start_DMA+0x19e>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fa97 	bl	8001f30 <ADC_Enable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 809a 	bne.w	8001b42 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <HAL_ADC_Start_DMA+0x1ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_Start_DMA+0x84>
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d115      	bne.n	8001a64 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d026      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a62:	e01d      	b.n	8001aa0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a39      	ldr	r2, [pc, #228]	; (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_Start_DMA+0xd0>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a38      	ldr	r2, [pc, #224]	; (8001b60 <HAL_ADC_Start_DMA+0x1ac>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d10d      	bne.n	8001aa0 <HAL_ADC_Start_DMA+0xec>
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_ADC_Start_DMA+0x1a8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f023 0206 	bic.w	r2, r3, #6
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <HAL_ADC_Start_DMA+0x1b0>)
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_ADC_Start_DMA+0x1b4>)
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_ADC_Start_DMA+0x1b8>)
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0202 	mvn.w	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a18      	ldr	r0, [r3, #32]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	334c      	adds	r3, #76	; 0x4c
 8001b04:	4619      	mov	r1, r3
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f000 fc83 	bl	8002414 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b1c:	d108      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b2c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b2e:	e00f      	b.n	8001b50 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b3e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b40:	e006      	b.n	8001b50 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40012400 	.word	0x40012400
 8001b60:	40012800 	.word	0x40012800
 8001b64:	08002067 	.word	0x08002067
 8001b68:	080020e3 	.word	0x080020e3
 8001b6c:	080020ff 	.word	0x080020ff

08001b70 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d140      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d139      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bba:	d11d      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d119      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0220 	bic.w	r2, r2, #32
 8001bd2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f87c 	bl	8001cf6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0212 	mvn.w	r2, #18
 8001c06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b80      	cmp	r3, #128	; 0x80
 8001c14:	d14f      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d148      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c46:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c4a:	d012      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d125      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c68:	d11d      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d119      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa43 	bl	8002132 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 020c 	mvn.w	r2, #12
 8001cb4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d114      	bne.n	8001cee <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f81b 	bl	8001d1a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0201 	mvn.w	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x20>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0dc      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1da>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	d81c      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b05      	subs	r3, #5
 8001d82:	221f      	movs	r2, #31
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34
 8001da8:	e03c      	b.n	8001e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d81c      	bhi.n	8001dec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b23      	subs	r3, #35	; 0x23
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4019      	ands	r1, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b23      	subs	r3, #35	; 0x23
 8001dde:	fa00 f203 	lsl.w	r2, r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dea:	e01b      	b.n	8001e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b41      	subs	r3, #65	; 0x41
 8001dfe:	221f      	movs	r2, #31
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4019      	ands	r1, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b41      	subs	r3, #65	; 0x41
 8001e18:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d91c      	bls.n	8001e66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68d9      	ldr	r1, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	e019      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6919      	ldr	r1, [r3, #16]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d132      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_ADC_ConfigChannel+0x1e4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d125      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d126      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ed0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d11a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_ADC_ConfigChannel+0x1e8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9a      	lsrs	r2, r3, #18
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x1b2>
 8001efe:	e007      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40012400 	.word	0x40012400
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d040      	beq.n	8001fd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <ADC_Enable+0xac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <ADC_Enable+0xb0>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f6c:	e002      	b.n	8001f74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f7a:	f7ff fc39 	bl	80017f0 <HAL_GetTick>
 8001f7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f80:	e01f      	b.n	8001fc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f82:	f7ff fc35 	bl	80017f0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d918      	bls.n	8001fc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d011      	beq.n	8001fc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	f043 0210 	orr.w	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e007      	b.n	8001fd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d1d8      	bne.n	8001f82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d12e      	bne.n	800205c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800200e:	f7ff fbef 	bl	80017f0 <HAL_GetTick>
 8002012:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002014:	e01b      	b.n	800204e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002016:	f7ff fbeb 	bl	80017f0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d914      	bls.n	800204e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10d      	bne.n	800204e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e007      	b.n	800205e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d0dc      	beq.n	8002016 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800207c:	2b00      	cmp	r3, #0
 800207e:	d127      	bne.n	80020d0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002096:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800209a:	d115      	bne.n	80020c8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fe14 	bl	8001cf6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020ce:	e004      	b.n	80020da <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fe09 	bl	8001d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fe01 	bl	8001d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <__NVIC_EnableIRQ+0x34>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff90 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff2d 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff42 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff90 	bl	8002234 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5f 	bl	80021e0 <__NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff35 	bl	80021a8 <__NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffa2 	bl	8002298 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e043      	b.n	80023fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <HAL_DMA_Init+0xa8>)
 800237e:	4413      	add	r3, r2
 8002380:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_DMA_Init+0xac>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	009a      	lsls	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_DMA_Init+0xb0>)
 8002392:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	bffdfff8 	.word	0xbffdfff8
 800240c:	cccccccd 	.word	0xcccccccd
 8002410:	40020000 	.word	0x40020000

08002414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Start_IT+0x20>
 8002430:	2302      	movs	r3, #2
 8002432:	e04a      	b.n	80024ca <HAL_DMA_Start_IT+0xb6>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002442:	2b01      	cmp	r3, #1
 8002444:	d13a      	bne.n	80024bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f9e8 	bl	8002840 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 020e 	orr.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e00f      	b.n	80024aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0204 	bic.w	r2, r2, #4
 8002498:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 020a 	orr.w	r2, r2, #10
 80024a8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e005      	b.n	80024c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e020      	b.n	800253c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 020e 	bic.w	r2, r2, #14
 8002508:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800255a:	2b02      	cmp	r3, #2
 800255c:	d005      	beq.n	800256a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e051      	b.n	800260e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 020e 	bic.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_DMA_Abort_IT+0xd0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d029      	beq.n	80025e8 <HAL_DMA_Abort_IT+0xa0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_DMA_Abort_IT+0xd4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x9c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <HAL_DMA_Abort_IT+0xd8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d01a      	beq.n	80025de <HAL_DMA_Abort_IT+0x96>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_DMA_Abort_IT+0xdc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d012      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x90>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_DMA_Abort_IT+0xe0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00a      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x8a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_DMA_Abort_IT+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d102      	bne.n	80025cc <HAL_DMA_Abort_IT+0x84>
 80025c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025ca:	e00e      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d0:	e00b      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d6:	e008      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	e005      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	e002      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025e4:	2310      	movs	r3, #16
 80025e6:	e000      	b.n	80025ea <HAL_DMA_Abort_IT+0xa2>
 80025e8:	2301      	movs	r3, #1
 80025ea:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_DMA_Abort_IT+0xe8>)
 80025ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
    } 
  }
  return status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40020008 	.word	0x40020008
 800261c:	4002001c 	.word	0x4002001c
 8002620:	40020030 	.word	0x40020030
 8002624:	40020044 	.word	0x40020044
 8002628:	40020058 	.word	0x40020058
 800262c:	4002006c 	.word	0x4002006c
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2204      	movs	r2, #4
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d04f      	beq.n	80026fc <HAL_DMA_IRQHandler+0xc8>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04a      	beq.n	80026fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_DMA_IRQHandler+0x1f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d029      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xae>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_DMA_IRQHandler+0x1f4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d022      	beq.n	80026de <HAL_DMA_IRQHandler+0xaa>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_DMA_IRQHandler+0x1f8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xa4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a62      	ldr	r2, [pc, #392]	; (8002830 <HAL_DMA_IRQHandler+0x1fc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d012      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x9e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a60      	ldr	r2, [pc, #384]	; (8002834 <HAL_DMA_IRQHandler+0x200>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00a      	beq.n	80026cc <HAL_DMA_IRQHandler+0x98>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <HAL_DMA_IRQHandler+0x204>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <HAL_DMA_IRQHandler+0x92>
 80026c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c4:	e00e      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026ca:	e00b      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026d0:	e008      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026d6:	e005      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026dc:	e002      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	e000      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb0>
 80026e2:	2304      	movs	r3, #4
 80026e4:	4a55      	ldr	r2, [pc, #340]	; (800283c <HAL_DMA_IRQHandler+0x208>)
 80026e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8094 	beq.w	800281a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026fa:	e08e      	b.n	800281a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2202      	movs	r2, #2
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d056      	beq.n	80027ba <HAL_DMA_IRQHandler+0x186>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d051      	beq.n	80027ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020a 	bic.w	r2, r2, #10
 8002732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a38      	ldr	r2, [pc, #224]	; (8002824 <HAL_DMA_IRQHandler+0x1f0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d029      	beq.n	800279a <HAL_DMA_IRQHandler+0x166>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a37      	ldr	r2, [pc, #220]	; (8002828 <HAL_DMA_IRQHandler+0x1f4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d022      	beq.n	8002796 <HAL_DMA_IRQHandler+0x162>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a35      	ldr	r2, [pc, #212]	; (800282c <HAL_DMA_IRQHandler+0x1f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x15c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_DMA_IRQHandler+0x1fc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d012      	beq.n	800278a <HAL_DMA_IRQHandler+0x156>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a32      	ldr	r2, [pc, #200]	; (8002834 <HAL_DMA_IRQHandler+0x200>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x150>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a31      	ldr	r2, [pc, #196]	; (8002838 <HAL_DMA_IRQHandler+0x204>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d102      	bne.n	800277e <HAL_DMA_IRQHandler+0x14a>
 8002778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800277c:	e00e      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 800277e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002782:	e00b      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 8002784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002788:	e008      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 800278a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278e:	e005      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 8002790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002794:	e002      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 8002796:	2320      	movs	r3, #32
 8002798:	e000      	b.n	800279c <HAL_DMA_IRQHandler+0x168>
 800279a:	2302      	movs	r3, #2
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_DMA_IRQHandler+0x208>)
 800279e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d034      	beq.n	800281a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027b8:	e02f      	b.n	800281a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2208      	movs	r2, #8
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d028      	beq.n	800281c <HAL_DMA_IRQHandler+0x1e8>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 020e 	bic.w	r2, r2, #14
 80027e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
    }
  }
  return;
 800281a:	bf00      	nop
 800281c:	bf00      	nop
}
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020008 	.word	0x40020008
 8002828:	4002001c 	.word	0x4002001c
 800282c:	40020030 	.word	0x40020030
 8002830:	40020044 	.word	0x40020044
 8002834:	40020058 	.word	0x40020058
 8002838:	4002006c 	.word	0x4002006c
 800283c:	40020000 	.word	0x40020000

08002840 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f202 	lsl.w	r2, r1, r2
 800285c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d108      	bne.n	8002880 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800287e:	e007      	b.n	8002890 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
	...

0800289c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800289c:	b480      	push	{r7}
 800289e:	b08b      	sub	sp, #44	; 0x2c
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	e169      	b.n	8002b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028b0:	2201      	movs	r2, #1
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8158 	bne.w	8002b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4a9a      	ldr	r2, [pc, #616]	; (8002b3c <HAL_GPIO_Init+0x2a0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d05e      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
 80028d8:	4a98      	ldr	r2, [pc, #608]	; (8002b3c <HAL_GPIO_Init+0x2a0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d875      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 80028de:	4a98      	ldr	r2, [pc, #608]	; (8002b40 <HAL_GPIO_Init+0x2a4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d058      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
 80028e4:	4a96      	ldr	r2, [pc, #600]	; (8002b40 <HAL_GPIO_Init+0x2a4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d86f      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 80028ea:	4a96      	ldr	r2, [pc, #600]	; (8002b44 <HAL_GPIO_Init+0x2a8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d052      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
 80028f0:	4a94      	ldr	r2, [pc, #592]	; (8002b44 <HAL_GPIO_Init+0x2a8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d869      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 80028f6:	4a94      	ldr	r2, [pc, #592]	; (8002b48 <HAL_GPIO_Init+0x2ac>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d04c      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
 80028fc:	4a92      	ldr	r2, [pc, #584]	; (8002b48 <HAL_GPIO_Init+0x2ac>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d863      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 8002902:	4a92      	ldr	r2, [pc, #584]	; (8002b4c <HAL_GPIO_Init+0x2b0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d046      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
 8002908:	4a90      	ldr	r2, [pc, #576]	; (8002b4c <HAL_GPIO_Init+0x2b0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d85d      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 800290e:	2b12      	cmp	r3, #18
 8002910:	d82a      	bhi.n	8002968 <HAL_GPIO_Init+0xcc>
 8002912:	2b12      	cmp	r3, #18
 8002914:	d859      	bhi.n	80029ca <HAL_GPIO_Init+0x12e>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <HAL_GPIO_Init+0x80>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	08002997 	.word	0x08002997
 8002920:	08002971 	.word	0x08002971
 8002924:	08002983 	.word	0x08002983
 8002928:	080029c5 	.word	0x080029c5
 800292c:	080029cb 	.word	0x080029cb
 8002930:	080029cb 	.word	0x080029cb
 8002934:	080029cb 	.word	0x080029cb
 8002938:	080029cb 	.word	0x080029cb
 800293c:	080029cb 	.word	0x080029cb
 8002940:	080029cb 	.word	0x080029cb
 8002944:	080029cb 	.word	0x080029cb
 8002948:	080029cb 	.word	0x080029cb
 800294c:	080029cb 	.word	0x080029cb
 8002950:	080029cb 	.word	0x080029cb
 8002954:	080029cb 	.word	0x080029cb
 8002958:	080029cb 	.word	0x080029cb
 800295c:	080029cb 	.word	0x080029cb
 8002960:	08002979 	.word	0x08002979
 8002964:	0800298d 	.word	0x0800298d
 8002968:	4a79      	ldr	r2, [pc, #484]	; (8002b50 <HAL_GPIO_Init+0x2b4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800296e:	e02c      	b.n	80029ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	623b      	str	r3, [r7, #32]
          break;
 8002976:	e029      	b.n	80029cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	3304      	adds	r3, #4
 800297e:	623b      	str	r3, [r7, #32]
          break;
 8002980:	e024      	b.n	80029cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	3308      	adds	r3, #8
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e01f      	b.n	80029cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	330c      	adds	r3, #12
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e01a      	b.n	80029cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800299e:	2304      	movs	r3, #4
 80029a0:	623b      	str	r3, [r7, #32]
          break;
 80029a2:	e013      	b.n	80029cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ac:	2308      	movs	r3, #8
 80029ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	611a      	str	r2, [r3, #16]
          break;
 80029b6:	e009      	b.n	80029cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	615a      	str	r2, [r3, #20]
          break;
 80029c2:	e003      	b.n	80029cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
          break;
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x130>
          break;
 80029ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2bff      	cmp	r3, #255	; 0xff
 80029d0:	d801      	bhi.n	80029d6 <HAL_GPIO_Init+0x13a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e001      	b.n	80029da <HAL_GPIO_Init+0x13e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d802      	bhi.n	80029e8 <HAL_GPIO_Init+0x14c>
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	e002      	b.n	80029ee <HAL_GPIO_Init+0x152>
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	3b08      	subs	r3, #8
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	210f      	movs	r1, #15
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80b1 	beq.w	8002b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_GPIO_Init+0x2b8>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_GPIO_Init+0x2b8>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_GPIO_Init+0x2b8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <HAL_GPIO_Init+0x2bc>)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <HAL_GPIO_Init+0x2c0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_GPIO_Init+0x1ec>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <HAL_GPIO_Init+0x2c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00d      	beq.n	8002a84 <HAL_GPIO_Init+0x1e8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3e      	ldr	r2, [pc, #248]	; (8002b64 <HAL_GPIO_Init+0x2c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_Init+0x1e4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <HAL_GPIO_Init+0x2cc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_GPIO_Init+0x1e0>
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e006      	b.n	8002a8a <HAL_GPIO_Init+0x1ee>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e004      	b.n	8002a8a <HAL_GPIO_Init+0x1ee>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_Init+0x1ee>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_GPIO_Init+0x1ee>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	f002 0203 	and.w	r2, r2, #3
 8002a90:	0092      	lsls	r2, r2, #2
 8002a92:	4093      	lsls	r3, r2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a9a:	492f      	ldr	r1, [pc, #188]	; (8002b58 <HAL_GPIO_Init+0x2bc>)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	492c      	ldr	r1, [pc, #176]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4928      	ldr	r1, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4922      	ldr	r1, [pc, #136]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	491e      	ldr	r1, [pc, #120]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4918      	ldr	r1, [pc, #96]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4914      	ldr	r1, [pc, #80]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d021      	beq.n	8002b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e021      	b.n	8002b7e <HAL_GPIO_Init+0x2e2>
 8002b3a:	bf00      	nop
 8002b3c:	10320000 	.word	0x10320000
 8002b40:	10310000 	.word	0x10310000
 8002b44:	10220000 	.word	0x10220000
 8002b48:	10210000 	.word	0x10210000
 8002b4c:	10120000 	.word	0x10120000
 8002b50:	10110000 	.word	0x10110000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40010800 	.word	0x40010800
 8002b60:	40010c00 	.word	0x40010c00
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	3301      	adds	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f47f ae8e 	bne.w	80028b0 <HAL_GPIO_Init+0x14>
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	372c      	adds	r7, #44	; 0x2c
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bc0:	e003      	b.n	8002bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f806 	bl	8002c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40010400 	.word	0x40010400

08002c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e272      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c38:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c44:	4b8f      	ldr	r3, [pc, #572]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
 8002c50:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x12c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e24c      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7f      	ldr	r2, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fd7c 	bl	80017f0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fd78 	bl	80017f0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e200      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe4>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd68 	bl	80017f0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fd64 	bl	80017f0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1ec      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x10c>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c0      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4939      	ldr	r1, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd1d 	bl	80017f0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd19 	bl	80017f0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4927      	ldr	r1, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fcfc 	bl	80017f0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fcf8 	bl	80017f0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e180      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d03a      	beq.n	8002e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d019      	beq.n	8002e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fcdc 	bl	80017f0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fcd8 	bl	80017f0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e160      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f000 fad8 	bl	8003410 <RCC_Delay>
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fcc2 	bl	80017f0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6e:	e00f      	b.n	8002e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fcbe 	bl	80017f0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e146      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	42420000 	.word	0x42420000
 8002e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e9      	bne.n	8002e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a6 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fc7f 	bl	80017f0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe fc7b 	bl	80017f0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e103      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f32:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x356>
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a60      	ldr	r2, [pc, #384]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a57      	ldr	r2, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fc2f 	bl	80017f0 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fc2b 	bl	80017f0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x37e>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fc19 	bl	80017f0 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe fc15 	bl	80017f0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e09b      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d061      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d146      	bne.n	80030a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fbe9 	bl	80017f0 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fbe5 	bl	80017f0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e06d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a19      	ldr	r1, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	430b      	orrs	r3, r1
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fbb9 	bl	80017f0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fbb5 	bl	80017f0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
 80030a0:	e035      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fba2 	bl	80017f0 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fb9e 	bl	80017f0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e026      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x498>
 80030ce:	e01e      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e019      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x500>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0d0      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d910      	bls.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4965      	ldr	r1, [pc, #404]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d040      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e073      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe faf0 	bl	80017f0 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe faec 	bl	80017f0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e053      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4922      	ldr	r1, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1cc>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fa4e 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08009108 	.word	0x08009108
 80032e8:	20000004 	.word	0x20000004
 80032ec:	20000008 	.word	0x20000008

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b490      	push	{r4, r7}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_GetSysClockFreq+0xac>)
 80032f8:	1d3c      	adds	r4, r7, #4
 80032fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003300:	f240 2301 	movw	r3, #513	; 0x201
 8003304:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x40>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x46>
 800332e:	e02b      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	623b      	str	r3, [r7, #32]
      break;
 8003334:	e02b      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3328      	adds	r3, #40	; 0x28
 8003340:	443b      	add	r3, r7
 8003342:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003346:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	3328      	adds	r3, #40	; 0x28
 800335e:	443b      	add	r3, r7
 8003360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	fb03 f202 	mul.w	r2, r3, r2
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e004      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	623b      	str	r3, [r7, #32]
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800338a:	623b      	str	r3, [r7, #32]
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6a3b      	ldr	r3, [r7, #32]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc90      	pop	{r4, r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	080090f8 	.word	0x080090f8
 80033a0:	40021000 	.word	0x40021000
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <HAL_RCC_GetHCLKFreq+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff2 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08009118 	.word	0x08009118

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffde 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0adb      	lsrs	r3, r3, #11
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	08009118 	.word	0x08009118

08003410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <RCC_Delay+0x34>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <RCC_Delay+0x38>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800342c:	bf00      	nop
  }
  while (Delay --);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <RCC_Delay+0x1c>
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000004 	.word	0x20000004
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d07d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346c:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	61d3      	str	r3, [r2, #28]
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d118      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a0:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a42      	ldr	r2, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ac:	f7fe f9a0 	bl	80017f0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	e008      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe f99c 	bl	80017f0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e06d      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02e      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d027      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fa:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003500:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003506:	4a29      	ldr	r2, [pc, #164]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe f96b 	bl	80017f0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe f967 	bl	80017f0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e036      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4917      	ldr	r1, [pc, #92]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	4313      	orrs	r3, r2
 8003550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	490b      	ldr	r1, [pc, #44]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42420440 	.word	0x42420440

080035b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fea0 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 f93c 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d001      	beq.n	8003670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e032      	b.n	80036d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_TIM_Base_Start+0x88>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_Base_Start+0x48>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d009      	beq.n	80036a0 <HAL_TIM_Base_Start+0x48>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_TIM_Base_Start+0x8c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_Base_Start+0x48>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_TIM_Base_Start+0x90>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d010      	beq.n	80036d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	e007      	b.n	80036d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800

080036ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIM_ConfigClockSource+0x18>
 8003700:	2302      	movs	r3, #2
 8003702:	e0b3      	b.n	800386c <HAL_TIM_ConfigClockSource+0x180>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	d03e      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0xd0>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	f200 8087 	bhi.w	8003854 <HAL_TIM_ConfigClockSource+0x168>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	f000 8085 	beq.w	8003858 <HAL_TIM_ConfigClockSource+0x16c>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	d87f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d01a      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xa2>
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d87b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d050      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x116>
 8003760:	2b60      	cmp	r3, #96	; 0x60
 8003762:	d877      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d03c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0xf6>
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d873      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d058      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x136>
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d86f      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d064      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x156>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d86b      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d060      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x156>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d867      	bhi.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x156>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d05a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800378c:	e062      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f000 f942 	bl	8003a26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	609a      	str	r2, [r3, #8]
      break;
 80037ba:	e04e      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6899      	ldr	r1, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f000 f92b 	bl	8003a26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037de:	609a      	str	r2, [r3, #8]
      break;
 80037e0:	e03b      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 f8a2 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2150      	movs	r1, #80	; 0x50
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8f9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003800:	e02b      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f8c0 	bl	8003994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2160      	movs	r1, #96	; 0x60
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f8e9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003820:	e01b      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	461a      	mov	r2, r3
 8003830:	f000 f882 	bl	8003938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2140      	movs	r1, #64	; 0x40
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f8d9 	bl	80039f2 <TIM_ITRx_SetConfig>
      break;
 8003840:	e00b      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f000 f8d0 	bl	80039f2 <TIM_ITRx_SetConfig>
        break;
 8003852:	e002      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003858:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_Base_SetConfig+0xb8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x30>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x30>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a26      	ldr	r2, [pc, #152]	; (8003930 <TIM_Base_SetConfig+0xbc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x30>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a25      	ldr	r2, [pc, #148]	; (8003934 <TIM_Base_SetConfig+0xc0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <TIM_Base_SetConfig+0xb8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_Base_SetConfig+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d007      	beq.n	80038d6 <TIM_Base_SetConfig+0x62>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <TIM_Base_SetConfig+0xbc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0x62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <TIM_Base_SetConfig+0xc0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <TIM_Base_SetConfig+0xb8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800

08003938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0201 	bic.w	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f023 030a 	bic.w	r3, r3, #10
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0210 	bic.w	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	031b      	lsls	r3, r3, #12
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f043 0307 	orr.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e046      	b.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d009      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10c      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800

08003b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e03f      	b.n	8003bb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fc0a 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd89 	bl	800467c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d17c      	bne.n	8003cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit+0x2c>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e075      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit+0x3e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e06e      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fdef 	bl	80017f0 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d108      	bne.n	8003c3c <HAL_UART_Transmit+0x82>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e003      	b.n	8003c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c4c:	e02a      	b.n	8003ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fafa 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e036      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3302      	adds	r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e007      	b.n	8003c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	3301      	adds	r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1cf      	bne.n	8003c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 faca 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e006      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d11d      	bne.n	8003d34 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Receive_DMA+0x26>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e016      	b.n	8003d36 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Receive_DMA+0x38>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e00f      	b.n	8003d36 <HAL_UART_Receive_DMA+0x58>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fadc 	bl	80042e8 <UART_Start_Receive_DMA>
 8003d30:	4603      	mov	r3, r0
 8003d32:	e000      	b.n	8003d36 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_UART_IRQHandler+0x52>
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fbcc 	bl	8004528 <UART_Receive_IT>
      return;
 8003d90:	e17b      	b.n	800408a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80b1 	beq.w	8003efc <HAL_UART_IRQHandler+0x1bc>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <HAL_UART_IRQHandler+0x70>
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a6 	beq.w	8003efc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x90>
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_UART_IRQHandler+0xb0>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f043 0202 	orr.w	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_UART_IRQHandler+0xd0>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00f      	beq.n	8003e3a <HAL_UART_IRQHandler+0xfa>
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_UART_IRQHandler+0xee>
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 811e 	beq.w	8004080 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_UART_IRQHandler+0x11e>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb65 	bl	8004528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_UART_IRQHandler+0x146>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d031      	beq.n	8003eea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 faa7 	bl	80043da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d013      	beq.n	8003eda <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4a76      	ldr	r2, [pc, #472]	; (8004090 <HAL_UART_IRQHandler+0x350>)
 8003eb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fb42 	bl	8002548 <HAL_DMA_Abort_IT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00e      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8f5 	bl	80040ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e00a      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8f1 	bl	80040ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e006      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8ed 	bl	80040ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ef6:	e0c3      	b.n	8004080 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	bf00      	nop
    return;
 8003efa:	e0c1      	b.n	8004080 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 80a1 	bne.w	8004048 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 809b 	beq.w	8004048 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8095 	beq.w	8004048 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04e      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f4c:	8a3b      	ldrh	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8098 	beq.w	8004084 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f58:	8a3a      	ldrh	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	f080 8092 	bcs.w	8004084 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8a3a      	ldrh	r2, [r7, #16]
 8003f64:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d02b      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0210 	bic.w	r2, r2, #16
 8003fbc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fa85 	bl	80024d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f87f 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fde:	e051      	b.n	8004084 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d047      	beq.n	8004088 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ff8:	8a7b      	ldrh	r3, [r7, #18]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800400c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0210 	bic.w	r2, r2, #16
 800403a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800403c:	8a7b      	ldrh	r3, [r7, #18]
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f84b 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004046:	e01f      	b.n	8004088 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_UART_IRQHandler+0x324>
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f9fc 	bl	800445a <UART_Transmit_IT>
    return;
 8004062:	e012      	b.n	800408a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <HAL_UART_IRQHandler+0x34a>
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa3d 	bl	80044f8 <UART_EndTransmit_IT>
    return;
 800407e:	e004      	b.n	800408a <HAL_UART_IRQHandler+0x34a>
    return;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <HAL_UART_IRQHandler+0x34a>
      return;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_UART_IRQHandler+0x34a>
      return;
 8004088:	bf00      	nop
  }
}
 800408a:	3728      	adds	r7, #40	; 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	08004433 	.word	0x08004433

08004094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12a      	bne.n	8004164 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004122:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004142:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0210 	bic.w	r2, r2, #16
 8004162:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004170:	4619      	mov	r1, r3
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ffb2 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004178:	e002      	b.n	8004180 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff ff93 	bl	80040a6 <HAL_UART_RxCpltCallback>
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	4619      	mov	r1, r3
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff97 	bl	80040dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041ae:	e002      	b.n	80041b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff81 	bl	80040b8 <HAL_UART_RxHalfCpltCallback>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b21      	cmp	r3, #33	; 0x21
 80041f0:	d108      	bne.n	8004204 <UART_DMAError+0x46>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041fe:	68b8      	ldr	r0, [r7, #8]
 8004200:	f000 f8d6 	bl	80043b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b22      	cmp	r3, #34	; 0x22
 8004224:	d108      	bne.n	8004238 <UART_DMAError+0x7a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2200      	movs	r2, #0
 8004230:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	f000 f8d1 	bl	80043da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f7ff ff40 	bl	80040ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	e02c      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d028      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0x30>
 8004272:	f7fd fabd 	bl	80017f0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	429a      	cmp	r2, r3
 8004280:	d21d      	bcs.n	80042be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e00f      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d0c3      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <UART_Start_Receive_DMA+0xbc>)
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <UART_Start_Receive_DMA+0xc0>)
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <UART_Start_Receive_DMA+0xc4>)
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f7fe f864 	bl	8002414 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004378:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004398:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	080040f3 	.word	0x080040f3
 80043a8:	08004189 	.word	0x08004189
 80043ac:	080041bf 	.word	0x080041bf

080043b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0210 	bic.w	r2, r2, #16
 8004418:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fe3c 	bl	80040ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b21      	cmp	r3, #33	; 0x21
 800446c:	d13e      	bne.n	80044ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	d114      	bne.n	80044a2 <UART_Transmit_IT+0x48>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d110      	bne.n	80044a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]
 80044a0:	e008      	b.n	80044b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6211      	str	r1, [r2, #32]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4619      	mov	r1, r3
 80044c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdbb 	bl	8004094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b22      	cmp	r3, #34	; 0x22
 800453a:	f040 8099 	bne.w	8004670 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d117      	bne.n	8004578 <UART_Receive_IT+0x50>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	b29a      	uxth	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
 8004576:	e026      	b.n	80045c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d007      	beq.n	800459c <UART_Receive_IT+0x74>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <UART_Receive_IT+0x82>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e008      	b.n	80045bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4619      	mov	r1, r3
 80045d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d148      	bne.n	800466c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0220 	bic.w	r2, r2, #32
 80045e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	2b01      	cmp	r3, #1
 8004618:	d123      	bne.n	8004662 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b10      	cmp	r3, #16
 800463c:	d10a      	bne.n	8004654 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fd3e 	bl	80040dc <HAL_UARTEx_RxEventCallback>
 8004660:	e002      	b.n	8004668 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fd1f 	bl	80040a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e002      	b.n	8004672 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046b6:	f023 030c 	bic.w	r3, r3, #12
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <UART_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fe fe80 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	e002      	b.n	80046f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fe68 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <UART_SetConfig+0x118>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	0119      	lsls	r1, r3, #4
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009a      	lsls	r2, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	fbb2 f2f3 	udiv	r2, r2, r3
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <UART_SetConfig+0x118>)
 800472a:	fba3 0302 	umull	r0, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2064      	movs	r0, #100	; 0x64
 8004732:	fb00 f303 	mul.w	r3, r0, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	3332      	adds	r3, #50	; 0x32
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <UART_SetConfig+0x118>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004748:	4419      	add	r1, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009a      	lsls	r2, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <UART_SetConfig+0x118>)
 8004762:	fba3 0302 	umull	r0, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2064      	movs	r0, #100	; 0x64
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	; 0x32
 8004774:	4a07      	ldr	r2, [pc, #28]	; (8004794 <UART_SetConfig+0x118>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	440a      	add	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40013800 	.word	0x40013800
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <__errno>:
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <__errno+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000010 	.word	0x20000010

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	2600      	movs	r6, #0
 80047a8:	4d0c      	ldr	r5, [pc, #48]	; (80047dc <__libc_init_array+0x38>)
 80047aa:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	f004 fc92 	bl	80090dc <_init>
 80047b8:	2600      	movs	r6, #0
 80047ba:	4d0a      	ldr	r5, [pc, #40]	; (80047e4 <__libc_init_array+0x40>)
 80047bc:	4c0a      	ldr	r4, [pc, #40]	; (80047e8 <__libc_init_array+0x44>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	08009620 	.word	0x08009620
 80047e0:	08009620 	.word	0x08009620
 80047e4:	08009620 	.word	0x08009620
 80047e8:	08009624 	.word	0x08009624

080047ec <memset>:
 80047ec:	4603      	mov	r3, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__cvt>:
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004802:	461f      	mov	r7, r3
 8004804:	bfbb      	ittet	lt
 8004806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800480a:	461f      	movlt	r7, r3
 800480c:	2300      	movge	r3, #0
 800480e:	232d      	movlt	r3, #45	; 0x2d
 8004810:	b088      	sub	sp, #32
 8004812:	4614      	mov	r4, r2
 8004814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004818:	7013      	strb	r3, [r2, #0]
 800481a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800481c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004820:	f023 0820 	bic.w	r8, r3, #32
 8004824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004828:	d005      	beq.n	8004836 <__cvt+0x3a>
 800482a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800482e:	d100      	bne.n	8004832 <__cvt+0x36>
 8004830:	3501      	adds	r5, #1
 8004832:	2302      	movs	r3, #2
 8004834:	e000      	b.n	8004838 <__cvt+0x3c>
 8004836:	2303      	movs	r3, #3
 8004838:	aa07      	add	r2, sp, #28
 800483a:	9204      	str	r2, [sp, #16]
 800483c:	aa06      	add	r2, sp, #24
 800483e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004842:	e9cd 3500 	strd	r3, r5, [sp]
 8004846:	4622      	mov	r2, r4
 8004848:	463b      	mov	r3, r7
 800484a:	f001 fde1 	bl	8006410 <_dtoa_r>
 800484e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004852:	4606      	mov	r6, r0
 8004854:	d102      	bne.n	800485c <__cvt+0x60>
 8004856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004858:	07db      	lsls	r3, r3, #31
 800485a:	d522      	bpl.n	80048a2 <__cvt+0xa6>
 800485c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004860:	eb06 0905 	add.w	r9, r6, r5
 8004864:	d110      	bne.n	8004888 <__cvt+0x8c>
 8004866:	7833      	ldrb	r3, [r6, #0]
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d10a      	bne.n	8004882 <__cvt+0x86>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4620      	mov	r0, r4
 8004872:	4639      	mov	r1, r7
 8004874:	f7fc f898 	bl	80009a8 <__aeabi_dcmpeq>
 8004878:	b918      	cbnz	r0, 8004882 <__cvt+0x86>
 800487a:	f1c5 0501 	rsb	r5, r5, #1
 800487e:	f8ca 5000 	str.w	r5, [sl]
 8004882:	f8da 3000 	ldr.w	r3, [sl]
 8004886:	4499      	add	r9, r3
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	4620      	mov	r0, r4
 800488e:	4639      	mov	r1, r7
 8004890:	f7fc f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8004894:	b108      	cbz	r0, 800489a <__cvt+0x9e>
 8004896:	f8cd 901c 	str.w	r9, [sp, #28]
 800489a:	2230      	movs	r2, #48	; 0x30
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	454b      	cmp	r3, r9
 80048a0:	d307      	bcc.n	80048b2 <__cvt+0xb6>
 80048a2:	4630      	mov	r0, r6
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048a8:	1b9b      	subs	r3, r3, r6
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	b008      	add	sp, #32
 80048ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	9107      	str	r1, [sp, #28]
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e7f0      	b.n	800489c <__cvt+0xa0>

080048ba <__exponent>:
 80048ba:	4603      	mov	r3, r0
 80048bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048be:	2900      	cmp	r1, #0
 80048c0:	f803 2b02 	strb.w	r2, [r3], #2
 80048c4:	bfb6      	itet	lt
 80048c6:	222d      	movlt	r2, #45	; 0x2d
 80048c8:	222b      	movge	r2, #43	; 0x2b
 80048ca:	4249      	neglt	r1, r1
 80048cc:	2909      	cmp	r1, #9
 80048ce:	7042      	strb	r2, [r0, #1]
 80048d0:	dd2b      	ble.n	800492a <__exponent+0x70>
 80048d2:	f10d 0407 	add.w	r4, sp, #7
 80048d6:	46a4      	mov	ip, r4
 80048d8:	270a      	movs	r7, #10
 80048da:	fb91 f6f7 	sdiv	r6, r1, r7
 80048de:	460a      	mov	r2, r1
 80048e0:	46a6      	mov	lr, r4
 80048e2:	fb07 1516 	mls	r5, r7, r6, r1
 80048e6:	2a63      	cmp	r2, #99	; 0x63
 80048e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80048ec:	4631      	mov	r1, r6
 80048ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80048f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048f6:	dcf0      	bgt.n	80048da <__exponent+0x20>
 80048f8:	3130      	adds	r1, #48	; 0x30
 80048fa:	f1ae 0502 	sub.w	r5, lr, #2
 80048fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004902:	4629      	mov	r1, r5
 8004904:	1c44      	adds	r4, r0, #1
 8004906:	4561      	cmp	r1, ip
 8004908:	d30a      	bcc.n	8004920 <__exponent+0x66>
 800490a:	f10d 0209 	add.w	r2, sp, #9
 800490e:	eba2 020e 	sub.w	r2, r2, lr
 8004912:	4565      	cmp	r5, ip
 8004914:	bf88      	it	hi
 8004916:	2200      	movhi	r2, #0
 8004918:	4413      	add	r3, r2
 800491a:	1a18      	subs	r0, r3, r0
 800491c:	b003      	add	sp, #12
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004928:	e7ed      	b.n	8004906 <__exponent+0x4c>
 800492a:	2330      	movs	r3, #48	; 0x30
 800492c:	3130      	adds	r1, #48	; 0x30
 800492e:	7083      	strb	r3, [r0, #2]
 8004930:	70c1      	strb	r1, [r0, #3]
 8004932:	1d03      	adds	r3, r0, #4
 8004934:	e7f1      	b.n	800491a <__exponent+0x60>
	...

08004938 <_printf_float>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	b091      	sub	sp, #68	; 0x44
 800493e:	460c      	mov	r4, r1
 8004940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004944:	4616      	mov	r6, r2
 8004946:	461f      	mov	r7, r3
 8004948:	4605      	mov	r5, r0
 800494a:	f002 fec7 	bl	80076dc <_localeconv_r>
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	f7fb fbfc 	bl	8000150 <strlen>
 8004958:	2300      	movs	r3, #0
 800495a:	930e      	str	r3, [sp, #56]	; 0x38
 800495c:	f8d8 3000 	ldr.w	r3, [r8]
 8004960:	900a      	str	r0, [sp, #40]	; 0x28
 8004962:	3307      	adds	r3, #7
 8004964:	f023 0307 	bic.w	r3, r3, #7
 8004968:	f103 0208 	add.w	r2, r3, #8
 800496c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004970:	f8d4 b000 	ldr.w	fp, [r4]
 8004974:	f8c8 2000 	str.w	r2, [r8]
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004988:	930b      	str	r3, [sp, #44]	; 0x2c
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	4640      	mov	r0, r8
 8004990:	4b9c      	ldr	r3, [pc, #624]	; (8004c04 <_printf_float+0x2cc>)
 8004992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004994:	f7fc f83a 	bl	8000a0c <__aeabi_dcmpun>
 8004998:	bb70      	cbnz	r0, 80049f8 <_printf_float+0xc0>
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	4640      	mov	r0, r8
 80049a0:	4b98      	ldr	r3, [pc, #608]	; (8004c04 <_printf_float+0x2cc>)
 80049a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a4:	f7fc f814 	bl	80009d0 <__aeabi_dcmple>
 80049a8:	bb30      	cbnz	r0, 80049f8 <_printf_float+0xc0>
 80049aa:	2200      	movs	r2, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	4640      	mov	r0, r8
 80049b0:	4651      	mov	r1, sl
 80049b2:	f7fc f803 	bl	80009bc <__aeabi_dcmplt>
 80049b6:	b110      	cbz	r0, 80049be <_printf_float+0x86>
 80049b8:	232d      	movs	r3, #45	; 0x2d
 80049ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049be:	4b92      	ldr	r3, [pc, #584]	; (8004c08 <_printf_float+0x2d0>)
 80049c0:	4892      	ldr	r0, [pc, #584]	; (8004c0c <_printf_float+0x2d4>)
 80049c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049c6:	bf94      	ite	ls
 80049c8:	4698      	movls	r8, r3
 80049ca:	4680      	movhi	r8, r0
 80049cc:	2303      	movs	r3, #3
 80049ce:	f04f 0a00 	mov.w	sl, #0
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	f02b 0304 	bic.w	r3, fp, #4
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	4633      	mov	r3, r6
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	9700      	str	r7, [sp, #0]
 80049e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80049e4:	f000 f9d4 	bl	8004d90 <_printf_common>
 80049e8:	3001      	adds	r0, #1
 80049ea:	f040 8090 	bne.w	8004b0e <_printf_float+0x1d6>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295
 80049f2:	b011      	add	sp, #68	; 0x44
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	4642      	mov	r2, r8
 80049fa:	4653      	mov	r3, sl
 80049fc:	4640      	mov	r0, r8
 80049fe:	4651      	mov	r1, sl
 8004a00:	f7fc f804 	bl	8000a0c <__aeabi_dcmpun>
 8004a04:	b148      	cbz	r0, 8004a1a <_printf_float+0xe2>
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	bfb8      	it	lt
 8004a0c:	232d      	movlt	r3, #45	; 0x2d
 8004a0e:	4880      	ldr	r0, [pc, #512]	; (8004c10 <_printf_float+0x2d8>)
 8004a10:	bfb8      	it	lt
 8004a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a16:	4b7f      	ldr	r3, [pc, #508]	; (8004c14 <_printf_float+0x2dc>)
 8004a18:	e7d3      	b.n	80049c2 <_printf_float+0x8a>
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	d142      	bne.n	8004aaa <_printf_float+0x172>
 8004a24:	2306      	movs	r3, #6
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	9206      	str	r2, [sp, #24]
 8004a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8004a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a32:	aa0d      	add	r2, sp, #52	; 0x34
 8004a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a38:	9203      	str	r2, [sp, #12]
 8004a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	4642      	mov	r2, r8
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4653      	mov	r3, sl
 8004a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a50:	f7ff fed4 	bl	80047fc <__cvt>
 8004a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a56:	4680      	mov	r8, r0
 8004a58:	2947      	cmp	r1, #71	; 0x47
 8004a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a5c:	d108      	bne.n	8004a70 <_printf_float+0x138>
 8004a5e:	1cc8      	adds	r0, r1, #3
 8004a60:	db02      	blt.n	8004a68 <_printf_float+0x130>
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	4299      	cmp	r1, r3
 8004a66:	dd40      	ble.n	8004aea <_printf_float+0x1b2>
 8004a68:	f1a9 0902 	sub.w	r9, r9, #2
 8004a6c:	fa5f f989 	uxtb.w	r9, r9
 8004a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a74:	d81f      	bhi.n	8004ab6 <_printf_float+0x17e>
 8004a76:	464a      	mov	r2, r9
 8004a78:	3901      	subs	r1, #1
 8004a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8004a80:	f7ff ff1b 	bl	80048ba <__exponent>
 8004a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a86:	4682      	mov	sl, r0
 8004a88:	1813      	adds	r3, r2, r0
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	dc02      	bgt.n	8004a96 <_printf_float+0x15e>
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	07d2      	lsls	r2, r2, #31
 8004a94:	d501      	bpl.n	8004a9a <_printf_float+0x162>
 8004a96:	3301      	adds	r3, #1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d09b      	beq.n	80049da <_printf_float+0xa2>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa8:	e797      	b.n	80049da <_printf_float+0xa2>
 8004aaa:	2947      	cmp	r1, #71	; 0x47
 8004aac:	d1bc      	bne.n	8004a28 <_printf_float+0xf0>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ba      	bne.n	8004a28 <_printf_float+0xf0>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7b7      	b.n	8004a26 <_printf_float+0xee>
 8004ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004aba:	d118      	bne.n	8004aee <_printf_float+0x1b6>
 8004abc:	2900      	cmp	r1, #0
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	dd0b      	ble.n	8004ada <_printf_float+0x1a2>
 8004ac2:	6121      	str	r1, [r4, #16]
 8004ac4:	b913      	cbnz	r3, 8004acc <_printf_float+0x194>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	07d0      	lsls	r0, r2, #31
 8004aca:	d502      	bpl.n	8004ad2 <_printf_float+0x19a>
 8004acc:	3301      	adds	r3, #1
 8004ace:	440b      	add	r3, r1
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	f04f 0a00 	mov.w	sl, #0
 8004ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ad8:	e7df      	b.n	8004a9a <_printf_float+0x162>
 8004ada:	b913      	cbnz	r3, 8004ae2 <_printf_float+0x1aa>
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	07d2      	lsls	r2, r2, #31
 8004ae0:	d501      	bpl.n	8004ae6 <_printf_float+0x1ae>
 8004ae2:	3302      	adds	r3, #2
 8004ae4:	e7f4      	b.n	8004ad0 <_printf_float+0x198>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e7f2      	b.n	8004ad0 <_printf_float+0x198>
 8004aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af0:	4299      	cmp	r1, r3
 8004af2:	db05      	blt.n	8004b00 <_printf_float+0x1c8>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	6121      	str	r1, [r4, #16]
 8004af8:	07d8      	lsls	r0, r3, #31
 8004afa:	d5ea      	bpl.n	8004ad2 <_printf_float+0x19a>
 8004afc:	1c4b      	adds	r3, r1, #1
 8004afe:	e7e7      	b.n	8004ad0 <_printf_float+0x198>
 8004b00:	2900      	cmp	r1, #0
 8004b02:	bfcc      	ite	gt
 8004b04:	2201      	movgt	r2, #1
 8004b06:	f1c1 0202 	rsble	r2, r1, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	e7e0      	b.n	8004ad0 <_printf_float+0x198>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	055a      	lsls	r2, r3, #21
 8004b12:	d407      	bmi.n	8004b24 <_printf_float+0x1ec>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	4642      	mov	r2, r8
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d12b      	bne.n	8004b7a <_printf_float+0x242>
 8004b22:	e764      	b.n	80049ee <_printf_float+0xb6>
 8004b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b28:	f240 80dd 	bls.w	8004ce6 <_printf_float+0x3ae>
 8004b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b30:	2200      	movs	r2, #0
 8004b32:	2300      	movs	r3, #0
 8004b34:	f7fb ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d033      	beq.n	8004ba4 <_printf_float+0x26c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4628      	mov	r0, r5
 8004b42:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <_printf_float+0x2e0>)
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f af51 	beq.w	80049ee <_printf_float+0xb6>
 8004b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b50:	429a      	cmp	r2, r3
 8004b52:	db02      	blt.n	8004b5a <_printf_float+0x222>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07d8      	lsls	r0, r3, #31
 8004b58:	d50f      	bpl.n	8004b7a <_printf_float+0x242>
 8004b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f af42 	beq.w	80049ee <_printf_float+0xb6>
 8004b6a:	f04f 0800 	mov.w	r8, #0
 8004b6e:	f104 091a 	add.w	r9, r4, #26
 8004b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b74:	3b01      	subs	r3, #1
 8004b76:	4543      	cmp	r3, r8
 8004b78:	dc09      	bgt.n	8004b8e <_printf_float+0x256>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	079b      	lsls	r3, r3, #30
 8004b7e:	f100 8102 	bmi.w	8004d86 <_printf_float+0x44e>
 8004b82:	68e0      	ldr	r0, [r4, #12]
 8004b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b86:	4298      	cmp	r0, r3
 8004b88:	bfb8      	it	lt
 8004b8a:	4618      	movlt	r0, r3
 8004b8c:	e731      	b.n	80049f2 <_printf_float+0xba>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	464a      	mov	r2, r9
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f af28 	beq.w	80049ee <_printf_float+0xb6>
 8004b9e:	f108 0801 	add.w	r8, r8, #1
 8004ba2:	e7e6      	b.n	8004b72 <_printf_float+0x23a>
 8004ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dc38      	bgt.n	8004c1c <_printf_float+0x2e4>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <_printf_float+0x2e0>)
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f43f af1a 	beq.w	80049ee <_printf_float+0xb6>
 8004bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d102      	bne.n	8004bc8 <_printf_float+0x290>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07d9      	lsls	r1, r3, #31
 8004bc6:	d5d8      	bpl.n	8004b7a <_printf_float+0x242>
 8004bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af0b 	beq.w	80049ee <_printf_float+0xb6>
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	f104 0a1a 	add.w	sl, r4, #26
 8004be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be2:	425b      	negs	r3, r3
 8004be4:	454b      	cmp	r3, r9
 8004be6:	dc01      	bgt.n	8004bec <_printf_float+0x2b4>
 8004be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bea:	e794      	b.n	8004b16 <_printf_float+0x1de>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4652      	mov	r2, sl
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f aef9 	beq.w	80049ee <_printf_float+0xb6>
 8004bfc:	f109 0901 	add.w	r9, r9, #1
 8004c00:	e7ee      	b.n	8004be0 <_printf_float+0x2a8>
 8004c02:	bf00      	nop
 8004c04:	7fefffff 	.word	0x7fefffff
 8004c08:	08009124 	.word	0x08009124
 8004c0c:	08009128 	.word	0x08009128
 8004c10:	08009130 	.word	0x08009130
 8004c14:	0800912c 	.word	0x0800912c
 8004c18:	08009134 	.word	0x08009134
 8004c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bfa8      	it	ge
 8004c24:	461a      	movge	r2, r3
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	4691      	mov	r9, r2
 8004c2a:	dc37      	bgt.n	8004c9c <_printf_float+0x364>
 8004c2c:	f04f 0b00 	mov.w	fp, #0
 8004c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c34:	f104 021a 	add.w	r2, r4, #26
 8004c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8004c40:	455b      	cmp	r3, fp
 8004c42:	dc33      	bgt.n	8004cac <_printf_float+0x374>
 8004c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	db3b      	blt.n	8004cc4 <_printf_float+0x38c>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07da      	lsls	r2, r3, #31
 8004c50:	d438      	bmi.n	8004cc4 <_printf_float+0x38c>
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c56:	eba3 020a 	sub.w	r2, r3, sl
 8004c5a:	eba3 0901 	sub.w	r9, r3, r1
 8004c5e:	4591      	cmp	r9, r2
 8004c60:	bfa8      	it	ge
 8004c62:	4691      	movge	r9, r2
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	dc34      	bgt.n	8004cd4 <_printf_float+0x39c>
 8004c6a:	f04f 0800 	mov.w	r8, #0
 8004c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c72:	f104 0a1a 	add.w	sl, r4, #26
 8004c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	eba3 0309 	sub.w	r3, r3, r9
 8004c80:	4543      	cmp	r3, r8
 8004c82:	f77f af7a 	ble.w	8004b7a <_printf_float+0x242>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f aeac 	beq.w	80049ee <_printf_float+0xb6>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	e7ec      	b.n	8004c76 <_printf_float+0x33e>
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1c0      	bne.n	8004c2c <_printf_float+0x2f4>
 8004caa:	e6a0      	b.n	80049ee <_printf_float+0xb6>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f ae99 	beq.w	80049ee <_printf_float+0xb6>
 8004cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cbe:	f10b 0b01 	add.w	fp, fp, #1
 8004cc2:	e7b9      	b.n	8004c38 <_printf_float+0x300>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d1bf      	bne.n	8004c52 <_printf_float+0x31a>
 8004cd2:	e68c      	b.n	80049ee <_printf_float+0xb6>
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	eb08 020a 	add.w	r2, r8, sl
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d1c2      	bne.n	8004c6a <_printf_float+0x332>
 8004ce4:	e683      	b.n	80049ee <_printf_float+0xb6>
 8004ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	dc01      	bgt.n	8004cf0 <_printf_float+0x3b8>
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d537      	bpl.n	8004d60 <_printf_float+0x428>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f ae77 	beq.w	80049ee <_printf_float+0xb6>
 8004d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d04:	4631      	mov	r1, r6
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	f43f ae6f 	beq.w	80049ee <_printf_float+0xb6>
 8004d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	f7fb fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8004d1c:	b9d8      	cbnz	r0, 8004d56 <_printf_float+0x41e>
 8004d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d20:	f108 0201 	add.w	r2, r8, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d10e      	bne.n	8004d4e <_printf_float+0x416>
 8004d30:	e65d      	b.n	80049ee <_printf_float+0xb6>
 8004d32:	2301      	movs	r3, #1
 8004d34:	464a      	mov	r2, r9
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f ae56 	beq.w	80049ee <_printf_float+0xb6>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	4543      	cmp	r3, r8
 8004d4c:	dcf1      	bgt.n	8004d32 <_printf_float+0x3fa>
 8004d4e:	4653      	mov	r3, sl
 8004d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d54:	e6e0      	b.n	8004b18 <_printf_float+0x1e0>
 8004d56:	f04f 0800 	mov.w	r8, #0
 8004d5a:	f104 091a 	add.w	r9, r4, #26
 8004d5e:	e7f2      	b.n	8004d46 <_printf_float+0x40e>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4642      	mov	r2, r8
 8004d64:	e7df      	b.n	8004d26 <_printf_float+0x3ee>
 8004d66:	2301      	movs	r3, #1
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae3c 	beq.w	80049ee <_printf_float+0xb6>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d7e:	1a5b      	subs	r3, r3, r1
 8004d80:	4543      	cmp	r3, r8
 8004d82:	dcf0      	bgt.n	8004d66 <_printf_float+0x42e>
 8004d84:	e6fd      	b.n	8004b82 <_printf_float+0x24a>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	f104 0919 	add.w	r9, r4, #25
 8004d8e:	e7f4      	b.n	8004d7a <_printf_float+0x442>

08004d90 <_printf_common>:
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	4616      	mov	r6, r2
 8004d96:	4699      	mov	r9, r3
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfb8      	it	lt
 8004da2:	4613      	movlt	r3, r2
 8004da4:	6033      	str	r3, [r6, #0]
 8004da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004daa:	460c      	mov	r4, r1
 8004dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004db0:	b10a      	cbz	r2, 8004db6 <_printf_common+0x26>
 8004db2:	3301      	adds	r3, #1
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	0699      	lsls	r1, r3, #26
 8004dba:	bf42      	ittt	mi
 8004dbc:	6833      	ldrmi	r3, [r6, #0]
 8004dbe:	3302      	addmi	r3, #2
 8004dc0:	6033      	strmi	r3, [r6, #0]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	f015 0506 	ands.w	r5, r5, #6
 8004dc8:	d106      	bne.n	8004dd8 <_printf_common+0x48>
 8004dca:	f104 0a19 	add.w	sl, r4, #25
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	6832      	ldr	r2, [r6, #0]
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dc28      	bgt.n	8004e2a <_printf_common+0x9a>
 8004dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ddc:	1e13      	subs	r3, r2, #0
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	bf18      	it	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	0692      	lsls	r2, r2, #26
 8004de6:	d42d      	bmi.n	8004e44 <_printf_common+0xb4>
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df0:	47c0      	blx	r8
 8004df2:	3001      	adds	r0, #1
 8004df4:	d020      	beq.n	8004e38 <_printf_common+0xa8>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	68e5      	ldr	r5, [r4, #12]
 8004dfa:	f003 0306 	and.w	r3, r3, #6
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	bf18      	it	ne
 8004e02:	2500      	movne	r5, #0
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	f04f 0600 	mov.w	r6, #0
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	bf08      	it	eq
 8004e0e:	1aad      	subeq	r5, r5, r2
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	bf08      	it	eq
 8004e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	bfc4      	itt	gt
 8004e1c:	1a9b      	subgt	r3, r3, r2
 8004e1e:	18ed      	addgt	r5, r5, r3
 8004e20:	341a      	adds	r4, #26
 8004e22:	42b5      	cmp	r5, r6
 8004e24:	d11a      	bne.n	8004e5c <_printf_common+0xcc>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e008      	b.n	8004e3c <_printf_common+0xac>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c0      	blx	r8
 8004e34:	3001      	adds	r0, #1
 8004e36:	d103      	bne.n	8004e40 <_printf_common+0xb0>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	3501      	adds	r5, #1
 8004e42:	e7c4      	b.n	8004dce <_printf_common+0x3e>
 8004e44:	2030      	movs	r0, #48	; 0x30
 8004e46:	18e1      	adds	r1, r4, r3
 8004e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e52:	4422      	add	r2, r4
 8004e54:	3302      	adds	r3, #2
 8004e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e5a:	e7c5      	b.n	8004de8 <_printf_common+0x58>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4649      	mov	r1, r9
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c0      	blx	r8
 8004e66:	3001      	adds	r0, #1
 8004e68:	d0e6      	beq.n	8004e38 <_printf_common+0xa8>
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7d9      	b.n	8004e22 <_printf_common+0x92>
	...

08004e70 <_printf_i>:
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	7e0f      	ldrb	r7, [r1, #24]
 8004e76:	4691      	mov	r9, r2
 8004e78:	2f78      	cmp	r7, #120	; 0x78
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	469a      	mov	sl, r3
 8004e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e86:	d807      	bhi.n	8004e98 <_printf_i+0x28>
 8004e88:	2f62      	cmp	r7, #98	; 0x62
 8004e8a:	d80a      	bhi.n	8004ea2 <_printf_i+0x32>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	f000 80d9 	beq.w	8005044 <_printf_i+0x1d4>
 8004e92:	2f58      	cmp	r7, #88	; 0x58
 8004e94:	f000 80a4 	beq.w	8004fe0 <_printf_i+0x170>
 8004e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ea0:	e03a      	b.n	8004f18 <_printf_i+0xa8>
 8004ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ea6:	2b15      	cmp	r3, #21
 8004ea8:	d8f6      	bhi.n	8004e98 <_printf_i+0x28>
 8004eaa:	a101      	add	r1, pc, #4	; (adr r1, 8004eb0 <_printf_i+0x40>)
 8004eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004e99 	.word	0x08004e99
 8004ebc:	08004e99 	.word	0x08004e99
 8004ec0:	08004e99 	.word	0x08004e99
 8004ec4:	08004e99 	.word	0x08004e99
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e99 	.word	0x08004e99
 8004ed0:	08004e99 	.word	0x08004e99
 8004ed4:	08004e99 	.word	0x08004e99
 8004ed8:	08004e99 	.word	0x08004e99
 8004edc:	0800502b 	.word	0x0800502b
 8004ee0:	08004f4d 	.word	0x08004f4d
 8004ee4:	0800500d 	.word	0x0800500d
 8004ee8:	08004e99 	.word	0x08004e99
 8004eec:	08004e99 	.word	0x08004e99
 8004ef0:	0800504d 	.word	0x0800504d
 8004ef4:	08004e99 	.word	0x08004e99
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004e99 	.word	0x08004e99
 8004f00:	08004e99 	.word	0x08004e99
 8004f04:	08005015 	.word	0x08005015
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0a4      	b.n	8005066 <_printf_i+0x1f6>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	6829      	ldr	r1, [r5, #0]
 8004f20:	0606      	lsls	r6, r0, #24
 8004f22:	f101 0304 	add.w	r3, r1, #4
 8004f26:	d50a      	bpl.n	8004f3e <_printf_i+0xce>
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	da03      	bge.n	8004f38 <_printf_i+0xc8>
 8004f30:	232d      	movs	r3, #45	; 0x2d
 8004f32:	4276      	negs	r6, r6
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f38:	230a      	movs	r3, #10
 8004f3a:	485e      	ldr	r0, [pc, #376]	; (80050b4 <_printf_i+0x244>)
 8004f3c:	e019      	b.n	8004f72 <_printf_i+0x102>
 8004f3e:	680e      	ldr	r6, [r1, #0]
 8004f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	bf18      	it	ne
 8004f48:	b236      	sxthne	r6, r6
 8004f4a:	e7ef      	b.n	8004f2c <_printf_i+0xbc>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	6029      	str	r1, [r5, #0]
 8004f54:	0601      	lsls	r1, r0, #24
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0xec>
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <_printf_i+0xf2>
 8004f5c:	0646      	lsls	r6, r0, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0xe8>
 8004f60:	881e      	ldrh	r6, [r3, #0]
 8004f62:	2f6f      	cmp	r7, #111	; 0x6f
 8004f64:	bf0c      	ite	eq
 8004f66:	2308      	moveq	r3, #8
 8004f68:	230a      	movne	r3, #10
 8004f6a:	4852      	ldr	r0, [pc, #328]	; (80050b4 <_printf_i+0x244>)
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f72:	6865      	ldr	r5, [r4, #4]
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	bfa8      	it	ge
 8004f78:	6821      	ldrge	r1, [r4, #0]
 8004f7a:	60a5      	str	r5, [r4, #8]
 8004f7c:	bfa4      	itt	ge
 8004f7e:	f021 0104 	bicge.w	r1, r1, #4
 8004f82:	6021      	strge	r1, [r4, #0]
 8004f84:	b90e      	cbnz	r6, 8004f8a <_printf_i+0x11a>
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	d04d      	beq.n	8005026 <_printf_i+0x1b6>
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f90:	fb03 6711 	mls	r7, r3, r1, r6
 8004f94:	5dc7      	ldrb	r7, [r0, r7]
 8004f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f9a:	4637      	mov	r7, r6
 8004f9c:	42bb      	cmp	r3, r7
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	d9f4      	bls.n	8004f8c <_printf_i+0x11c>
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d10b      	bne.n	8004fbe <_printf_i+0x14e>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	07de      	lsls	r6, r3, #31
 8004faa:	d508      	bpl.n	8004fbe <_printf_i+0x14e>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	6861      	ldr	r1, [r4, #4]
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	bfde      	ittt	le
 8004fb4:	2330      	movle	r3, #48	; 0x30
 8004fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fbe:	1b52      	subs	r2, r2, r5
 8004fc0:	6122      	str	r2, [r4, #16]
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f8cd a000 	str.w	sl, [sp]
 8004fcc:	aa03      	add	r2, sp, #12
 8004fce:	f7ff fedf 	bl	8004d90 <_printf_common>
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d14c      	bne.n	8005070 <_printf_i+0x200>
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	b004      	add	sp, #16
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe0:	4834      	ldr	r0, [pc, #208]	; (80050b4 <_printf_i+0x244>)
 8004fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fe6:	6829      	ldr	r1, [r5, #0]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fee:	6029      	str	r1, [r5, #0]
 8004ff0:	061d      	lsls	r5, r3, #24
 8004ff2:	d514      	bpl.n	800501e <_printf_i+0x1ae>
 8004ff4:	07df      	lsls	r7, r3, #31
 8004ff6:	bf44      	itt	mi
 8004ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffc:	6023      	strmi	r3, [r4, #0]
 8004ffe:	b91e      	cbnz	r6, 8005008 <_printf_i+0x198>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	2310      	movs	r3, #16
 800500a:	e7af      	b.n	8004f6c <_printf_i+0xfc>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	f043 0320 	orr.w	r3, r3, #32
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	2378      	movs	r3, #120	; 0x78
 8005016:	4828      	ldr	r0, [pc, #160]	; (80050b8 <_printf_i+0x248>)
 8005018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800501c:	e7e3      	b.n	8004fe6 <_printf_i+0x176>
 800501e:	0659      	lsls	r1, r3, #25
 8005020:	bf48      	it	mi
 8005022:	b2b6      	uxthmi	r6, r6
 8005024:	e7e6      	b.n	8004ff4 <_printf_i+0x184>
 8005026:	4615      	mov	r5, r2
 8005028:	e7bb      	b.n	8004fa2 <_printf_i+0x132>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	6826      	ldr	r6, [r4, #0]
 800502e:	1d18      	adds	r0, r3, #4
 8005030:	6961      	ldr	r1, [r4, #20]
 8005032:	6028      	str	r0, [r5, #0]
 8005034:	0635      	lsls	r5, r6, #24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	d501      	bpl.n	800503e <_printf_i+0x1ce>
 800503a:	6019      	str	r1, [r3, #0]
 800503c:	e002      	b.n	8005044 <_printf_i+0x1d4>
 800503e:	0670      	lsls	r0, r6, #25
 8005040:	d5fb      	bpl.n	800503a <_printf_i+0x1ca>
 8005042:	8019      	strh	r1, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	4615      	mov	r5, r2
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	e7ba      	b.n	8004fc2 <_printf_i+0x152>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	2100      	movs	r1, #0
 8005050:	1d1a      	adds	r2, r3, #4
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	681d      	ldr	r5, [r3, #0]
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	4628      	mov	r0, r5
 800505a:	f002 fb5d 	bl	8007718 <memchr>
 800505e:	b108      	cbz	r0, 8005064 <_printf_i+0x1f4>
 8005060:	1b40      	subs	r0, r0, r5
 8005062:	6060      	str	r0, [r4, #4]
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	2300      	movs	r3, #0
 800506a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506e:	e7a8      	b.n	8004fc2 <_printf_i+0x152>
 8005070:	462a      	mov	r2, r5
 8005072:	4649      	mov	r1, r9
 8005074:	4640      	mov	r0, r8
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	47d0      	blx	sl
 800507a:	3001      	adds	r0, #1
 800507c:	d0ab      	beq.n	8004fd6 <_printf_i+0x166>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	079b      	lsls	r3, r3, #30
 8005082:	d413      	bmi.n	80050ac <_printf_i+0x23c>
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	4298      	cmp	r0, r3
 800508a:	bfb8      	it	lt
 800508c:	4618      	movlt	r0, r3
 800508e:	e7a4      	b.n	8004fda <_printf_i+0x16a>
 8005090:	2301      	movs	r3, #1
 8005092:	4632      	mov	r2, r6
 8005094:	4649      	mov	r1, r9
 8005096:	4640      	mov	r0, r8
 8005098:	47d0      	blx	sl
 800509a:	3001      	adds	r0, #1
 800509c:	d09b      	beq.n	8004fd6 <_printf_i+0x166>
 800509e:	3501      	adds	r5, #1
 80050a0:	68e3      	ldr	r3, [r4, #12]
 80050a2:	9903      	ldr	r1, [sp, #12]
 80050a4:	1a5b      	subs	r3, r3, r1
 80050a6:	42ab      	cmp	r3, r5
 80050a8:	dcf2      	bgt.n	8005090 <_printf_i+0x220>
 80050aa:	e7eb      	b.n	8005084 <_printf_i+0x214>
 80050ac:	2500      	movs	r5, #0
 80050ae:	f104 0619 	add.w	r6, r4, #25
 80050b2:	e7f5      	b.n	80050a0 <_printf_i+0x230>
 80050b4:	08009136 	.word	0x08009136
 80050b8:	08009147 	.word	0x08009147

080050bc <_scanf_float>:
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	b087      	sub	sp, #28
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	688b      	ldr	r3, [r1, #8]
 80050c6:	4617      	mov	r7, r2
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050ce:	bf85      	ittet	hi
 80050d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050d4:	195b      	addhi	r3, r3, r5
 80050d6:	2300      	movls	r3, #0
 80050d8:	9302      	strhi	r3, [sp, #8]
 80050da:	bf88      	it	hi
 80050dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050e0:	468b      	mov	fp, r1
 80050e2:	f04f 0500 	mov.w	r5, #0
 80050e6:	bf8c      	ite	hi
 80050e8:	608b      	strhi	r3, [r1, #8]
 80050ea:	9302      	strls	r3, [sp, #8]
 80050ec:	680b      	ldr	r3, [r1, #0]
 80050ee:	4680      	mov	r8, r0
 80050f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050f4:	f84b 3b1c 	str.w	r3, [fp], #28
 80050f8:	460c      	mov	r4, r1
 80050fa:	465e      	mov	r6, fp
 80050fc:	46aa      	mov	sl, r5
 80050fe:	46a9      	mov	r9, r5
 8005100:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005104:	9501      	str	r5, [sp, #4]
 8005106:	68a2      	ldr	r2, [r4, #8]
 8005108:	b152      	cbz	r2, 8005120 <_scanf_float+0x64>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b4e      	cmp	r3, #78	; 0x4e
 8005110:	d864      	bhi.n	80051dc <_scanf_float+0x120>
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d83c      	bhi.n	8005190 <_scanf_float+0xd4>
 8005116:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800511a:	b2c8      	uxtb	r0, r1
 800511c:	280e      	cmp	r0, #14
 800511e:	d93a      	bls.n	8005196 <_scanf_float+0xda>
 8005120:	f1b9 0f00 	cmp.w	r9, #0
 8005124:	d003      	beq.n	800512e <_scanf_float+0x72>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005132:	f1ba 0f01 	cmp.w	sl, #1
 8005136:	f200 8113 	bhi.w	8005360 <_scanf_float+0x2a4>
 800513a:	455e      	cmp	r6, fp
 800513c:	f200 8105 	bhi.w	800534a <_scanf_float+0x28e>
 8005140:	2501      	movs	r5, #1
 8005142:	4628      	mov	r0, r5
 8005144:	b007      	add	sp, #28
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800514e:	2a0d      	cmp	r2, #13
 8005150:	d8e6      	bhi.n	8005120 <_scanf_float+0x64>
 8005152:	a101      	add	r1, pc, #4	; (adr r1, 8005158 <_scanf_float+0x9c>)
 8005154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005158:	08005297 	.word	0x08005297
 800515c:	08005121 	.word	0x08005121
 8005160:	08005121 	.word	0x08005121
 8005164:	08005121 	.word	0x08005121
 8005168:	080052f7 	.word	0x080052f7
 800516c:	080052cf 	.word	0x080052cf
 8005170:	08005121 	.word	0x08005121
 8005174:	08005121 	.word	0x08005121
 8005178:	080052a5 	.word	0x080052a5
 800517c:	08005121 	.word	0x08005121
 8005180:	08005121 	.word	0x08005121
 8005184:	08005121 	.word	0x08005121
 8005188:	08005121 	.word	0x08005121
 800518c:	0800525d 	.word	0x0800525d
 8005190:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005194:	e7db      	b.n	800514e <_scanf_float+0x92>
 8005196:	290e      	cmp	r1, #14
 8005198:	d8c2      	bhi.n	8005120 <_scanf_float+0x64>
 800519a:	a001      	add	r0, pc, #4	; (adr r0, 80051a0 <_scanf_float+0xe4>)
 800519c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051a0:	0800524f 	.word	0x0800524f
 80051a4:	08005121 	.word	0x08005121
 80051a8:	0800524f 	.word	0x0800524f
 80051ac:	080052e3 	.word	0x080052e3
 80051b0:	08005121 	.word	0x08005121
 80051b4:	080051fd 	.word	0x080051fd
 80051b8:	08005239 	.word	0x08005239
 80051bc:	08005239 	.word	0x08005239
 80051c0:	08005239 	.word	0x08005239
 80051c4:	08005239 	.word	0x08005239
 80051c8:	08005239 	.word	0x08005239
 80051cc:	08005239 	.word	0x08005239
 80051d0:	08005239 	.word	0x08005239
 80051d4:	08005239 	.word	0x08005239
 80051d8:	08005239 	.word	0x08005239
 80051dc:	2b6e      	cmp	r3, #110	; 0x6e
 80051de:	d809      	bhi.n	80051f4 <_scanf_float+0x138>
 80051e0:	2b60      	cmp	r3, #96	; 0x60
 80051e2:	d8b2      	bhi.n	800514a <_scanf_float+0x8e>
 80051e4:	2b54      	cmp	r3, #84	; 0x54
 80051e6:	d077      	beq.n	80052d8 <_scanf_float+0x21c>
 80051e8:	2b59      	cmp	r3, #89	; 0x59
 80051ea:	d199      	bne.n	8005120 <_scanf_float+0x64>
 80051ec:	2d07      	cmp	r5, #7
 80051ee:	d197      	bne.n	8005120 <_scanf_float+0x64>
 80051f0:	2508      	movs	r5, #8
 80051f2:	e029      	b.n	8005248 <_scanf_float+0x18c>
 80051f4:	2b74      	cmp	r3, #116	; 0x74
 80051f6:	d06f      	beq.n	80052d8 <_scanf_float+0x21c>
 80051f8:	2b79      	cmp	r3, #121	; 0x79
 80051fa:	e7f6      	b.n	80051ea <_scanf_float+0x12e>
 80051fc:	6821      	ldr	r1, [r4, #0]
 80051fe:	05c8      	lsls	r0, r1, #23
 8005200:	d51a      	bpl.n	8005238 <_scanf_float+0x17c>
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005208:	6021      	str	r1, [r4, #0]
 800520a:	f109 0901 	add.w	r9, r9, #1
 800520e:	b11b      	cbz	r3, 8005218 <_scanf_float+0x15c>
 8005210:	3b01      	subs	r3, #1
 8005212:	3201      	adds	r2, #1
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	60a2      	str	r2, [r4, #8]
 8005218:	68a3      	ldr	r3, [r4, #8]
 800521a:	3b01      	subs	r3, #1
 800521c:	60a3      	str	r3, [r4, #8]
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	3301      	adds	r3, #1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	f340 8084 	ble.w	8005338 <_scanf_float+0x27c>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	e766      	b.n	8005106 <_scanf_float+0x4a>
 8005238:	eb1a 0f05 	cmn.w	sl, r5
 800523c:	f47f af70 	bne.w	8005120 <_scanf_float+0x64>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	f806 3b01 	strb.w	r3, [r6], #1
 800524c:	e7e4      	b.n	8005218 <_scanf_float+0x15c>
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	0610      	lsls	r0, r2, #24
 8005252:	f57f af65 	bpl.w	8005120 <_scanf_float+0x64>
 8005256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525a:	e7f4      	b.n	8005246 <_scanf_float+0x18a>
 800525c:	f1ba 0f00 	cmp.w	sl, #0
 8005260:	d10e      	bne.n	8005280 <_scanf_float+0x1c4>
 8005262:	f1b9 0f00 	cmp.w	r9, #0
 8005266:	d10e      	bne.n	8005286 <_scanf_float+0x1ca>
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800526e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005272:	d108      	bne.n	8005286 <_scanf_float+0x1ca>
 8005274:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005278:	f04f 0a01 	mov.w	sl, #1
 800527c:	6022      	str	r2, [r4, #0]
 800527e:	e7e3      	b.n	8005248 <_scanf_float+0x18c>
 8005280:	f1ba 0f02 	cmp.w	sl, #2
 8005284:	d055      	beq.n	8005332 <_scanf_float+0x276>
 8005286:	2d01      	cmp	r5, #1
 8005288:	d002      	beq.n	8005290 <_scanf_float+0x1d4>
 800528a:	2d04      	cmp	r5, #4
 800528c:	f47f af48 	bne.w	8005120 <_scanf_float+0x64>
 8005290:	3501      	adds	r5, #1
 8005292:	b2ed      	uxtb	r5, r5
 8005294:	e7d8      	b.n	8005248 <_scanf_float+0x18c>
 8005296:	f1ba 0f01 	cmp.w	sl, #1
 800529a:	f47f af41 	bne.w	8005120 <_scanf_float+0x64>
 800529e:	f04f 0a02 	mov.w	sl, #2
 80052a2:	e7d1      	b.n	8005248 <_scanf_float+0x18c>
 80052a4:	b97d      	cbnz	r5, 80052c6 <_scanf_float+0x20a>
 80052a6:	f1b9 0f00 	cmp.w	r9, #0
 80052aa:	f47f af3c 	bne.w	8005126 <_scanf_float+0x6a>
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052b8:	f47f af39 	bne.w	800512e <_scanf_float+0x72>
 80052bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052c0:	2501      	movs	r5, #1
 80052c2:	6022      	str	r2, [r4, #0]
 80052c4:	e7c0      	b.n	8005248 <_scanf_float+0x18c>
 80052c6:	2d03      	cmp	r5, #3
 80052c8:	d0e2      	beq.n	8005290 <_scanf_float+0x1d4>
 80052ca:	2d05      	cmp	r5, #5
 80052cc:	e7de      	b.n	800528c <_scanf_float+0x1d0>
 80052ce:	2d02      	cmp	r5, #2
 80052d0:	f47f af26 	bne.w	8005120 <_scanf_float+0x64>
 80052d4:	2503      	movs	r5, #3
 80052d6:	e7b7      	b.n	8005248 <_scanf_float+0x18c>
 80052d8:	2d06      	cmp	r5, #6
 80052da:	f47f af21 	bne.w	8005120 <_scanf_float+0x64>
 80052de:	2507      	movs	r5, #7
 80052e0:	e7b2      	b.n	8005248 <_scanf_float+0x18c>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	0591      	lsls	r1, r2, #22
 80052e6:	f57f af1b 	bpl.w	8005120 <_scanf_float+0x64>
 80052ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052ee:	6022      	str	r2, [r4, #0]
 80052f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80052f4:	e7a8      	b.n	8005248 <_scanf_float+0x18c>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005300:	d006      	beq.n	8005310 <_scanf_float+0x254>
 8005302:	0550      	lsls	r0, r2, #21
 8005304:	f57f af0c 	bpl.w	8005120 <_scanf_float+0x64>
 8005308:	f1b9 0f00 	cmp.w	r9, #0
 800530c:	f43f af0f 	beq.w	800512e <_scanf_float+0x72>
 8005310:	0591      	lsls	r1, r2, #22
 8005312:	bf58      	it	pl
 8005314:	9901      	ldrpl	r1, [sp, #4]
 8005316:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800531a:	bf58      	it	pl
 800531c:	eba9 0101 	subpl.w	r1, r9, r1
 8005320:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005324:	f04f 0900 	mov.w	r9, #0
 8005328:	bf58      	it	pl
 800532a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	e78a      	b.n	8005248 <_scanf_float+0x18c>
 8005332:	f04f 0a03 	mov.w	sl, #3
 8005336:	e787      	b.n	8005248 <_scanf_float+0x18c>
 8005338:	4639      	mov	r1, r7
 800533a:	4640      	mov	r0, r8
 800533c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005340:	4798      	blx	r3
 8005342:	2800      	cmp	r0, #0
 8005344:	f43f aedf 	beq.w	8005106 <_scanf_float+0x4a>
 8005348:	e6ea      	b.n	8005120 <_scanf_float+0x64>
 800534a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800534e:	463a      	mov	r2, r7
 8005350:	4640      	mov	r0, r8
 8005352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005356:	4798      	blx	r3
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	3b01      	subs	r3, #1
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	e6ec      	b.n	800513a <_scanf_float+0x7e>
 8005360:	1e6b      	subs	r3, r5, #1
 8005362:	2b06      	cmp	r3, #6
 8005364:	d825      	bhi.n	80053b2 <_scanf_float+0x2f6>
 8005366:	2d02      	cmp	r5, #2
 8005368:	d836      	bhi.n	80053d8 <_scanf_float+0x31c>
 800536a:	455e      	cmp	r6, fp
 800536c:	f67f aee8 	bls.w	8005140 <_scanf_float+0x84>
 8005370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005374:	463a      	mov	r2, r7
 8005376:	4640      	mov	r0, r8
 8005378:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800537c:	4798      	blx	r3
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	3b01      	subs	r3, #1
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	e7f1      	b.n	800536a <_scanf_float+0x2ae>
 8005386:	9802      	ldr	r0, [sp, #8]
 8005388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800538c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005390:	463a      	mov	r2, r7
 8005392:	9002      	str	r0, [sp, #8]
 8005394:	4640      	mov	r0, r8
 8005396:	4798      	blx	r3
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	3b01      	subs	r3, #1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053a2:	fa5f fa8a 	uxtb.w	sl, sl
 80053a6:	f1ba 0f02 	cmp.w	sl, #2
 80053aa:	d1ec      	bne.n	8005386 <_scanf_float+0x2ca>
 80053ac:	3d03      	subs	r5, #3
 80053ae:	b2ed      	uxtb	r5, r5
 80053b0:	1b76      	subs	r6, r6, r5
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	05da      	lsls	r2, r3, #23
 80053b6:	d52f      	bpl.n	8005418 <_scanf_float+0x35c>
 80053b8:	055b      	lsls	r3, r3, #21
 80053ba:	d510      	bpl.n	80053de <_scanf_float+0x322>
 80053bc:	455e      	cmp	r6, fp
 80053be:	f67f aebf 	bls.w	8005140 <_scanf_float+0x84>
 80053c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053c6:	463a      	mov	r2, r7
 80053c8:	4640      	mov	r0, r8
 80053ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053ce:	4798      	blx	r3
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	e7f1      	b.n	80053bc <_scanf_float+0x300>
 80053d8:	46aa      	mov	sl, r5
 80053da:	9602      	str	r6, [sp, #8]
 80053dc:	e7df      	b.n	800539e <_scanf_float+0x2e2>
 80053de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	2965      	cmp	r1, #101	; 0x65
 80053e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	d00c      	beq.n	800540c <_scanf_float+0x350>
 80053f2:	2945      	cmp	r1, #69	; 0x45
 80053f4:	d00a      	beq.n	800540c <_scanf_float+0x350>
 80053f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053fa:	463a      	mov	r2, r7
 80053fc:	4640      	mov	r0, r8
 80053fe:	4798      	blx	r3
 8005400:	6923      	ldr	r3, [r4, #16]
 8005402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005406:	3b01      	subs	r3, #1
 8005408:	1eb5      	subs	r5, r6, #2
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	463a      	mov	r2, r7
 800540e:	4640      	mov	r0, r8
 8005410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005414:	4798      	blx	r3
 8005416:	462e      	mov	r6, r5
 8005418:	6825      	ldr	r5, [r4, #0]
 800541a:	f015 0510 	ands.w	r5, r5, #16
 800541e:	d155      	bne.n	80054cc <_scanf_float+0x410>
 8005420:	7035      	strb	r5, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d11b      	bne.n	8005466 <_scanf_float+0x3aa>
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	454b      	cmp	r3, r9
 8005432:	eba3 0209 	sub.w	r2, r3, r9
 8005436:	d123      	bne.n	8005480 <_scanf_float+0x3c4>
 8005438:	2200      	movs	r2, #0
 800543a:	4659      	mov	r1, fp
 800543c:	4640      	mov	r0, r8
 800543e:	f000 feb7 	bl	80061b0 <_strtod_r>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	f012 0f02 	tst.w	r2, #2
 800544a:	4606      	mov	r6, r0
 800544c:	460f      	mov	r7, r1
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	d021      	beq.n	8005496 <_scanf_float+0x3da>
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	9903      	ldr	r1, [sp, #12]
 8005456:	600a      	str	r2, [r1, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	e9c3 6700 	strd	r6, r7, [r3]
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60e3      	str	r3, [r4, #12]
 8005464:	e66d      	b.n	8005142 <_scanf_float+0x86>
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0e5      	beq.n	8005438 <_scanf_float+0x37c>
 800546c:	9905      	ldr	r1, [sp, #20]
 800546e:	230a      	movs	r3, #10
 8005470:	462a      	mov	r2, r5
 8005472:	4640      	mov	r0, r8
 8005474:	3101      	adds	r1, #1
 8005476:	f000 ff1d 	bl	80062b4 <_strtol_r>
 800547a:	9b04      	ldr	r3, [sp, #16]
 800547c:	9e05      	ldr	r6, [sp, #20]
 800547e:	1ac2      	subs	r2, r0, r3
 8005480:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005484:	429e      	cmp	r6, r3
 8005486:	bf28      	it	cs
 8005488:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800548c:	4630      	mov	r0, r6
 800548e:	4910      	ldr	r1, [pc, #64]	; (80054d0 <_scanf_float+0x414>)
 8005490:	f000 f864 	bl	800555c <siprintf>
 8005494:	e7d0      	b.n	8005438 <_scanf_float+0x37c>
 8005496:	f012 0f04 	tst.w	r2, #4
 800549a:	f103 0204 	add.w	r2, r3, #4
 800549e:	d1d9      	bne.n	8005454 <_scanf_float+0x398>
 80054a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80054a4:	f8cc 2000 	str.w	r2, [ip]
 80054a8:	f8d3 8000 	ldr.w	r8, [r3]
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	f7fb faac 	bl	8000a0c <__aeabi_dcmpun>
 80054b4:	b128      	cbz	r0, 80054c2 <_scanf_float+0x406>
 80054b6:	4807      	ldr	r0, [pc, #28]	; (80054d4 <_scanf_float+0x418>)
 80054b8:	f000 f84c 	bl	8005554 <nanf>
 80054bc:	f8c8 0000 	str.w	r0, [r8]
 80054c0:	e7cd      	b.n	800545e <_scanf_float+0x3a2>
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fb faff 	bl	8000ac8 <__aeabi_d2f>
 80054ca:	e7f7      	b.n	80054bc <_scanf_float+0x400>
 80054cc:	2500      	movs	r5, #0
 80054ce:	e638      	b.n	8005142 <_scanf_float+0x86>
 80054d0:	08009158 	.word	0x08009158
 80054d4:	0800925b 	.word	0x0800925b

080054d8 <rand>:
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <rand+0x5c>)
 80054da:	b510      	push	{r4, lr}
 80054dc:	681c      	ldr	r4, [r3, #0]
 80054de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054e0:	b9b3      	cbnz	r3, 8005510 <rand+0x38>
 80054e2:	2018      	movs	r0, #24
 80054e4:	f002 f8fe 	bl	80076e4 <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80054ec:	b920      	cbnz	r0, 80054f8 <rand+0x20>
 80054ee:	214e      	movs	r1, #78	; 0x4e
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <rand+0x60>)
 80054f2:	4812      	ldr	r0, [pc, #72]	; (800553c <rand+0x64>)
 80054f4:	f000 fee0 	bl	80062b8 <__assert_func>
 80054f8:	4911      	ldr	r1, [pc, #68]	; (8005540 <rand+0x68>)
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <rand+0x6c>)
 80054fc:	e9c0 1300 	strd	r1, r3, [r0]
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <rand+0x70>)
 8005502:	2100      	movs	r1, #0
 8005504:	6083      	str	r3, [r0, #8]
 8005506:	230b      	movs	r3, #11
 8005508:	8183      	strh	r3, [r0, #12]
 800550a:	2001      	movs	r0, #1
 800550c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005510:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <rand+0x74>)
 8005514:	6920      	ldr	r0, [r4, #16]
 8005516:	6963      	ldr	r3, [r4, #20]
 8005518:	4342      	muls	r2, r0
 800551a:	490d      	ldr	r1, [pc, #52]	; (8005550 <rand+0x78>)
 800551c:	fb01 2203 	mla	r2, r1, r3, r2
 8005520:	fba0 0101 	umull	r0, r1, r0, r1
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	eb42 0001 	adc.w	r0, r2, r1
 800552a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800552e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005532:	bd10      	pop	{r4, pc}
 8005534:	20000010 	.word	0x20000010
 8005538:	0800915d 	.word	0x0800915d
 800553c:	08009174 	.word	0x08009174
 8005540:	abcd330e 	.word	0xabcd330e
 8005544:	e66d1234 	.word	0xe66d1234
 8005548:	0005deec 	.word	0x0005deec
 800554c:	5851f42d 	.word	0x5851f42d
 8005550:	4c957f2d 	.word	0x4c957f2d

08005554 <nanf>:
 8005554:	4800      	ldr	r0, [pc, #0]	; (8005558 <nanf+0x4>)
 8005556:	4770      	bx	lr
 8005558:	7fc00000 	.word	0x7fc00000

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005562:	b500      	push	{lr}
 8005564:	b09c      	sub	sp, #112	; 0x70
 8005566:	ab1d      	add	r3, sp, #116	; 0x74
 8005568:	9002      	str	r0, [sp, #8]
 800556a:	9006      	str	r0, [sp, #24]
 800556c:	9107      	str	r1, [sp, #28]
 800556e:	9104      	str	r1, [sp, #16]
 8005570:	4808      	ldr	r0, [pc, #32]	; (8005594 <siprintf+0x38>)
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	a902      	add	r1, sp, #8
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	f002 feea 	bl	8008358 <_svfiprintf_r>
 8005584:	2200      	movs	r2, #0
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000010 	.word	0x20000010
 8005598:	ffff0208 	.word	0xffff0208

0800559c <sulp>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	460f      	mov	r7, r1
 80055a2:	4690      	mov	r8, r2
 80055a4:	f002 fc44 	bl	8007e30 <__ulp>
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	f1b8 0f00 	cmp.w	r8, #0
 80055b0:	d011      	beq.n	80055d6 <sulp+0x3a>
 80055b2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80055b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dd0b      	ble.n	80055d6 <sulp+0x3a>
 80055be:	2400      	movs	r4, #0
 80055c0:	051b      	lsls	r3, r3, #20
 80055c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80055c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	f7fa ff83 	bl	80004d8 <__aeabi_dmul>
 80055d2:	4604      	mov	r4, r0
 80055d4:	460d      	mov	r5, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080055e0 <_strtod_l>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	469b      	mov	fp, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	b09f      	sub	sp, #124	; 0x7c
 80055ea:	931a      	str	r3, [sp, #104]	; 0x68
 80055ec:	4b9e      	ldr	r3, [pc, #632]	; (8005868 <_strtod_l+0x288>)
 80055ee:	4682      	mov	sl, r0
 80055f0:	681f      	ldr	r7, [r3, #0]
 80055f2:	460e      	mov	r6, r1
 80055f4:	4638      	mov	r0, r7
 80055f6:	9215      	str	r2, [sp, #84]	; 0x54
 80055f8:	f7fa fdaa 	bl	8000150 <strlen>
 80055fc:	f04f 0800 	mov.w	r8, #0
 8005600:	4604      	mov	r4, r0
 8005602:	f04f 0900 	mov.w	r9, #0
 8005606:	9619      	str	r6, [sp, #100]	; 0x64
 8005608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	2a2b      	cmp	r2, #43	; 0x2b
 800560e:	d04c      	beq.n	80056aa <_strtod_l+0xca>
 8005610:	d83a      	bhi.n	8005688 <_strtod_l+0xa8>
 8005612:	2a0d      	cmp	r2, #13
 8005614:	d833      	bhi.n	800567e <_strtod_l+0x9e>
 8005616:	2a08      	cmp	r2, #8
 8005618:	d833      	bhi.n	8005682 <_strtod_l+0xa2>
 800561a:	2a00      	cmp	r2, #0
 800561c:	d03d      	beq.n	800569a <_strtod_l+0xba>
 800561e:	2300      	movs	r3, #0
 8005620:	930a      	str	r3, [sp, #40]	; 0x28
 8005622:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005624:	782b      	ldrb	r3, [r5, #0]
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	f040 80aa 	bne.w	8005780 <_strtod_l+0x1a0>
 800562c:	786b      	ldrb	r3, [r5, #1]
 800562e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005632:	2b58      	cmp	r3, #88	; 0x58
 8005634:	d166      	bne.n	8005704 <_strtod_l+0x124>
 8005636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005638:	4650      	mov	r0, sl
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	ab1a      	add	r3, sp, #104	; 0x68
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	4a8a      	ldr	r2, [pc, #552]	; (800586c <_strtod_l+0x28c>)
 8005642:	f8cd b008 	str.w	fp, [sp, #8]
 8005646:	ab1b      	add	r3, sp, #108	; 0x6c
 8005648:	a919      	add	r1, sp, #100	; 0x64
 800564a:	f001 fd49 	bl	80070e0 <__gethex>
 800564e:	f010 0607 	ands.w	r6, r0, #7
 8005652:	4604      	mov	r4, r0
 8005654:	d005      	beq.n	8005662 <_strtod_l+0x82>
 8005656:	2e06      	cmp	r6, #6
 8005658:	d129      	bne.n	80056ae <_strtod_l+0xce>
 800565a:	2300      	movs	r3, #0
 800565c:	3501      	adds	r5, #1
 800565e:	9519      	str	r5, [sp, #100]	; 0x64
 8005660:	930a      	str	r3, [sp, #40]	; 0x28
 8005662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 858a 	bne.w	800617e <_strtod_l+0xb9e>
 800566a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566c:	b1d3      	cbz	r3, 80056a4 <_strtod_l+0xc4>
 800566e:	4642      	mov	r2, r8
 8005670:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	b01f      	add	sp, #124	; 0x7c
 800567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567e:	2a20      	cmp	r2, #32
 8005680:	d1cd      	bne.n	800561e <_strtod_l+0x3e>
 8005682:	3301      	adds	r3, #1
 8005684:	9319      	str	r3, [sp, #100]	; 0x64
 8005686:	e7bf      	b.n	8005608 <_strtod_l+0x28>
 8005688:	2a2d      	cmp	r2, #45	; 0x2d
 800568a:	d1c8      	bne.n	800561e <_strtod_l+0x3e>
 800568c:	2201      	movs	r2, #1
 800568e:	920a      	str	r2, [sp, #40]	; 0x28
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	9219      	str	r2, [sp, #100]	; 0x64
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1c3      	bne.n	8005622 <_strtod_l+0x42>
 800569a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800569c:	9619      	str	r6, [sp, #100]	; 0x64
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 856b 	bne.w	800617a <_strtod_l+0xb9a>
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	e7e4      	b.n	8005674 <_strtod_l+0x94>
 80056aa:	2200      	movs	r2, #0
 80056ac:	e7ef      	b.n	800568e <_strtod_l+0xae>
 80056ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80056b0:	b13a      	cbz	r2, 80056c2 <_strtod_l+0xe2>
 80056b2:	2135      	movs	r1, #53	; 0x35
 80056b4:	a81c      	add	r0, sp, #112	; 0x70
 80056b6:	f002 fcbf 	bl	8008038 <__copybits>
 80056ba:	4650      	mov	r0, sl
 80056bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056be:	f002 f887 	bl	80077d0 <_Bfree>
 80056c2:	3e01      	subs	r6, #1
 80056c4:	2e04      	cmp	r6, #4
 80056c6:	d806      	bhi.n	80056d6 <_strtod_l+0xf6>
 80056c8:	e8df f006 	tbb	[pc, r6]
 80056cc:	1714030a 	.word	0x1714030a
 80056d0:	0a          	.byte	0x0a
 80056d1:	00          	.byte	0x00
 80056d2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80056d6:	0721      	lsls	r1, r4, #28
 80056d8:	d5c3      	bpl.n	8005662 <_strtod_l+0x82>
 80056da:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80056de:	e7c0      	b.n	8005662 <_strtod_l+0x82>
 80056e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80056e2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80056e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80056ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056ee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80056f2:	e7f0      	b.n	80056d6 <_strtod_l+0xf6>
 80056f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005870 <_strtod_l+0x290>
 80056f8:	e7ed      	b.n	80056d6 <_strtod_l+0xf6>
 80056fa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80056fe:	f04f 38ff 	mov.w	r8, #4294967295
 8005702:	e7e8      	b.n	80056d6 <_strtod_l+0xf6>
 8005704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	9219      	str	r2, [sp, #100]	; 0x64
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b30      	cmp	r3, #48	; 0x30
 800570e:	d0f9      	beq.n	8005704 <_strtod_l+0x124>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0a6      	beq.n	8005662 <_strtod_l+0x82>
 8005714:	2301      	movs	r3, #1
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800571a:	220a      	movs	r2, #10
 800571c:	9308      	str	r3, [sp, #32]
 800571e:	2300      	movs	r3, #0
 8005720:	469b      	mov	fp, r3
 8005722:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005726:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005728:	7805      	ldrb	r5, [r0, #0]
 800572a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800572e:	b2d9      	uxtb	r1, r3
 8005730:	2909      	cmp	r1, #9
 8005732:	d927      	bls.n	8005784 <_strtod_l+0x1a4>
 8005734:	4622      	mov	r2, r4
 8005736:	4639      	mov	r1, r7
 8005738:	f003 f87c 	bl	8008834 <strncmp>
 800573c:	2800      	cmp	r0, #0
 800573e:	d033      	beq.n	80057a8 <_strtod_l+0x1c8>
 8005740:	2000      	movs	r0, #0
 8005742:	462a      	mov	r2, r5
 8005744:	465c      	mov	r4, fp
 8005746:	4603      	mov	r3, r0
 8005748:	9004      	str	r0, [sp, #16]
 800574a:	2a65      	cmp	r2, #101	; 0x65
 800574c:	d001      	beq.n	8005752 <_strtod_l+0x172>
 800574e:	2a45      	cmp	r2, #69	; 0x45
 8005750:	d114      	bne.n	800577c <_strtod_l+0x19c>
 8005752:	b91c      	cbnz	r4, 800575c <_strtod_l+0x17c>
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4302      	orrs	r2, r0
 8005758:	d09f      	beq.n	800569a <_strtod_l+0xba>
 800575a:	2400      	movs	r4, #0
 800575c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800575e:	1c72      	adds	r2, r6, #1
 8005760:	9219      	str	r2, [sp, #100]	; 0x64
 8005762:	7872      	ldrb	r2, [r6, #1]
 8005764:	2a2b      	cmp	r2, #43	; 0x2b
 8005766:	d079      	beq.n	800585c <_strtod_l+0x27c>
 8005768:	2a2d      	cmp	r2, #45	; 0x2d
 800576a:	f000 8083 	beq.w	8005874 <_strtod_l+0x294>
 800576e:	2700      	movs	r7, #0
 8005770:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005774:	2909      	cmp	r1, #9
 8005776:	f240 8083 	bls.w	8005880 <_strtod_l+0x2a0>
 800577a:	9619      	str	r6, [sp, #100]	; 0x64
 800577c:	2500      	movs	r5, #0
 800577e:	e09f      	b.n	80058c0 <_strtod_l+0x2e0>
 8005780:	2300      	movs	r3, #0
 8005782:	e7c8      	b.n	8005716 <_strtod_l+0x136>
 8005784:	f1bb 0f08 	cmp.w	fp, #8
 8005788:	bfd5      	itete	le
 800578a:	9906      	ldrle	r1, [sp, #24]
 800578c:	9905      	ldrgt	r1, [sp, #20]
 800578e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005792:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005796:	f100 0001 	add.w	r0, r0, #1
 800579a:	bfd4      	ite	le
 800579c:	9306      	strle	r3, [sp, #24]
 800579e:	9305      	strgt	r3, [sp, #20]
 80057a0:	f10b 0b01 	add.w	fp, fp, #1
 80057a4:	9019      	str	r0, [sp, #100]	; 0x64
 80057a6:	e7be      	b.n	8005726 <_strtod_l+0x146>
 80057a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057aa:	191a      	adds	r2, r3, r4
 80057ac:	9219      	str	r2, [sp, #100]	; 0x64
 80057ae:	5d1a      	ldrb	r2, [r3, r4]
 80057b0:	f1bb 0f00 	cmp.w	fp, #0
 80057b4:	d036      	beq.n	8005824 <_strtod_l+0x244>
 80057b6:	465c      	mov	r4, fp
 80057b8:	9004      	str	r0, [sp, #16]
 80057ba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80057be:	2b09      	cmp	r3, #9
 80057c0:	d912      	bls.n	80057e8 <_strtod_l+0x208>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7c1      	b.n	800574a <_strtod_l+0x16a>
 80057c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057c8:	3001      	adds	r0, #1
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	9219      	str	r2, [sp, #100]	; 0x64
 80057ce:	785a      	ldrb	r2, [r3, #1]
 80057d0:	2a30      	cmp	r2, #48	; 0x30
 80057d2:	d0f8      	beq.n	80057c6 <_strtod_l+0x1e6>
 80057d4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80057d8:	2b08      	cmp	r3, #8
 80057da:	f200 84d5 	bhi.w	8006188 <_strtod_l+0xba8>
 80057de:	9004      	str	r0, [sp, #16]
 80057e0:	2000      	movs	r0, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057e6:	9308      	str	r3, [sp, #32]
 80057e8:	3a30      	subs	r2, #48	; 0x30
 80057ea:	f100 0301 	add.w	r3, r0, #1
 80057ee:	d013      	beq.n	8005818 <_strtod_l+0x238>
 80057f0:	9904      	ldr	r1, [sp, #16]
 80057f2:	1905      	adds	r5, r0, r4
 80057f4:	4419      	add	r1, r3
 80057f6:	9104      	str	r1, [sp, #16]
 80057f8:	4623      	mov	r3, r4
 80057fa:	210a      	movs	r1, #10
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	d113      	bne.n	8005828 <_strtod_l+0x248>
 8005800:	1823      	adds	r3, r4, r0
 8005802:	2b08      	cmp	r3, #8
 8005804:	f104 0401 	add.w	r4, r4, #1
 8005808:	4404      	add	r4, r0
 800580a:	dc1b      	bgt.n	8005844 <_strtod_l+0x264>
 800580c:	230a      	movs	r3, #10
 800580e:	9906      	ldr	r1, [sp, #24]
 8005810:	fb03 2301 	mla	r3, r3, r1, r2
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	2300      	movs	r3, #0
 8005818:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800581a:	4618      	mov	r0, r3
 800581c:	1c51      	adds	r1, r2, #1
 800581e:	9119      	str	r1, [sp, #100]	; 0x64
 8005820:	7852      	ldrb	r2, [r2, #1]
 8005822:	e7ca      	b.n	80057ba <_strtod_l+0x1da>
 8005824:	4658      	mov	r0, fp
 8005826:	e7d3      	b.n	80057d0 <_strtod_l+0x1f0>
 8005828:	2b08      	cmp	r3, #8
 800582a:	dc04      	bgt.n	8005836 <_strtod_l+0x256>
 800582c:	9f06      	ldr	r7, [sp, #24]
 800582e:	434f      	muls	r7, r1
 8005830:	9706      	str	r7, [sp, #24]
 8005832:	3301      	adds	r3, #1
 8005834:	e7e2      	b.n	80057fc <_strtod_l+0x21c>
 8005836:	1c5f      	adds	r7, r3, #1
 8005838:	2f10      	cmp	r7, #16
 800583a:	bfde      	ittt	le
 800583c:	9f05      	ldrle	r7, [sp, #20]
 800583e:	434f      	mulle	r7, r1
 8005840:	9705      	strle	r7, [sp, #20]
 8005842:	e7f6      	b.n	8005832 <_strtod_l+0x252>
 8005844:	2c10      	cmp	r4, #16
 8005846:	bfdf      	itttt	le
 8005848:	230a      	movle	r3, #10
 800584a:	9905      	ldrle	r1, [sp, #20]
 800584c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005850:	9305      	strle	r3, [sp, #20]
 8005852:	e7e0      	b.n	8005816 <_strtod_l+0x236>
 8005854:	2300      	movs	r3, #0
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	2301      	movs	r3, #1
 800585a:	e77b      	b.n	8005754 <_strtod_l+0x174>
 800585c:	2700      	movs	r7, #0
 800585e:	1cb2      	adds	r2, r6, #2
 8005860:	9219      	str	r2, [sp, #100]	; 0x64
 8005862:	78b2      	ldrb	r2, [r6, #2]
 8005864:	e784      	b.n	8005770 <_strtod_l+0x190>
 8005866:	bf00      	nop
 8005868:	0800943c 	.word	0x0800943c
 800586c:	080091d0 	.word	0x080091d0
 8005870:	7ff00000 	.word	0x7ff00000
 8005874:	2701      	movs	r7, #1
 8005876:	e7f2      	b.n	800585e <_strtod_l+0x27e>
 8005878:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800587a:	1c51      	adds	r1, r2, #1
 800587c:	9119      	str	r1, [sp, #100]	; 0x64
 800587e:	7852      	ldrb	r2, [r2, #1]
 8005880:	2a30      	cmp	r2, #48	; 0x30
 8005882:	d0f9      	beq.n	8005878 <_strtod_l+0x298>
 8005884:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005888:	2908      	cmp	r1, #8
 800588a:	f63f af77 	bhi.w	800577c <_strtod_l+0x19c>
 800588e:	f04f 0e0a 	mov.w	lr, #10
 8005892:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005896:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005898:	9209      	str	r2, [sp, #36]	; 0x24
 800589a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800589c:	1c51      	adds	r1, r2, #1
 800589e:	9119      	str	r1, [sp, #100]	; 0x64
 80058a0:	7852      	ldrb	r2, [r2, #1]
 80058a2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80058a6:	2d09      	cmp	r5, #9
 80058a8:	d935      	bls.n	8005916 <_strtod_l+0x336>
 80058aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058ac:	1b49      	subs	r1, r1, r5
 80058ae:	2908      	cmp	r1, #8
 80058b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80058b4:	dc02      	bgt.n	80058bc <_strtod_l+0x2dc>
 80058b6:	4565      	cmp	r5, ip
 80058b8:	bfa8      	it	ge
 80058ba:	4665      	movge	r5, ip
 80058bc:	b107      	cbz	r7, 80058c0 <_strtod_l+0x2e0>
 80058be:	426d      	negs	r5, r5
 80058c0:	2c00      	cmp	r4, #0
 80058c2:	d14c      	bne.n	800595e <_strtod_l+0x37e>
 80058c4:	9907      	ldr	r1, [sp, #28]
 80058c6:	4301      	orrs	r1, r0
 80058c8:	f47f aecb 	bne.w	8005662 <_strtod_l+0x82>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f aee4 	bne.w	800569a <_strtod_l+0xba>
 80058d2:	2a69      	cmp	r2, #105	; 0x69
 80058d4:	d026      	beq.n	8005924 <_strtod_l+0x344>
 80058d6:	dc23      	bgt.n	8005920 <_strtod_l+0x340>
 80058d8:	2a49      	cmp	r2, #73	; 0x49
 80058da:	d023      	beq.n	8005924 <_strtod_l+0x344>
 80058dc:	2a4e      	cmp	r2, #78	; 0x4e
 80058de:	f47f aedc 	bne.w	800569a <_strtod_l+0xba>
 80058e2:	499d      	ldr	r1, [pc, #628]	; (8005b58 <_strtod_l+0x578>)
 80058e4:	a819      	add	r0, sp, #100	; 0x64
 80058e6:	f001 fe49 	bl	800757c <__match>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f43f aed5 	beq.w	800569a <_strtod_l+0xba>
 80058f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b28      	cmp	r3, #40	; 0x28
 80058f6:	d12c      	bne.n	8005952 <_strtod_l+0x372>
 80058f8:	4998      	ldr	r1, [pc, #608]	; (8005b5c <_strtod_l+0x57c>)
 80058fa:	aa1c      	add	r2, sp, #112	; 0x70
 80058fc:	a819      	add	r0, sp, #100	; 0x64
 80058fe:	f001 fe51 	bl	80075a4 <__hexnan>
 8005902:	2805      	cmp	r0, #5
 8005904:	d125      	bne.n	8005952 <_strtod_l+0x372>
 8005906:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005908:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800590c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005910:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005914:	e6a5      	b.n	8005662 <_strtod_l+0x82>
 8005916:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800591a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800591e:	e7bc      	b.n	800589a <_strtod_l+0x2ba>
 8005920:	2a6e      	cmp	r2, #110	; 0x6e
 8005922:	e7dc      	b.n	80058de <_strtod_l+0x2fe>
 8005924:	498e      	ldr	r1, [pc, #568]	; (8005b60 <_strtod_l+0x580>)
 8005926:	a819      	add	r0, sp, #100	; 0x64
 8005928:	f001 fe28 	bl	800757c <__match>
 800592c:	2800      	cmp	r0, #0
 800592e:	f43f aeb4 	beq.w	800569a <_strtod_l+0xba>
 8005932:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005934:	498b      	ldr	r1, [pc, #556]	; (8005b64 <_strtod_l+0x584>)
 8005936:	3b01      	subs	r3, #1
 8005938:	a819      	add	r0, sp, #100	; 0x64
 800593a:	9319      	str	r3, [sp, #100]	; 0x64
 800593c:	f001 fe1e 	bl	800757c <__match>
 8005940:	b910      	cbnz	r0, 8005948 <_strtod_l+0x368>
 8005942:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005944:	3301      	adds	r3, #1
 8005946:	9319      	str	r3, [sp, #100]	; 0x64
 8005948:	f04f 0800 	mov.w	r8, #0
 800594c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005b68 <_strtod_l+0x588>
 8005950:	e687      	b.n	8005662 <_strtod_l+0x82>
 8005952:	4886      	ldr	r0, [pc, #536]	; (8005b6c <_strtod_l+0x58c>)
 8005954:	f002 ff58 	bl	8008808 <nan>
 8005958:	4680      	mov	r8, r0
 800595a:	4689      	mov	r9, r1
 800595c:	e681      	b.n	8005662 <_strtod_l+0x82>
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	f1bb 0f00 	cmp.w	fp, #0
 8005964:	bf08      	it	eq
 8005966:	46a3      	moveq	fp, r4
 8005968:	1aeb      	subs	r3, r5, r3
 800596a:	2c10      	cmp	r4, #16
 800596c:	9806      	ldr	r0, [sp, #24]
 800596e:	4626      	mov	r6, r4
 8005970:	9307      	str	r3, [sp, #28]
 8005972:	bfa8      	it	ge
 8005974:	2610      	movge	r6, #16
 8005976:	f7fa fd35 	bl	80003e4 <__aeabi_ui2d>
 800597a:	2c09      	cmp	r4, #9
 800597c:	4680      	mov	r8, r0
 800597e:	4689      	mov	r9, r1
 8005980:	dd13      	ble.n	80059aa <_strtod_l+0x3ca>
 8005982:	4b7b      	ldr	r3, [pc, #492]	; (8005b70 <_strtod_l+0x590>)
 8005984:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005988:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800598c:	f7fa fda4 	bl	80004d8 <__aeabi_dmul>
 8005990:	4680      	mov	r8, r0
 8005992:	9805      	ldr	r0, [sp, #20]
 8005994:	4689      	mov	r9, r1
 8005996:	f7fa fd25 	bl	80003e4 <__aeabi_ui2d>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fbe3 	bl	800016c <__adddf3>
 80059a6:	4680      	mov	r8, r0
 80059a8:	4689      	mov	r9, r1
 80059aa:	2c0f      	cmp	r4, #15
 80059ac:	dc36      	bgt.n	8005a1c <_strtod_l+0x43c>
 80059ae:	9b07      	ldr	r3, [sp, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f43f ae56 	beq.w	8005662 <_strtod_l+0x82>
 80059b6:	dd22      	ble.n	80059fe <_strtod_l+0x41e>
 80059b8:	2b16      	cmp	r3, #22
 80059ba:	dc09      	bgt.n	80059d0 <_strtod_l+0x3f0>
 80059bc:	496c      	ldr	r1, [pc, #432]	; (8005b70 <_strtod_l+0x590>)
 80059be:	4642      	mov	r2, r8
 80059c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059c4:	464b      	mov	r3, r9
 80059c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ca:	f7fa fd85 	bl	80004d8 <__aeabi_dmul>
 80059ce:	e7c3      	b.n	8005958 <_strtod_l+0x378>
 80059d0:	9a07      	ldr	r2, [sp, #28]
 80059d2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80059d6:	4293      	cmp	r3, r2
 80059d8:	db20      	blt.n	8005a1c <_strtod_l+0x43c>
 80059da:	4d65      	ldr	r5, [pc, #404]	; (8005b70 <_strtod_l+0x590>)
 80059dc:	f1c4 040f 	rsb	r4, r4, #15
 80059e0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80059e4:	4642      	mov	r2, r8
 80059e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ea:	464b      	mov	r3, r9
 80059ec:	f7fa fd74 	bl	80004d8 <__aeabi_dmul>
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	1b1c      	subs	r4, r3, r4
 80059f4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80059f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059fc:	e7e5      	b.n	80059ca <_strtod_l+0x3ea>
 80059fe:	9b07      	ldr	r3, [sp, #28]
 8005a00:	3316      	adds	r3, #22
 8005a02:	db0b      	blt.n	8005a1c <_strtod_l+0x43c>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	4640      	mov	r0, r8
 8005a08:	1b5d      	subs	r5, r3, r5
 8005a0a:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <_strtod_l+0x590>)
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005a12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a16:	f7fa fe89 	bl	800072c <__aeabi_ddiv>
 8005a1a:	e79d      	b.n	8005958 <_strtod_l+0x378>
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	1ba6      	subs	r6, r4, r6
 8005a20:	441e      	add	r6, r3
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	dd74      	ble.n	8005b10 <_strtod_l+0x530>
 8005a26:	f016 030f 	ands.w	r3, r6, #15
 8005a2a:	d00a      	beq.n	8005a42 <_strtod_l+0x462>
 8005a2c:	4950      	ldr	r1, [pc, #320]	; (8005b70 <_strtod_l+0x590>)
 8005a2e:	4642      	mov	r2, r8
 8005a30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a38:	464b      	mov	r3, r9
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	4680      	mov	r8, r0
 8005a40:	4689      	mov	r9, r1
 8005a42:	f036 060f 	bics.w	r6, r6, #15
 8005a46:	d052      	beq.n	8005aee <_strtod_l+0x50e>
 8005a48:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005a4c:	dd27      	ble.n	8005a9e <_strtod_l+0x4be>
 8005a4e:	f04f 0b00 	mov.w	fp, #0
 8005a52:	f8cd b010 	str.w	fp, [sp, #16]
 8005a56:	f8cd b020 	str.w	fp, [sp, #32]
 8005a5a:	f8cd b018 	str.w	fp, [sp, #24]
 8005a5e:	2322      	movs	r3, #34	; 0x22
 8005a60:	f04f 0800 	mov.w	r8, #0
 8005a64:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005b68 <_strtod_l+0x588>
 8005a68:	f8ca 3000 	str.w	r3, [sl]
 8005a6c:	9b08      	ldr	r3, [sp, #32]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f43f adf7 	beq.w	8005662 <_strtod_l+0x82>
 8005a74:	4650      	mov	r0, sl
 8005a76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a78:	f001 feaa 	bl	80077d0 <_Bfree>
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	9906      	ldr	r1, [sp, #24]
 8005a80:	f001 fea6 	bl	80077d0 <_Bfree>
 8005a84:	4650      	mov	r0, sl
 8005a86:	9904      	ldr	r1, [sp, #16]
 8005a88:	f001 fea2 	bl	80077d0 <_Bfree>
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	9908      	ldr	r1, [sp, #32]
 8005a90:	f001 fe9e 	bl	80077d0 <_Bfree>
 8005a94:	4659      	mov	r1, fp
 8005a96:	4650      	mov	r0, sl
 8005a98:	f001 fe9a 	bl	80077d0 <_Bfree>
 8005a9c:	e5e1      	b.n	8005662 <_strtod_l+0x82>
 8005a9e:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <_strtod_l+0x594>)
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	461f      	mov	r7, r3
 8005aaa:	1136      	asrs	r6, r6, #4
 8005aac:	2e01      	cmp	r6, #1
 8005aae:	dc21      	bgt.n	8005af4 <_strtod_l+0x514>
 8005ab0:	b10b      	cbz	r3, 8005ab6 <_strtod_l+0x4d6>
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	4689      	mov	r9, r1
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <_strtod_l+0x594>)
 8005ab8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005abc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	f7fa fd06 	bl	80004d8 <__aeabi_dmul>
 8005acc:	4b26      	ldr	r3, [pc, #152]	; (8005b68 <_strtod_l+0x588>)
 8005ace:	460a      	mov	r2, r1
 8005ad0:	400b      	ands	r3, r1
 8005ad2:	4929      	ldr	r1, [pc, #164]	; (8005b78 <_strtod_l+0x598>)
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	428b      	cmp	r3, r1
 8005ad8:	d8b9      	bhi.n	8005a4e <_strtod_l+0x46e>
 8005ada:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ade:	428b      	cmp	r3, r1
 8005ae0:	bf86      	itte	hi
 8005ae2:	f04f 38ff 	movhi.w	r8, #4294967295
 8005ae6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005b7c <_strtod_l+0x59c>
 8005aea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005aee:	2300      	movs	r3, #0
 8005af0:	9305      	str	r3, [sp, #20]
 8005af2:	e07f      	b.n	8005bf4 <_strtod_l+0x614>
 8005af4:	07f2      	lsls	r2, r6, #31
 8005af6:	d505      	bpl.n	8005b04 <_strtod_l+0x524>
 8005af8:	9b05      	ldr	r3, [sp, #20]
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f7fa fceb 	bl	80004d8 <__aeabi_dmul>
 8005b02:	2301      	movs	r3, #1
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	3701      	adds	r7, #1
 8005b08:	3208      	adds	r2, #8
 8005b0a:	1076      	asrs	r6, r6, #1
 8005b0c:	9205      	str	r2, [sp, #20]
 8005b0e:	e7cd      	b.n	8005aac <_strtod_l+0x4cc>
 8005b10:	d0ed      	beq.n	8005aee <_strtod_l+0x50e>
 8005b12:	4276      	negs	r6, r6
 8005b14:	f016 020f 	ands.w	r2, r6, #15
 8005b18:	d00a      	beq.n	8005b30 <_strtod_l+0x550>
 8005b1a:	4b15      	ldr	r3, [pc, #84]	; (8005b70 <_strtod_l+0x590>)
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b22:	4649      	mov	r1, r9
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fe00 	bl	800072c <__aeabi_ddiv>
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4689      	mov	r9, r1
 8005b30:	1136      	asrs	r6, r6, #4
 8005b32:	d0dc      	beq.n	8005aee <_strtod_l+0x50e>
 8005b34:	2e1f      	cmp	r6, #31
 8005b36:	dd23      	ble.n	8005b80 <_strtod_l+0x5a0>
 8005b38:	f04f 0b00 	mov.w	fp, #0
 8005b3c:	f8cd b010 	str.w	fp, [sp, #16]
 8005b40:	f8cd b020 	str.w	fp, [sp, #32]
 8005b44:	f8cd b018 	str.w	fp, [sp, #24]
 8005b48:	2322      	movs	r3, #34	; 0x22
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	f8ca 3000 	str.w	r3, [sl]
 8005b56:	e789      	b.n	8005a6c <_strtod_l+0x48c>
 8005b58:	08009131 	.word	0x08009131
 8005b5c:	080091e4 	.word	0x080091e4
 8005b60:	08009129 	.word	0x08009129
 8005b64:	08009360 	.word	0x08009360
 8005b68:	7ff00000 	.word	0x7ff00000
 8005b6c:	0800925b 	.word	0x0800925b
 8005b70:	080094d8 	.word	0x080094d8
 8005b74:	080094b0 	.word	0x080094b0
 8005b78:	7ca00000 	.word	0x7ca00000
 8005b7c:	7fefffff 	.word	0x7fefffff
 8005b80:	f016 0310 	ands.w	r3, r6, #16
 8005b84:	bf18      	it	ne
 8005b86:	236a      	movne	r3, #106	; 0x6a
 8005b88:	4640      	mov	r0, r8
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4fb0      	ldr	r7, [pc, #704]	; (8005e54 <_strtod_l+0x874>)
 8005b92:	07f2      	lsls	r2, r6, #31
 8005b94:	d504      	bpl.n	8005ba0 <_strtod_l+0x5c0>
 8005b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9a:	f7fa fc9d 	bl	80004d8 <__aeabi_dmul>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	1076      	asrs	r6, r6, #1
 8005ba2:	f107 0708 	add.w	r7, r7, #8
 8005ba6:	d1f4      	bne.n	8005b92 <_strtod_l+0x5b2>
 8005ba8:	b10b      	cbz	r3, 8005bae <_strtod_l+0x5ce>
 8005baa:	4680      	mov	r8, r0
 8005bac:	4689      	mov	r9, r1
 8005bae:	9b05      	ldr	r3, [sp, #20]
 8005bb0:	b1c3      	cbz	r3, 8005be4 <_strtod_l+0x604>
 8005bb2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005bb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	dd11      	ble.n	8005be4 <_strtod_l+0x604>
 8005bc0:	2b1f      	cmp	r3, #31
 8005bc2:	f340 8127 	ble.w	8005e14 <_strtod_l+0x834>
 8005bc6:	2b34      	cmp	r3, #52	; 0x34
 8005bc8:	bfd8      	it	le
 8005bca:	f04f 33ff 	movle.w	r3, #4294967295
 8005bce:	f04f 0800 	mov.w	r8, #0
 8005bd2:	bfcf      	iteee	gt
 8005bd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005bd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005bdc:	fa03 f202 	lslle.w	r2, r3, r2
 8005be0:	ea02 0901 	andle.w	r9, r2, r1
 8005be4:	2200      	movs	r2, #0
 8005be6:	2300      	movs	r3, #0
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1a1      	bne.n	8005b38 <_strtod_l+0x558>
 8005bf4:	9b06      	ldr	r3, [sp, #24]
 8005bf6:	465a      	mov	r2, fp
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	4623      	mov	r3, r4
 8005bfe:	9908      	ldr	r1, [sp, #32]
 8005c00:	f001 fe4e 	bl	80078a0 <__s2b>
 8005c04:	9008      	str	r0, [sp, #32]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f43f af21 	beq.w	8005a4e <_strtod_l+0x46e>
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	f04f 0b00 	mov.w	fp, #0
 8005c12:	1b5d      	subs	r5, r3, r5
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	f8cd b010 	str.w	fp, [sp, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfb4      	ite	lt
 8005c1e:	462b      	movlt	r3, r5
 8005c20:	2300      	movge	r3, #0
 8005c22:	930e      	str	r3, [sp, #56]	; 0x38
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c2a:	9314      	str	r3, [sp, #80]	; 0x50
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	4650      	mov	r0, sl
 8005c30:	6859      	ldr	r1, [r3, #4]
 8005c32:	f001 fd8d 	bl	8007750 <_Balloc>
 8005c36:	9006      	str	r0, [sp, #24]
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f43f af10 	beq.w	8005a5e <_strtod_l+0x47e>
 8005c3e:	9b08      	ldr	r3, [sp, #32]
 8005c40:	300c      	adds	r0, #12
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	f103 010c 	add.w	r1, r3, #12
 8005c48:	3202      	adds	r2, #2
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	f001 fd72 	bl	8007734 <memcpy>
 8005c50:	ab1c      	add	r3, sp, #112	; 0x70
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	ab1b      	add	r3, sp, #108	; 0x6c
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005c62:	f002 f95f 	bl	8007f24 <__d2b>
 8005c66:	901a      	str	r0, [sp, #104]	; 0x68
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f43f aef8 	beq.w	8005a5e <_strtod_l+0x47e>
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4650      	mov	r0, sl
 8005c72:	f001 fead 	bl	80079d0 <__i2b>
 8005c76:	4603      	mov	r3, r0
 8005c78:	9004      	str	r0, [sp, #16]
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f43f aeef 	beq.w	8005a5e <_strtod_l+0x47e>
 8005c80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005c82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	bfab      	itete	ge
 8005c88:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005c8a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005c8c:	18ee      	addge	r6, r5, r3
 8005c8e:	1b5c      	sublt	r4, r3, r5
 8005c90:	9b05      	ldr	r3, [sp, #20]
 8005c92:	bfa8      	it	ge
 8005c94:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005c96:	eba5 0503 	sub.w	r5, r5, r3
 8005c9a:	4415      	add	r5, r2
 8005c9c:	4b6e      	ldr	r3, [pc, #440]	; (8005e58 <_strtod_l+0x878>)
 8005c9e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005ca2:	bfb8      	it	lt
 8005ca4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005ca6:	429d      	cmp	r5, r3
 8005ca8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005cac:	f280 80c4 	bge.w	8005e38 <_strtod_l+0x858>
 8005cb0:	1b5b      	subs	r3, r3, r5
 8005cb2:	2b1f      	cmp	r3, #31
 8005cb4:	f04f 0701 	mov.w	r7, #1
 8005cb8:	eba2 0203 	sub.w	r2, r2, r3
 8005cbc:	f300 80b1 	bgt.w	8005e22 <_strtod_l+0x842>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	fa07 f303 	lsl.w	r3, r7, r3
 8005cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cc8:	18b7      	adds	r7, r6, r2
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	42be      	cmp	r6, r7
 8005cce:	4414      	add	r4, r2
 8005cd0:	441c      	add	r4, r3
 8005cd2:	4633      	mov	r3, r6
 8005cd4:	bfa8      	it	ge
 8005cd6:	463b      	movge	r3, r7
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	bfa8      	it	ge
 8005cdc:	4623      	movge	r3, r4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfc2      	ittt	gt
 8005ce2:	1aff      	subgt	r7, r7, r3
 8005ce4:	1ae4      	subgt	r4, r4, r3
 8005ce6:	1af6      	subgt	r6, r6, r3
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dd17      	ble.n	8005d1e <_strtod_l+0x73e>
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	9904      	ldr	r1, [sp, #16]
 8005cf4:	f001 ff2a 	bl	8007b4c <__pow5mult>
 8005cf8:	9004      	str	r0, [sp, #16]
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f43f aeaf 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d00:	4601      	mov	r1, r0
 8005d02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d04:	4650      	mov	r0, sl
 8005d06:	f001 fe79 	bl	80079fc <__multiply>
 8005d0a:	9009      	str	r0, [sp, #36]	; 0x24
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f43f aea6 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d12:	4650      	mov	r0, sl
 8005d14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005d16:	f001 fd5b 	bl	80077d0 <_Bfree>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	f300 808e 	bgt.w	8005e40 <_strtod_l+0x860>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd08      	ble.n	8005d3c <_strtod_l+0x75c>
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d2e:	9906      	ldr	r1, [sp, #24]
 8005d30:	f001 ff0c 	bl	8007b4c <__pow5mult>
 8005d34:	9006      	str	r0, [sp, #24]
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f43f ae91 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d3c:	2c00      	cmp	r4, #0
 8005d3e:	dd08      	ble.n	8005d52 <_strtod_l+0x772>
 8005d40:	4622      	mov	r2, r4
 8005d42:	4650      	mov	r0, sl
 8005d44:	9906      	ldr	r1, [sp, #24]
 8005d46:	f001 ff5b 	bl	8007c00 <__lshift>
 8005d4a:	9006      	str	r0, [sp, #24]
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f43f ae86 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	dd08      	ble.n	8005d68 <_strtod_l+0x788>
 8005d56:	4632      	mov	r2, r6
 8005d58:	4650      	mov	r0, sl
 8005d5a:	9904      	ldr	r1, [sp, #16]
 8005d5c:	f001 ff50 	bl	8007c00 <__lshift>
 8005d60:	9004      	str	r0, [sp, #16]
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f43f ae7b 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d68:	4650      	mov	r0, sl
 8005d6a:	9a06      	ldr	r2, [sp, #24]
 8005d6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005d6e:	f001 ffd3 	bl	8007d18 <__mdiff>
 8005d72:	4683      	mov	fp, r0
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f43f ae72 	beq.w	8005a5e <_strtod_l+0x47e>
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	68c3      	ldr	r3, [r0, #12]
 8005d7e:	9904      	ldr	r1, [sp, #16]
 8005d80:	60c4      	str	r4, [r0, #12]
 8005d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d84:	f001 ffac 	bl	8007ce0 <__mcmp>
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	da6b      	bge.n	8005e64 <_strtod_l+0x884>
 8005d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8e:	ea53 0308 	orrs.w	r3, r3, r8
 8005d92:	f040 8091 	bne.w	8005eb8 <_strtod_l+0x8d8>
 8005d96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 808c 	bne.w	8005eb8 <_strtod_l+0x8d8>
 8005da0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005da4:	0d1b      	lsrs	r3, r3, #20
 8005da6:	051b      	lsls	r3, r3, #20
 8005da8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005dac:	f240 8084 	bls.w	8005eb8 <_strtod_l+0x8d8>
 8005db0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005db4:	b91b      	cbnz	r3, 8005dbe <_strtod_l+0x7de>
 8005db6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	dd7c      	ble.n	8005eb8 <_strtod_l+0x8d8>
 8005dbe:	4659      	mov	r1, fp
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	f001 ff1c 	bl	8007c00 <__lshift>
 8005dc8:	9904      	ldr	r1, [sp, #16]
 8005dca:	4683      	mov	fp, r0
 8005dcc:	f001 ff88 	bl	8007ce0 <__mcmp>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	dd71      	ble.n	8005eb8 <_strtod_l+0x8d8>
 8005dd4:	9905      	ldr	r1, [sp, #20]
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <_strtod_l+0x87c>)
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	f000 808c 	beq.w	8005ef8 <_strtod_l+0x918>
 8005de0:	ea02 0109 	and.w	r1, r2, r9
 8005de4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005de8:	f300 8086 	bgt.w	8005ef8 <_strtod_l+0x918>
 8005dec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005df0:	f77f aeaa 	ble.w	8005b48 <_strtod_l+0x568>
 8005df4:	4640      	mov	r0, r8
 8005df6:	4649      	mov	r1, r9
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <_strtod_l+0x880>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f7fa fb6c 	bl	80004d8 <__aeabi_dmul>
 8005e00:	460b      	mov	r3, r1
 8005e02:	4303      	orrs	r3, r0
 8005e04:	bf08      	it	eq
 8005e06:	2322      	moveq	r3, #34	; 0x22
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	bf08      	it	eq
 8005e0e:	f8ca 3000 	streq.w	r3, [sl]
 8005e12:	e62f      	b.n	8005a74 <_strtod_l+0x494>
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	ea03 0808 	and.w	r8, r3, r8
 8005e20:	e6e0      	b.n	8005be4 <_strtod_l+0x604>
 8005e22:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005e26:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005e2a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005e2e:	35e2      	adds	r5, #226	; 0xe2
 8005e30:	fa07 f505 	lsl.w	r5, r7, r5
 8005e34:	970f      	str	r7, [sp, #60]	; 0x3c
 8005e36:	e747      	b.n	8005cc8 <_strtod_l+0x6e8>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e3e:	e743      	b.n	8005cc8 <_strtod_l+0x6e8>
 8005e40:	463a      	mov	r2, r7
 8005e42:	4650      	mov	r0, sl
 8005e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e46:	f001 fedb 	bl	8007c00 <__lshift>
 8005e4a:	901a      	str	r0, [sp, #104]	; 0x68
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f47f af69 	bne.w	8005d24 <_strtod_l+0x744>
 8005e52:	e604      	b.n	8005a5e <_strtod_l+0x47e>
 8005e54:	080091f8 	.word	0x080091f8
 8005e58:	fffffc02 	.word	0xfffffc02
 8005e5c:	7ff00000 	.word	0x7ff00000
 8005e60:	39500000 	.word	0x39500000
 8005e64:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005e68:	d165      	bne.n	8005f36 <_strtod_l+0x956>
 8005e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e70:	b35a      	cbz	r2, 8005eca <_strtod_l+0x8ea>
 8005e72:	4a99      	ldr	r2, [pc, #612]	; (80060d8 <_strtod_l+0xaf8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d12b      	bne.n	8005ed0 <_strtod_l+0x8f0>
 8005e78:	9b05      	ldr	r3, [sp, #20]
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	b303      	cbz	r3, 8005ec0 <_strtod_l+0x8e0>
 8005e7e:	464a      	mov	r2, r9
 8005e80:	4b96      	ldr	r3, [pc, #600]	; (80060dc <_strtod_l+0xafc>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	d81b      	bhi.n	8005ec6 <_strtod_l+0x8e6>
 8005e8e:	0d1b      	lsrs	r3, r3, #20
 8005e90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	d119      	bne.n	8005ed0 <_strtod_l+0x8f0>
 8005e9c:	4b90      	ldr	r3, [pc, #576]	; (80060e0 <_strtod_l+0xb00>)
 8005e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d102      	bne.n	8005eaa <_strtod_l+0x8ca>
 8005ea4:	3101      	adds	r1, #1
 8005ea6:	f43f adda 	beq.w	8005a5e <_strtod_l+0x47e>
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <_strtod_l+0xafc>)
 8005eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005eb8:	9b05      	ldr	r3, [sp, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d19a      	bne.n	8005df4 <_strtod_l+0x814>
 8005ebe:	e5d9      	b.n	8005a74 <_strtod_l+0x494>
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	e7e8      	b.n	8005e98 <_strtod_l+0x8b8>
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	e7e6      	b.n	8005e98 <_strtod_l+0x8b8>
 8005eca:	ea53 0308 	orrs.w	r3, r3, r8
 8005ece:	d081      	beq.n	8005dd4 <_strtod_l+0x7f4>
 8005ed0:	b1e5      	cbz	r5, 8005f0c <_strtod_l+0x92c>
 8005ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed4:	421d      	tst	r5, r3
 8005ed6:	d0ef      	beq.n	8005eb8 <_strtod_l+0x8d8>
 8005ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	9a05      	ldr	r2, [sp, #20]
 8005ee0:	b1c3      	cbz	r3, 8005f14 <_strtod_l+0x934>
 8005ee2:	f7ff fb5b 	bl	800559c <sulp>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eee:	f7fa f93d 	bl	800016c <__adddf3>
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	4689      	mov	r9, r1
 8005ef6:	e7df      	b.n	8005eb8 <_strtod_l+0x8d8>
 8005ef8:	4013      	ands	r3, r2
 8005efa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005efe:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005f02:	f04f 38ff 	mov.w	r8, #4294967295
 8005f06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005f0a:	e7d5      	b.n	8005eb8 <_strtod_l+0x8d8>
 8005f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f0e:	ea13 0f08 	tst.w	r3, r8
 8005f12:	e7e0      	b.n	8005ed6 <_strtod_l+0x8f6>
 8005f14:	f7ff fb42 	bl	800559c <sulp>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f20:	f7fa f922 	bl	8000168 <__aeabi_dsub>
 8005f24:	2200      	movs	r2, #0
 8005f26:	2300      	movs	r3, #0
 8005f28:	4680      	mov	r8, r0
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	f7fa fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0c1      	beq.n	8005eb8 <_strtod_l+0x8d8>
 8005f34:	e608      	b.n	8005b48 <_strtod_l+0x568>
 8005f36:	4658      	mov	r0, fp
 8005f38:	9904      	ldr	r1, [sp, #16]
 8005f3a:	f002 f84f 	bl	8007fdc <__ratio>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	f7fa fd42 	bl	80009d0 <__aeabi_dcmple>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d070      	beq.n	8006032 <_strtod_l+0xa52>
 8005f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d042      	beq.n	8005fdc <_strtod_l+0x9fc>
 8005f56:	2600      	movs	r6, #0
 8005f58:	4f62      	ldr	r7, [pc, #392]	; (80060e4 <_strtod_l+0xb04>)
 8005f5a:	4d62      	ldr	r5, [pc, #392]	; (80060e4 <_strtod_l+0xb04>)
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f62:	0d1b      	lsrs	r3, r3, #20
 8005f64:	051b      	lsls	r3, r3, #20
 8005f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <_strtod_l+0xb08>)
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	f040 80c3 	bne.w	80060f8 <_strtod_l+0xb18>
 8005f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f74:	4640      	mov	r0, r8
 8005f76:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f001 ff58 	bl	8007e30 <__ulp>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f7fa faa6 	bl	80004d8 <__aeabi_dmul>
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	f7fa f8ec 	bl	800016c <__adddf3>
 8005f94:	460b      	mov	r3, r1
 8005f96:	4951      	ldr	r1, [pc, #324]	; (80060dc <_strtod_l+0xafc>)
 8005f98:	4a54      	ldr	r2, [pc, #336]	; (80060ec <_strtod_l+0xb0c>)
 8005f9a:	4019      	ands	r1, r3
 8005f9c:	4291      	cmp	r1, r2
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	d95d      	bls.n	800605e <_strtod_l+0xa7e>
 8005fa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fa4:	4b4e      	ldr	r3, [pc, #312]	; (80060e0 <_strtod_l+0xb00>)
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d103      	bne.n	8005fb2 <_strtod_l+0x9d2>
 8005faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fac:	3301      	adds	r3, #1
 8005fae:	f43f ad56 	beq.w	8005a5e <_strtod_l+0x47e>
 8005fb2:	f04f 38ff 	mov.w	r8, #4294967295
 8005fb6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80060e0 <_strtod_l+0xb00>
 8005fba:	4650      	mov	r0, sl
 8005fbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005fbe:	f001 fc07 	bl	80077d0 <_Bfree>
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	9906      	ldr	r1, [sp, #24]
 8005fc6:	f001 fc03 	bl	80077d0 <_Bfree>
 8005fca:	4650      	mov	r0, sl
 8005fcc:	9904      	ldr	r1, [sp, #16]
 8005fce:	f001 fbff 	bl	80077d0 <_Bfree>
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	f001 fbfb 	bl	80077d0 <_Bfree>
 8005fda:	e627      	b.n	8005c2c <_strtod_l+0x64c>
 8005fdc:	f1b8 0f00 	cmp.w	r8, #0
 8005fe0:	d119      	bne.n	8006016 <_strtod_l+0xa36>
 8005fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fe8:	b9e3      	cbnz	r3, 8006024 <_strtod_l+0xa44>
 8005fea:	2200      	movs	r2, #0
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4b3c      	ldr	r3, [pc, #240]	; (80060e4 <_strtod_l+0xb04>)
 8005ff2:	f7fa fce3 	bl	80009bc <__aeabi_dcmplt>
 8005ff6:	b9c8      	cbnz	r0, 800602c <_strtod_l+0xa4c>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4b3c      	ldr	r3, [pc, #240]	; (80060f0 <_strtod_l+0xb10>)
 8006000:	f7fa fa6a 	bl	80004d8 <__aeabi_dmul>
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800600c:	9416      	str	r4, [sp, #88]	; 0x58
 800600e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006010:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006014:	e7a2      	b.n	8005f5c <_strtod_l+0x97c>
 8006016:	f1b8 0f01 	cmp.w	r8, #1
 800601a:	d103      	bne.n	8006024 <_strtod_l+0xa44>
 800601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	f43f ad92 	beq.w	8005b48 <_strtod_l+0x568>
 8006024:	2600      	movs	r6, #0
 8006026:	2400      	movs	r4, #0
 8006028:	4f32      	ldr	r7, [pc, #200]	; (80060f4 <_strtod_l+0xb14>)
 800602a:	e796      	b.n	8005f5a <_strtod_l+0x97a>
 800602c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800602e:	4d30      	ldr	r5, [pc, #192]	; (80060f0 <_strtod_l+0xb10>)
 8006030:	e7ea      	b.n	8006008 <_strtod_l+0xa28>
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <_strtod_l+0xb10>)
 8006034:	2200      	movs	r2, #0
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa fa4d 	bl	80004d8 <__aeabi_dmul>
 800603e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	b933      	cbnz	r3, 8006054 <_strtod_l+0xa74>
 8006046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800604a:	9010      	str	r0, [sp, #64]	; 0x40
 800604c:	9311      	str	r3, [sp, #68]	; 0x44
 800604e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006052:	e783      	b.n	8005f5c <_strtod_l+0x97c>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800605c:	e7f7      	b.n	800604e <_strtod_l+0xa6e>
 800605e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1a8      	bne.n	8005fba <_strtod_l+0x9da>
 8006068:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800606c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800606e:	0d1b      	lsrs	r3, r3, #20
 8006070:	051b      	lsls	r3, r3, #20
 8006072:	429a      	cmp	r2, r3
 8006074:	d1a1      	bne.n	8005fba <_strtod_l+0x9da>
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fd75 	bl	8000b68 <__aeabi_d2lz>
 800607e:	f7fa f9fd 	bl	800047c <__aeabi_l2d>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	f7fa f86d 	bl	8000168 <__aeabi_dsub>
 800608e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006094:	ea43 0308 	orr.w	r3, r3, r8
 8006098:	4313      	orrs	r3, r2
 800609a:	4604      	mov	r4, r0
 800609c:	460d      	mov	r5, r1
 800609e:	d066      	beq.n	800616e <_strtod_l+0xb8e>
 80060a0:	a309      	add	r3, pc, #36	; (adr r3, 80060c8 <_strtod_l+0xae8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa fc89 	bl	80009bc <__aeabi_dcmplt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f47f ace2 	bne.w	8005a74 <_strtod_l+0x494>
 80060b0:	a307      	add	r3, pc, #28	; (adr r3, 80060d0 <_strtod_l+0xaf0>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f43f af7b 	beq.w	8005fba <_strtod_l+0x9da>
 80060c4:	e4d6      	b.n	8005a74 <_strtod_l+0x494>
 80060c6:	bf00      	nop
 80060c8:	94a03595 	.word	0x94a03595
 80060cc:	3fdfffff 	.word	0x3fdfffff
 80060d0:	35afe535 	.word	0x35afe535
 80060d4:	3fe00000 	.word	0x3fe00000
 80060d8:	000fffff 	.word	0x000fffff
 80060dc:	7ff00000 	.word	0x7ff00000
 80060e0:	7fefffff 	.word	0x7fefffff
 80060e4:	3ff00000 	.word	0x3ff00000
 80060e8:	7fe00000 	.word	0x7fe00000
 80060ec:	7c9fffff 	.word	0x7c9fffff
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	bff00000 	.word	0xbff00000
 80060f8:	9b05      	ldr	r3, [sp, #20]
 80060fa:	b313      	cbz	r3, 8006142 <_strtod_l+0xb62>
 80060fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006102:	d81e      	bhi.n	8006142 <_strtod_l+0xb62>
 8006104:	a326      	add	r3, pc, #152	; (adr r3, 80061a0 <_strtod_l+0xbc0>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa fc5f 	bl	80009d0 <__aeabi_dcmple>
 8006112:	b190      	cbz	r0, 800613a <_strtod_l+0xb5a>
 8006114:	4629      	mov	r1, r5
 8006116:	4620      	mov	r0, r4
 8006118:	f7fa fcb6 	bl	8000a88 <__aeabi_d2uiz>
 800611c:	2801      	cmp	r0, #1
 800611e:	bf38      	it	cc
 8006120:	2001      	movcc	r0, #1
 8006122:	f7fa f95f 	bl	80003e4 <__aeabi_ui2d>
 8006126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	b9d3      	cbnz	r3, 8006164 <_strtod_l+0xb84>
 800612e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006132:	9012      	str	r0, [sp, #72]	; 0x48
 8006134:	9313      	str	r3, [sp, #76]	; 0x4c
 8006136:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800613a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800613c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006140:	1a9f      	subs	r7, r3, r2
 8006142:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006146:	f001 fe73 	bl	8007e30 <__ulp>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa f9c1 	bl	80004d8 <__aeabi_dmul>
 8006156:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800615a:	f7fa f807 	bl	800016c <__adddf3>
 800615e:	4680      	mov	r8, r0
 8006160:	4689      	mov	r9, r1
 8006162:	e77e      	b.n	8006062 <_strtod_l+0xa82>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800616c:	e7e3      	b.n	8006136 <_strtod_l+0xb56>
 800616e:	a30e      	add	r3, pc, #56	; (adr r3, 80061a8 <_strtod_l+0xbc8>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa fc22 	bl	80009bc <__aeabi_dcmplt>
 8006178:	e7a1      	b.n	80060be <_strtod_l+0xade>
 800617a:	2300      	movs	r3, #0
 800617c:	930a      	str	r3, [sp, #40]	; 0x28
 800617e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006180:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	f7ff ba71 	b.w	800566a <_strtod_l+0x8a>
 8006188:	2a65      	cmp	r2, #101	; 0x65
 800618a:	f43f ab63 	beq.w	8005854 <_strtod_l+0x274>
 800618e:	2a45      	cmp	r2, #69	; 0x45
 8006190:	f43f ab60 	beq.w	8005854 <_strtod_l+0x274>
 8006194:	2301      	movs	r3, #1
 8006196:	f7ff bb95 	b.w	80058c4 <_strtod_l+0x2e4>
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w
 80061a0:	ffc00000 	.word	0xffc00000
 80061a4:	41dfffff 	.word	0x41dfffff
 80061a8:	94a03595 	.word	0x94a03595
 80061ac:	3fcfffff 	.word	0x3fcfffff

080061b0 <_strtod_r>:
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <_strtod_r+0x8>)
 80061b2:	f7ff ba15 	b.w	80055e0 <_strtod_l>
 80061b6:	bf00      	nop
 80061b8:	20000078 	.word	0x20000078

080061bc <_strtol_l.constprop.0>:
 80061bc:	2b01      	cmp	r3, #1
 80061be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c2:	4680      	mov	r8, r0
 80061c4:	d001      	beq.n	80061ca <_strtol_l.constprop.0+0xe>
 80061c6:	2b24      	cmp	r3, #36	; 0x24
 80061c8:	d906      	bls.n	80061d8 <_strtol_l.constprop.0+0x1c>
 80061ca:	f7fe fae5 	bl	8004798 <__errno>
 80061ce:	2316      	movs	r3, #22
 80061d0:	6003      	str	r3, [r0, #0]
 80061d2:	2000      	movs	r0, #0
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	460d      	mov	r5, r1
 80061da:	4f35      	ldr	r7, [pc, #212]	; (80062b0 <_strtol_l.constprop.0+0xf4>)
 80061dc:	4628      	mov	r0, r5
 80061de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061e2:	5de6      	ldrb	r6, [r4, r7]
 80061e4:	f016 0608 	ands.w	r6, r6, #8
 80061e8:	d1f8      	bne.n	80061dc <_strtol_l.constprop.0+0x20>
 80061ea:	2c2d      	cmp	r4, #45	; 0x2d
 80061ec:	d12f      	bne.n	800624e <_strtol_l.constprop.0+0x92>
 80061ee:	2601      	movs	r6, #1
 80061f0:	782c      	ldrb	r4, [r5, #0]
 80061f2:	1c85      	adds	r5, r0, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d057      	beq.n	80062a8 <_strtol_l.constprop.0+0xec>
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d109      	bne.n	8006210 <_strtol_l.constprop.0+0x54>
 80061fc:	2c30      	cmp	r4, #48	; 0x30
 80061fe:	d107      	bne.n	8006210 <_strtol_l.constprop.0+0x54>
 8006200:	7828      	ldrb	r0, [r5, #0]
 8006202:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006206:	2858      	cmp	r0, #88	; 0x58
 8006208:	d149      	bne.n	800629e <_strtol_l.constprop.0+0xe2>
 800620a:	2310      	movs	r3, #16
 800620c:	786c      	ldrb	r4, [r5, #1]
 800620e:	3502      	adds	r5, #2
 8006210:	2700      	movs	r7, #0
 8006212:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006216:	f10e 3eff 	add.w	lr, lr, #4294967295
 800621a:	fbbe f9f3 	udiv	r9, lr, r3
 800621e:	4638      	mov	r0, r7
 8006220:	fb03 ea19 	mls	sl, r3, r9, lr
 8006224:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006228:	f1bc 0f09 	cmp.w	ip, #9
 800622c:	d814      	bhi.n	8006258 <_strtol_l.constprop.0+0x9c>
 800622e:	4664      	mov	r4, ip
 8006230:	42a3      	cmp	r3, r4
 8006232:	dd22      	ble.n	800627a <_strtol_l.constprop.0+0xbe>
 8006234:	2f00      	cmp	r7, #0
 8006236:	db1d      	blt.n	8006274 <_strtol_l.constprop.0+0xb8>
 8006238:	4581      	cmp	r9, r0
 800623a:	d31b      	bcc.n	8006274 <_strtol_l.constprop.0+0xb8>
 800623c:	d101      	bne.n	8006242 <_strtol_l.constprop.0+0x86>
 800623e:	45a2      	cmp	sl, r4
 8006240:	db18      	blt.n	8006274 <_strtol_l.constprop.0+0xb8>
 8006242:	2701      	movs	r7, #1
 8006244:	fb00 4003 	mla	r0, r0, r3, r4
 8006248:	f815 4b01 	ldrb.w	r4, [r5], #1
 800624c:	e7ea      	b.n	8006224 <_strtol_l.constprop.0+0x68>
 800624e:	2c2b      	cmp	r4, #43	; 0x2b
 8006250:	bf04      	itt	eq
 8006252:	782c      	ldrbeq	r4, [r5, #0]
 8006254:	1c85      	addeq	r5, r0, #2
 8006256:	e7cd      	b.n	80061f4 <_strtol_l.constprop.0+0x38>
 8006258:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800625c:	f1bc 0f19 	cmp.w	ip, #25
 8006260:	d801      	bhi.n	8006266 <_strtol_l.constprop.0+0xaa>
 8006262:	3c37      	subs	r4, #55	; 0x37
 8006264:	e7e4      	b.n	8006230 <_strtol_l.constprop.0+0x74>
 8006266:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800626a:	f1bc 0f19 	cmp.w	ip, #25
 800626e:	d804      	bhi.n	800627a <_strtol_l.constprop.0+0xbe>
 8006270:	3c57      	subs	r4, #87	; 0x57
 8006272:	e7dd      	b.n	8006230 <_strtol_l.constprop.0+0x74>
 8006274:	f04f 37ff 	mov.w	r7, #4294967295
 8006278:	e7e6      	b.n	8006248 <_strtol_l.constprop.0+0x8c>
 800627a:	2f00      	cmp	r7, #0
 800627c:	da07      	bge.n	800628e <_strtol_l.constprop.0+0xd2>
 800627e:	2322      	movs	r3, #34	; 0x22
 8006280:	4670      	mov	r0, lr
 8006282:	f8c8 3000 	str.w	r3, [r8]
 8006286:	2a00      	cmp	r2, #0
 8006288:	d0a4      	beq.n	80061d4 <_strtol_l.constprop.0+0x18>
 800628a:	1e69      	subs	r1, r5, #1
 800628c:	e005      	b.n	800629a <_strtol_l.constprop.0+0xde>
 800628e:	b106      	cbz	r6, 8006292 <_strtol_l.constprop.0+0xd6>
 8006290:	4240      	negs	r0, r0
 8006292:	2a00      	cmp	r2, #0
 8006294:	d09e      	beq.n	80061d4 <_strtol_l.constprop.0+0x18>
 8006296:	2f00      	cmp	r7, #0
 8006298:	d1f7      	bne.n	800628a <_strtol_l.constprop.0+0xce>
 800629a:	6011      	str	r1, [r2, #0]
 800629c:	e79a      	b.n	80061d4 <_strtol_l.constprop.0+0x18>
 800629e:	2430      	movs	r4, #48	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1b5      	bne.n	8006210 <_strtol_l.constprop.0+0x54>
 80062a4:	2308      	movs	r3, #8
 80062a6:	e7b3      	b.n	8006210 <_strtol_l.constprop.0+0x54>
 80062a8:	2c30      	cmp	r4, #48	; 0x30
 80062aa:	d0a9      	beq.n	8006200 <_strtol_l.constprop.0+0x44>
 80062ac:	230a      	movs	r3, #10
 80062ae:	e7af      	b.n	8006210 <_strtol_l.constprop.0+0x54>
 80062b0:	0800925d 	.word	0x0800925d

080062b4 <_strtol_r>:
 80062b4:	f7ff bf82 	b.w	80061bc <_strtol_l.constprop.0>

080062b8 <__assert_func>:
 80062b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ba:	4614      	mov	r4, r2
 80062bc:	461a      	mov	r2, r3
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <__assert_func+0x2c>)
 80062c0:	4605      	mov	r5, r0
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68d8      	ldr	r0, [r3, #12]
 80062c6:	b14c      	cbz	r4, 80062dc <__assert_func+0x24>
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <__assert_func+0x30>)
 80062ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062ce:	9100      	str	r1, [sp, #0]
 80062d0:	462b      	mov	r3, r5
 80062d2:	4906      	ldr	r1, [pc, #24]	; (80062ec <__assert_func+0x34>)
 80062d4:	f000 fe8a 	bl	8006fec <fiprintf>
 80062d8:	f002 fb8e 	bl	80089f8 <abort>
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <__assert_func+0x38>)
 80062de:	461c      	mov	r4, r3
 80062e0:	e7f3      	b.n	80062ca <__assert_func+0x12>
 80062e2:	bf00      	nop
 80062e4:	20000010 	.word	0x20000010
 80062e8:	08009220 	.word	0x08009220
 80062ec:	0800922d 	.word	0x0800922d
 80062f0:	0800925b 	.word	0x0800925b

080062f4 <quorem>:
 80062f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	6903      	ldr	r3, [r0, #16]
 80062fa:	690c      	ldr	r4, [r1, #16]
 80062fc:	4607      	mov	r7, r0
 80062fe:	42a3      	cmp	r3, r4
 8006300:	f2c0 8082 	blt.w	8006408 <quorem+0x114>
 8006304:	3c01      	subs	r4, #1
 8006306:	f100 0514 	add.w	r5, r0, #20
 800630a:	f101 0814 	add.w	r8, r1, #20
 800630e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800631c:	3301      	adds	r3, #1
 800631e:	429a      	cmp	r2, r3
 8006320:	fbb2 f6f3 	udiv	r6, r2, r3
 8006324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800632c:	d331      	bcc.n	8006392 <quorem+0x9e>
 800632e:	f04f 0e00 	mov.w	lr, #0
 8006332:	4640      	mov	r0, r8
 8006334:	46ac      	mov	ip, r5
 8006336:	46f2      	mov	sl, lr
 8006338:	f850 2b04 	ldr.w	r2, [r0], #4
 800633c:	b293      	uxth	r3, r2
 800633e:	fb06 e303 	mla	r3, r6, r3, lr
 8006342:	0c12      	lsrs	r2, r2, #16
 8006344:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006348:	b29b      	uxth	r3, r3
 800634a:	fb06 e202 	mla	r2, r6, r2, lr
 800634e:	ebaa 0303 	sub.w	r3, sl, r3
 8006352:	f8dc a000 	ldr.w	sl, [ip]
 8006356:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800635a:	fa1f fa8a 	uxth.w	sl, sl
 800635e:	4453      	add	r3, sl
 8006360:	f8dc a000 	ldr.w	sl, [ip]
 8006364:	b292      	uxth	r2, r2
 8006366:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800636a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006374:	4581      	cmp	r9, r0
 8006376:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800637a:	f84c 3b04 	str.w	r3, [ip], #4
 800637e:	d2db      	bcs.n	8006338 <quorem+0x44>
 8006380:	f855 300b 	ldr.w	r3, [r5, fp]
 8006384:	b92b      	cbnz	r3, 8006392 <quorem+0x9e>
 8006386:	9b01      	ldr	r3, [sp, #4]
 8006388:	3b04      	subs	r3, #4
 800638a:	429d      	cmp	r5, r3
 800638c:	461a      	mov	r2, r3
 800638e:	d32f      	bcc.n	80063f0 <quorem+0xfc>
 8006390:	613c      	str	r4, [r7, #16]
 8006392:	4638      	mov	r0, r7
 8006394:	f001 fca4 	bl	8007ce0 <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	db25      	blt.n	80063e8 <quorem+0xf4>
 800639c:	4628      	mov	r0, r5
 800639e:	f04f 0c00 	mov.w	ip, #0
 80063a2:	3601      	adds	r6, #1
 80063a4:	f858 1b04 	ldr.w	r1, [r8], #4
 80063a8:	f8d0 e000 	ldr.w	lr, [r0]
 80063ac:	b28b      	uxth	r3, r1
 80063ae:	ebac 0303 	sub.w	r3, ip, r3
 80063b2:	fa1f f28e 	uxth.w	r2, lr
 80063b6:	4413      	add	r3, r2
 80063b8:	0c0a      	lsrs	r2, r1, #16
 80063ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063c8:	45c1      	cmp	r9, r8
 80063ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063ce:	f840 3b04 	str.w	r3, [r0], #4
 80063d2:	d2e7      	bcs.n	80063a4 <quorem+0xb0>
 80063d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063dc:	b922      	cbnz	r2, 80063e8 <quorem+0xf4>
 80063de:	3b04      	subs	r3, #4
 80063e0:	429d      	cmp	r5, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	d30a      	bcc.n	80063fc <quorem+0x108>
 80063e6:	613c      	str	r4, [r7, #16]
 80063e8:	4630      	mov	r0, r6
 80063ea:	b003      	add	sp, #12
 80063ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	3b04      	subs	r3, #4
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	d1cb      	bne.n	8006390 <quorem+0x9c>
 80063f8:	3c01      	subs	r4, #1
 80063fa:	e7c6      	b.n	800638a <quorem+0x96>
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	3b04      	subs	r3, #4
 8006400:	2a00      	cmp	r2, #0
 8006402:	d1f0      	bne.n	80063e6 <quorem+0xf2>
 8006404:	3c01      	subs	r4, #1
 8006406:	e7eb      	b.n	80063e0 <quorem+0xec>
 8006408:	2000      	movs	r0, #0
 800640a:	e7ee      	b.n	80063ea <quorem+0xf6>
 800640c:	0000      	movs	r0, r0
	...

08006410 <_dtoa_r>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	4616      	mov	r6, r2
 8006416:	461f      	mov	r7, r3
 8006418:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800641a:	b099      	sub	sp, #100	; 0x64
 800641c:	4605      	mov	r5, r0
 800641e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006422:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006426:	b974      	cbnz	r4, 8006446 <_dtoa_r+0x36>
 8006428:	2010      	movs	r0, #16
 800642a:	f001 f95b 	bl	80076e4 <malloc>
 800642e:	4602      	mov	r2, r0
 8006430:	6268      	str	r0, [r5, #36]	; 0x24
 8006432:	b920      	cbnz	r0, 800643e <_dtoa_r+0x2e>
 8006434:	21ea      	movs	r1, #234	; 0xea
 8006436:	4ba8      	ldr	r3, [pc, #672]	; (80066d8 <_dtoa_r+0x2c8>)
 8006438:	48a8      	ldr	r0, [pc, #672]	; (80066dc <_dtoa_r+0x2cc>)
 800643a:	f7ff ff3d 	bl	80062b8 <__assert_func>
 800643e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006442:	6004      	str	r4, [r0, #0]
 8006444:	60c4      	str	r4, [r0, #12]
 8006446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	b151      	cbz	r1, 8006462 <_dtoa_r+0x52>
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	2301      	movs	r3, #1
 8006450:	4093      	lsls	r3, r2
 8006452:	604a      	str	r2, [r1, #4]
 8006454:	608b      	str	r3, [r1, #8]
 8006456:	4628      	mov	r0, r5
 8006458:	f001 f9ba 	bl	80077d0 <_Bfree>
 800645c:	2200      	movs	r2, #0
 800645e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	1e3b      	subs	r3, r7, #0
 8006464:	bfaf      	iteee	ge
 8006466:	2300      	movge	r3, #0
 8006468:	2201      	movlt	r2, #1
 800646a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800646e:	9305      	strlt	r3, [sp, #20]
 8006470:	bfa8      	it	ge
 8006472:	f8c8 3000 	strge.w	r3, [r8]
 8006476:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800647a:	4b99      	ldr	r3, [pc, #612]	; (80066e0 <_dtoa_r+0x2d0>)
 800647c:	bfb8      	it	lt
 800647e:	f8c8 2000 	strlt.w	r2, [r8]
 8006482:	ea33 0309 	bics.w	r3, r3, r9
 8006486:	d119      	bne.n	80064bc <_dtoa_r+0xac>
 8006488:	f242 730f 	movw	r3, #9999	; 0x270f
 800648c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006494:	4333      	orrs	r3, r6
 8006496:	f000 857f 	beq.w	8006f98 <_dtoa_r+0xb88>
 800649a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800649c:	b953      	cbnz	r3, 80064b4 <_dtoa_r+0xa4>
 800649e:	4b91      	ldr	r3, [pc, #580]	; (80066e4 <_dtoa_r+0x2d4>)
 80064a0:	e022      	b.n	80064e8 <_dtoa_r+0xd8>
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <_dtoa_r+0x2d8>)
 80064a4:	9303      	str	r3, [sp, #12]
 80064a6:	3308      	adds	r3, #8
 80064a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	9803      	ldr	r0, [sp, #12]
 80064ae:	b019      	add	sp, #100	; 0x64
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	4b8b      	ldr	r3, [pc, #556]	; (80066e4 <_dtoa_r+0x2d4>)
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	3303      	adds	r3, #3
 80064ba:	e7f5      	b.n	80064a8 <_dtoa_r+0x98>
 80064bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80064c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064c8:	2200      	movs	r2, #0
 80064ca:	2300      	movs	r3, #0
 80064cc:	f7fa fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80064d0:	4680      	mov	r8, r0
 80064d2:	b158      	cbz	r0, 80064ec <_dtoa_r+0xdc>
 80064d4:	2301      	movs	r3, #1
 80064d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8558 	beq.w	8006f92 <_dtoa_r+0xb82>
 80064e2:	4882      	ldr	r0, [pc, #520]	; (80066ec <_dtoa_r+0x2dc>)
 80064e4:	6018      	str	r0, [r3, #0]
 80064e6:	1e43      	subs	r3, r0, #1
 80064e8:	9303      	str	r3, [sp, #12]
 80064ea:	e7df      	b.n	80064ac <_dtoa_r+0x9c>
 80064ec:	ab16      	add	r3, sp, #88	; 0x58
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	ab17      	add	r3, sp, #92	; 0x5c
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	4628      	mov	r0, r5
 80064f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064fa:	f001 fd13 	bl	8007f24 <__d2b>
 80064fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006502:	4683      	mov	fp, r0
 8006504:	2c00      	cmp	r4, #0
 8006506:	d07f      	beq.n	8006608 <_dtoa_r+0x1f8>
 8006508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800650c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800650e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006516:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800651a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800651e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006522:	2200      	movs	r2, #0
 8006524:	4b72      	ldr	r3, [pc, #456]	; (80066f0 <_dtoa_r+0x2e0>)
 8006526:	f7f9 fe1f 	bl	8000168 <__aeabi_dsub>
 800652a:	a365      	add	r3, pc, #404	; (adr r3, 80066c0 <_dtoa_r+0x2b0>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7f9 ffd2 	bl	80004d8 <__aeabi_dmul>
 8006534:	a364      	add	r3, pc, #400	; (adr r3, 80066c8 <_dtoa_r+0x2b8>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fe17 	bl	800016c <__adddf3>
 800653e:	4606      	mov	r6, r0
 8006540:	4620      	mov	r0, r4
 8006542:	460f      	mov	r7, r1
 8006544:	f7f9 ff5e 	bl	8000404 <__aeabi_i2d>
 8006548:	a361      	add	r3, pc, #388	; (adr r3, 80066d0 <_dtoa_r+0x2c0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 ffc3 	bl	80004d8 <__aeabi_dmul>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4630      	mov	r0, r6
 8006558:	4639      	mov	r1, r7
 800655a:	f7f9 fe07 	bl	800016c <__adddf3>
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	f7fa fa69 	bl	8000a38 <__aeabi_d2iz>
 8006566:	2200      	movs	r2, #0
 8006568:	4682      	mov	sl, r0
 800656a:	2300      	movs	r3, #0
 800656c:	4630      	mov	r0, r6
 800656e:	4639      	mov	r1, r7
 8006570:	f7fa fa24 	bl	80009bc <__aeabi_dcmplt>
 8006574:	b148      	cbz	r0, 800658a <_dtoa_r+0x17a>
 8006576:	4650      	mov	r0, sl
 8006578:	f7f9 ff44 	bl	8000404 <__aeabi_i2d>
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	f7fa fa12 	bl	80009a8 <__aeabi_dcmpeq>
 8006584:	b908      	cbnz	r0, 800658a <_dtoa_r+0x17a>
 8006586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800658a:	f1ba 0f16 	cmp.w	sl, #22
 800658e:	d858      	bhi.n	8006642 <_dtoa_r+0x232>
 8006590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006594:	4b57      	ldr	r3, [pc, #348]	; (80066f4 <_dtoa_r+0x2e4>)
 8006596:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7fa fa0d 	bl	80009bc <__aeabi_dcmplt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d04f      	beq.n	8006646 <_dtoa_r+0x236>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065b0:	1b1c      	subs	r4, r3, r4
 80065b2:	1e63      	subs	r3, r4, #1
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	bf49      	itett	mi
 80065b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80065bc:	2300      	movpl	r3, #0
 80065be:	9306      	strmi	r3, [sp, #24]
 80065c0:	2300      	movmi	r3, #0
 80065c2:	bf54      	ite	pl
 80065c4:	9306      	strpl	r3, [sp, #24]
 80065c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80065c8:	f1ba 0f00 	cmp.w	sl, #0
 80065cc:	db3d      	blt.n	800664a <_dtoa_r+0x23a>
 80065ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80065d4:	4453      	add	r3, sl
 80065d6:	9309      	str	r3, [sp, #36]	; 0x24
 80065d8:	2300      	movs	r3, #0
 80065da:	930a      	str	r3, [sp, #40]	; 0x28
 80065dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065de:	2b09      	cmp	r3, #9
 80065e0:	f200 808c 	bhi.w	80066fc <_dtoa_r+0x2ec>
 80065e4:	2b05      	cmp	r3, #5
 80065e6:	bfc4      	itt	gt
 80065e8:	3b04      	subgt	r3, #4
 80065ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80065ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ee:	bfc8      	it	gt
 80065f0:	2400      	movgt	r4, #0
 80065f2:	f1a3 0302 	sub.w	r3, r3, #2
 80065f6:	bfd8      	it	le
 80065f8:	2401      	movle	r4, #1
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	f200 808a 	bhi.w	8006714 <_dtoa_r+0x304>
 8006600:	e8df f003 	tbb	[pc, r3]
 8006604:	5b4d4f2d 	.word	0x5b4d4f2d
 8006608:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800660c:	441c      	add	r4, r3
 800660e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006612:	2b20      	cmp	r3, #32
 8006614:	bfc3      	ittte	gt
 8006616:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800661a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800661e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006622:	f1c3 0320 	rsble	r3, r3, #32
 8006626:	bfc6      	itte	gt
 8006628:	fa26 f000 	lsrgt.w	r0, r6, r0
 800662c:	4318      	orrgt	r0, r3
 800662e:	fa06 f003 	lslle.w	r0, r6, r3
 8006632:	f7f9 fed7 	bl	80003e4 <__aeabi_ui2d>
 8006636:	2301      	movs	r3, #1
 8006638:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800663c:	3c01      	subs	r4, #1
 800663e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006640:	e76f      	b.n	8006522 <_dtoa_r+0x112>
 8006642:	2301      	movs	r3, #1
 8006644:	e7b2      	b.n	80065ac <_dtoa_r+0x19c>
 8006646:	900f      	str	r0, [sp, #60]	; 0x3c
 8006648:	e7b1      	b.n	80065ae <_dtoa_r+0x19e>
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	eba3 030a 	sub.w	r3, r3, sl
 8006650:	9306      	str	r3, [sp, #24]
 8006652:	f1ca 0300 	rsb	r3, sl, #0
 8006656:	930a      	str	r3, [sp, #40]	; 0x28
 8006658:	2300      	movs	r3, #0
 800665a:	930e      	str	r3, [sp, #56]	; 0x38
 800665c:	e7be      	b.n	80065dc <_dtoa_r+0x1cc>
 800665e:	2300      	movs	r3, #0
 8006660:	930b      	str	r3, [sp, #44]	; 0x2c
 8006662:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006664:	2b00      	cmp	r3, #0
 8006666:	dc58      	bgt.n	800671a <_dtoa_r+0x30a>
 8006668:	f04f 0901 	mov.w	r9, #1
 800666c:	464b      	mov	r3, r9
 800666e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006672:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006676:	2200      	movs	r2, #0
 8006678:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800667a:	6042      	str	r2, [r0, #4]
 800667c:	2204      	movs	r2, #4
 800667e:	f102 0614 	add.w	r6, r2, #20
 8006682:	429e      	cmp	r6, r3
 8006684:	6841      	ldr	r1, [r0, #4]
 8006686:	d94e      	bls.n	8006726 <_dtoa_r+0x316>
 8006688:	4628      	mov	r0, r5
 800668a:	f001 f861 	bl	8007750 <_Balloc>
 800668e:	9003      	str	r0, [sp, #12]
 8006690:	2800      	cmp	r0, #0
 8006692:	d14c      	bne.n	800672e <_dtoa_r+0x31e>
 8006694:	4602      	mov	r2, r0
 8006696:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800669a:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <_dtoa_r+0x2e8>)
 800669c:	e6cc      	b.n	8006438 <_dtoa_r+0x28>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7de      	b.n	8006660 <_dtoa_r+0x250>
 80066a2:	2300      	movs	r3, #0
 80066a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066a8:	eb0a 0903 	add.w	r9, sl, r3
 80066ac:	f109 0301 	add.w	r3, r9, #1
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	9308      	str	r3, [sp, #32]
 80066b4:	bfb8      	it	lt
 80066b6:	2301      	movlt	r3, #1
 80066b8:	e7dd      	b.n	8006676 <_dtoa_r+0x266>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e7f2      	b.n	80066a4 <_dtoa_r+0x294>
 80066be:	bf00      	nop
 80066c0:	636f4361 	.word	0x636f4361
 80066c4:	3fd287a7 	.word	0x3fd287a7
 80066c8:	8b60c8b3 	.word	0x8b60c8b3
 80066cc:	3fc68a28 	.word	0x3fc68a28
 80066d0:	509f79fb 	.word	0x509f79fb
 80066d4:	3fd34413 	.word	0x3fd34413
 80066d8:	0800915d 	.word	0x0800915d
 80066dc:	0800936a 	.word	0x0800936a
 80066e0:	7ff00000 	.word	0x7ff00000
 80066e4:	08009366 	.word	0x08009366
 80066e8:	0800935d 	.word	0x0800935d
 80066ec:	08009135 	.word	0x08009135
 80066f0:	3ff80000 	.word	0x3ff80000
 80066f4:	080094d8 	.word	0x080094d8
 80066f8:	080093c5 	.word	0x080093c5
 80066fc:	2401      	movs	r4, #1
 80066fe:	2300      	movs	r3, #0
 8006700:	940b      	str	r4, [sp, #44]	; 0x2c
 8006702:	9322      	str	r3, [sp, #136]	; 0x88
 8006704:	f04f 39ff 	mov.w	r9, #4294967295
 8006708:	2200      	movs	r2, #0
 800670a:	2312      	movs	r3, #18
 800670c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006710:	9223      	str	r2, [sp, #140]	; 0x8c
 8006712:	e7b0      	b.n	8006676 <_dtoa_r+0x266>
 8006714:	2301      	movs	r3, #1
 8006716:	930b      	str	r3, [sp, #44]	; 0x2c
 8006718:	e7f4      	b.n	8006704 <_dtoa_r+0x2f4>
 800671a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800671e:	464b      	mov	r3, r9
 8006720:	f8cd 9020 	str.w	r9, [sp, #32]
 8006724:	e7a7      	b.n	8006676 <_dtoa_r+0x266>
 8006726:	3101      	adds	r1, #1
 8006728:	6041      	str	r1, [r0, #4]
 800672a:	0052      	lsls	r2, r2, #1
 800672c:	e7a7      	b.n	800667e <_dtoa_r+0x26e>
 800672e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006730:	9a03      	ldr	r2, [sp, #12]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	2b0e      	cmp	r3, #14
 8006738:	f200 80a8 	bhi.w	800688c <_dtoa_r+0x47c>
 800673c:	2c00      	cmp	r4, #0
 800673e:	f000 80a5 	beq.w	800688c <_dtoa_r+0x47c>
 8006742:	f1ba 0f00 	cmp.w	sl, #0
 8006746:	dd34      	ble.n	80067b2 <_dtoa_r+0x3a2>
 8006748:	4a9a      	ldr	r2, [pc, #616]	; (80069b4 <_dtoa_r+0x5a4>)
 800674a:	f00a 030f 	and.w	r3, sl, #15
 800674e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006752:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006756:	e9d3 3400 	ldrd	r3, r4, [r3]
 800675a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800675e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006762:	d016      	beq.n	8006792 <_dtoa_r+0x382>
 8006764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006768:	4b93      	ldr	r3, [pc, #588]	; (80069b8 <_dtoa_r+0x5a8>)
 800676a:	2703      	movs	r7, #3
 800676c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006770:	f7f9 ffdc 	bl	800072c <__aeabi_ddiv>
 8006774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006778:	f004 040f 	and.w	r4, r4, #15
 800677c:	4e8e      	ldr	r6, [pc, #568]	; (80069b8 <_dtoa_r+0x5a8>)
 800677e:	b954      	cbnz	r4, 8006796 <_dtoa_r+0x386>
 8006780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006788:	f7f9 ffd0 	bl	800072c <__aeabi_ddiv>
 800678c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006790:	e029      	b.n	80067e6 <_dtoa_r+0x3d6>
 8006792:	2702      	movs	r7, #2
 8006794:	e7f2      	b.n	800677c <_dtoa_r+0x36c>
 8006796:	07e1      	lsls	r1, r4, #31
 8006798:	d508      	bpl.n	80067ac <_dtoa_r+0x39c>
 800679a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800679e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067a2:	f7f9 fe99 	bl	80004d8 <__aeabi_dmul>
 80067a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067aa:	3701      	adds	r7, #1
 80067ac:	1064      	asrs	r4, r4, #1
 80067ae:	3608      	adds	r6, #8
 80067b0:	e7e5      	b.n	800677e <_dtoa_r+0x36e>
 80067b2:	f000 80a5 	beq.w	8006900 <_dtoa_r+0x4f0>
 80067b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067ba:	f1ca 0400 	rsb	r4, sl, #0
 80067be:	4b7d      	ldr	r3, [pc, #500]	; (80069b4 <_dtoa_r+0x5a4>)
 80067c0:	f004 020f 	and.w	r2, r4, #15
 80067c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f7f9 fe84 	bl	80004d8 <__aeabi_dmul>
 80067d0:	2702      	movs	r7, #2
 80067d2:	2300      	movs	r3, #0
 80067d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d8:	4e77      	ldr	r6, [pc, #476]	; (80069b8 <_dtoa_r+0x5a8>)
 80067da:	1124      	asrs	r4, r4, #4
 80067dc:	2c00      	cmp	r4, #0
 80067de:	f040 8084 	bne.w	80068ea <_dtoa_r+0x4da>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d2      	bne.n	800678c <_dtoa_r+0x37c>
 80067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 808b 	beq.w	8006904 <_dtoa_r+0x4f4>
 80067ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80067f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067fa:	2200      	movs	r2, #0
 80067fc:	4b6f      	ldr	r3, [pc, #444]	; (80069bc <_dtoa_r+0x5ac>)
 80067fe:	f7fa f8dd 	bl	80009bc <__aeabi_dcmplt>
 8006802:	2800      	cmp	r0, #0
 8006804:	d07e      	beq.n	8006904 <_dtoa_r+0x4f4>
 8006806:	9b08      	ldr	r3, [sp, #32]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d07b      	beq.n	8006904 <_dtoa_r+0x4f4>
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	dd38      	ble.n	8006884 <_dtoa_r+0x474>
 8006812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006816:	2200      	movs	r2, #0
 8006818:	4b69      	ldr	r3, [pc, #420]	; (80069c0 <_dtoa_r+0x5b0>)
 800681a:	f7f9 fe5d 	bl	80004d8 <__aeabi_dmul>
 800681e:	464c      	mov	r4, r9
 8006820:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006824:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006828:	3701      	adds	r7, #1
 800682a:	4638      	mov	r0, r7
 800682c:	f7f9 fdea 	bl	8000404 <__aeabi_i2d>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	f7f9 fe50 	bl	80004d8 <__aeabi_dmul>
 8006838:	2200      	movs	r2, #0
 800683a:	4b62      	ldr	r3, [pc, #392]	; (80069c4 <_dtoa_r+0x5b4>)
 800683c:	f7f9 fc96 	bl	800016c <__adddf3>
 8006840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006844:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006848:	9611      	str	r6, [sp, #68]	; 0x44
 800684a:	2c00      	cmp	r4, #0
 800684c:	d15d      	bne.n	800690a <_dtoa_r+0x4fa>
 800684e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006852:	2200      	movs	r2, #0
 8006854:	4b5c      	ldr	r3, [pc, #368]	; (80069c8 <_dtoa_r+0x5b8>)
 8006856:	f7f9 fc87 	bl	8000168 <__aeabi_dsub>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006862:	4633      	mov	r3, r6
 8006864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006866:	f7fa f8c7 	bl	80009f8 <__aeabi_dcmpgt>
 800686a:	2800      	cmp	r0, #0
 800686c:	f040 829c 	bne.w	8006da8 <_dtoa_r+0x998>
 8006870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006876:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800687a:	f7fa f89f 	bl	80009bc <__aeabi_dcmplt>
 800687e:	2800      	cmp	r0, #0
 8006880:	f040 8290 	bne.w	8006da4 <_dtoa_r+0x994>
 8006884:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006888:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800688c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800688e:	2b00      	cmp	r3, #0
 8006890:	f2c0 8152 	blt.w	8006b38 <_dtoa_r+0x728>
 8006894:	f1ba 0f0e 	cmp.w	sl, #14
 8006898:	f300 814e 	bgt.w	8006b38 <_dtoa_r+0x728>
 800689c:	4b45      	ldr	r3, [pc, #276]	; (80069b4 <_dtoa_r+0x5a4>)
 800689e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f280 80db 	bge.w	8006a68 <_dtoa_r+0x658>
 80068b2:	9b08      	ldr	r3, [sp, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f300 80d7 	bgt.w	8006a68 <_dtoa_r+0x658>
 80068ba:	f040 8272 	bne.w	8006da2 <_dtoa_r+0x992>
 80068be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c2:	2200      	movs	r2, #0
 80068c4:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <_dtoa_r+0x5b8>)
 80068c6:	f7f9 fe07 	bl	80004d8 <__aeabi_dmul>
 80068ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ce:	f7fa f889 	bl	80009e4 <__aeabi_dcmpge>
 80068d2:	9c08      	ldr	r4, [sp, #32]
 80068d4:	4626      	mov	r6, r4
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8248 	bne.w	8006d6c <_dtoa_r+0x95c>
 80068dc:	2331      	movs	r3, #49	; 0x31
 80068de:	9f03      	ldr	r7, [sp, #12]
 80068e0:	f10a 0a01 	add.w	sl, sl, #1
 80068e4:	f807 3b01 	strb.w	r3, [r7], #1
 80068e8:	e244      	b.n	8006d74 <_dtoa_r+0x964>
 80068ea:	07e2      	lsls	r2, r4, #31
 80068ec:	d505      	bpl.n	80068fa <_dtoa_r+0x4ea>
 80068ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068f2:	f7f9 fdf1 	bl	80004d8 <__aeabi_dmul>
 80068f6:	2301      	movs	r3, #1
 80068f8:	3701      	adds	r7, #1
 80068fa:	1064      	asrs	r4, r4, #1
 80068fc:	3608      	adds	r6, #8
 80068fe:	e76d      	b.n	80067dc <_dtoa_r+0x3cc>
 8006900:	2702      	movs	r7, #2
 8006902:	e770      	b.n	80067e6 <_dtoa_r+0x3d6>
 8006904:	46d0      	mov	r8, sl
 8006906:	9c08      	ldr	r4, [sp, #32]
 8006908:	e78f      	b.n	800682a <_dtoa_r+0x41a>
 800690a:	9903      	ldr	r1, [sp, #12]
 800690c:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <_dtoa_r+0x5a4>)
 800690e:	4421      	add	r1, r4
 8006910:	9112      	str	r1, [sp, #72]	; 0x48
 8006912:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006914:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006918:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800691c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006920:	2900      	cmp	r1, #0
 8006922:	d055      	beq.n	80069d0 <_dtoa_r+0x5c0>
 8006924:	2000      	movs	r0, #0
 8006926:	4929      	ldr	r1, [pc, #164]	; (80069cc <_dtoa_r+0x5bc>)
 8006928:	f7f9 ff00 	bl	800072c <__aeabi_ddiv>
 800692c:	463b      	mov	r3, r7
 800692e:	4632      	mov	r2, r6
 8006930:	f7f9 fc1a 	bl	8000168 <__aeabi_dsub>
 8006934:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006938:	9f03      	ldr	r7, [sp, #12]
 800693a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800693e:	f7fa f87b 	bl	8000a38 <__aeabi_d2iz>
 8006942:	4604      	mov	r4, r0
 8006944:	f7f9 fd5e 	bl	8000404 <__aeabi_i2d>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006950:	f7f9 fc0a 	bl	8000168 <__aeabi_dsub>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	3430      	adds	r4, #48	; 0x30
 800695a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800695e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006962:	f807 4b01 	strb.w	r4, [r7], #1
 8006966:	f7fa f829 	bl	80009bc <__aeabi_dcmplt>
 800696a:	2800      	cmp	r0, #0
 800696c:	d174      	bne.n	8006a58 <_dtoa_r+0x648>
 800696e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006972:	2000      	movs	r0, #0
 8006974:	4911      	ldr	r1, [pc, #68]	; (80069bc <_dtoa_r+0x5ac>)
 8006976:	f7f9 fbf7 	bl	8000168 <__aeabi_dsub>
 800697a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800697e:	f7fa f81d 	bl	80009bc <__aeabi_dcmplt>
 8006982:	2800      	cmp	r0, #0
 8006984:	f040 80b7 	bne.w	8006af6 <_dtoa_r+0x6e6>
 8006988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800698a:	429f      	cmp	r7, r3
 800698c:	f43f af7a 	beq.w	8006884 <_dtoa_r+0x474>
 8006990:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006994:	2200      	movs	r2, #0
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <_dtoa_r+0x5b0>)
 8006998:	f7f9 fd9e 	bl	80004d8 <__aeabi_dmul>
 800699c:	2200      	movs	r2, #0
 800699e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <_dtoa_r+0x5b0>)
 80069a8:	f7f9 fd96 	bl	80004d8 <__aeabi_dmul>
 80069ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069b0:	e7c3      	b.n	800693a <_dtoa_r+0x52a>
 80069b2:	bf00      	nop
 80069b4:	080094d8 	.word	0x080094d8
 80069b8:	080094b0 	.word	0x080094b0
 80069bc:	3ff00000 	.word	0x3ff00000
 80069c0:	40240000 	.word	0x40240000
 80069c4:	401c0000 	.word	0x401c0000
 80069c8:	40140000 	.word	0x40140000
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fd80 	bl	80004d8 <__aeabi_dmul>
 80069d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069de:	9c03      	ldr	r4, [sp, #12]
 80069e0:	9314      	str	r3, [sp, #80]	; 0x50
 80069e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e6:	f7fa f827 	bl	8000a38 <__aeabi_d2iz>
 80069ea:	9015      	str	r0, [sp, #84]	; 0x54
 80069ec:	f7f9 fd0a 	bl	8000404 <__aeabi_i2d>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f8:	f7f9 fbb6 	bl	8000168 <__aeabi_dsub>
 80069fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069fe:	4606      	mov	r6, r0
 8006a00:	3330      	adds	r3, #48	; 0x30
 8006a02:	f804 3b01 	strb.w	r3, [r4], #1
 8006a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a08:	460f      	mov	r7, r1
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	d124      	bne.n	8006a5c <_dtoa_r+0x64c>
 8006a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a16:	4bb0      	ldr	r3, [pc, #704]	; (8006cd8 <_dtoa_r+0x8c8>)
 8006a18:	f7f9 fba8 	bl	800016c <__adddf3>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7f9 ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d163      	bne.n	8006af4 <_dtoa_r+0x6e4>
 8006a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a30:	2000      	movs	r0, #0
 8006a32:	49a9      	ldr	r1, [pc, #676]	; (8006cd8 <_dtoa_r+0x8c8>)
 8006a34:	f7f9 fb98 	bl	8000168 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	4639      	mov	r1, r7
 8006a40:	f7f9 ffbc 	bl	80009bc <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f43f af1d 	beq.w	8006884 <_dtoa_r+0x474>
 8006a4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a4c:	1e7b      	subs	r3, r7, #1
 8006a4e:	9314      	str	r3, [sp, #80]	; 0x50
 8006a50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d0f8      	beq.n	8006a4a <_dtoa_r+0x63a>
 8006a58:	46c2      	mov	sl, r8
 8006a5a:	e03b      	b.n	8006ad4 <_dtoa_r+0x6c4>
 8006a5c:	4b9f      	ldr	r3, [pc, #636]	; (8006cdc <_dtoa_r+0x8cc>)
 8006a5e:	f7f9 fd3b 	bl	80004d8 <__aeabi_dmul>
 8006a62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a66:	e7bc      	b.n	80069e2 <_dtoa_r+0x5d2>
 8006a68:	9f03      	ldr	r7, [sp, #12]
 8006a6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006a6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a72:	4640      	mov	r0, r8
 8006a74:	4649      	mov	r1, r9
 8006a76:	f7f9 fe59 	bl	800072c <__aeabi_ddiv>
 8006a7a:	f7f9 ffdd 	bl	8000a38 <__aeabi_d2iz>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	f7f9 fcc0 	bl	8000404 <__aeabi_i2d>
 8006a84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4640      	mov	r0, r8
 8006a92:	4649      	mov	r1, r9
 8006a94:	f7f9 fb68 	bl	8000168 <__aeabi_dsub>
 8006a98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006a9c:	f807 6b01 	strb.w	r6, [r7], #1
 8006aa0:	9e03      	ldr	r6, [sp, #12]
 8006aa2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006aa6:	1bbe      	subs	r6, r7, r6
 8006aa8:	45b4      	cmp	ip, r6
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	d136      	bne.n	8006b1e <_dtoa_r+0x70e>
 8006ab0:	f7f9 fb5c 	bl	800016c <__adddf3>
 8006ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	f7f9 ff9c 	bl	80009f8 <__aeabi_dcmpgt>
 8006ac0:	bb58      	cbnz	r0, 8006b1a <_dtoa_r+0x70a>
 8006ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7f9 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8006ace:	b108      	cbz	r0, 8006ad4 <_dtoa_r+0x6c4>
 8006ad0:	07e1      	lsls	r1, r4, #31
 8006ad2:	d422      	bmi.n	8006b1a <_dtoa_r+0x70a>
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	f000 fe7a 	bl	80077d0 <_Bfree>
 8006adc:	2300      	movs	r3, #0
 8006ade:	703b      	strb	r3, [r7, #0]
 8006ae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ae2:	f10a 0001 	add.w	r0, sl, #1
 8006ae6:	6018      	str	r0, [r3, #0]
 8006ae8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f43f acde 	beq.w	80064ac <_dtoa_r+0x9c>
 8006af0:	601f      	str	r7, [r3, #0]
 8006af2:	e4db      	b.n	80064ac <_dtoa_r+0x9c>
 8006af4:	4627      	mov	r7, r4
 8006af6:	463b      	mov	r3, r7
 8006af8:	461f      	mov	r7, r3
 8006afa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afe:	2a39      	cmp	r2, #57	; 0x39
 8006b00:	d107      	bne.n	8006b12 <_dtoa_r+0x702>
 8006b02:	9a03      	ldr	r2, [sp, #12]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d1f7      	bne.n	8006af8 <_dtoa_r+0x6e8>
 8006b08:	2230      	movs	r2, #48	; 0x30
 8006b0a:	9903      	ldr	r1, [sp, #12]
 8006b0c:	f108 0801 	add.w	r8, r8, #1
 8006b10:	700a      	strb	r2, [r1, #0]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	3201      	adds	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e79e      	b.n	8006a58 <_dtoa_r+0x648>
 8006b1a:	46d0      	mov	r8, sl
 8006b1c:	e7eb      	b.n	8006af6 <_dtoa_r+0x6e6>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4b6e      	ldr	r3, [pc, #440]	; (8006cdc <_dtoa_r+0x8cc>)
 8006b22:	f7f9 fcd9 	bl	80004d8 <__aeabi_dmul>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	4689      	mov	r9, r1
 8006b2e:	f7f9 ff3b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d09b      	beq.n	8006a6e <_dtoa_r+0x65e>
 8006b36:	e7cd      	b.n	8006ad4 <_dtoa_r+0x6c4>
 8006b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	f000 80d0 	beq.w	8006ce0 <_dtoa_r+0x8d0>
 8006b40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	f300 80ae 	bgt.w	8006ca4 <_dtoa_r+0x894>
 8006b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	f000 80a6 	beq.w	8006c9c <_dtoa_r+0x88c>
 8006b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b56:	9f06      	ldr	r7, [sp, #24]
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	441a      	add	r2, r3
 8006b5e:	9206      	str	r2, [sp, #24]
 8006b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b62:	4628      	mov	r0, r5
 8006b64:	441a      	add	r2, r3
 8006b66:	9209      	str	r2, [sp, #36]	; 0x24
 8006b68:	f000 ff32 	bl	80079d0 <__i2b>
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	2f00      	cmp	r7, #0
 8006b70:	dd0c      	ble.n	8006b8c <_dtoa_r+0x77c>
 8006b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd09      	ble.n	8006b8c <_dtoa_r+0x77c>
 8006b78:	42bb      	cmp	r3, r7
 8006b7a:	bfa8      	it	ge
 8006b7c:	463b      	movge	r3, r7
 8006b7e:	9a06      	ldr	r2, [sp, #24]
 8006b80:	1aff      	subs	r7, r7, r3
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	9206      	str	r2, [sp, #24]
 8006b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	b1f3      	cbz	r3, 8006bce <_dtoa_r+0x7be>
 8006b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80a8 	beq.w	8006ce8 <_dtoa_r+0x8d8>
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	dd10      	ble.n	8006bbe <_dtoa_r+0x7ae>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 ffd3 	bl	8007b4c <__pow5mult>
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4606      	mov	r6, r0
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 ff25 	bl	80079fc <__multiply>
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fe0a 	bl	80077d0 <_Bfree>
 8006bbc:	46c3      	mov	fp, r8
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	1b1a      	subs	r2, r3, r4
 8006bc2:	d004      	beq.n	8006bce <_dtoa_r+0x7be>
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 ffc0 	bl	8007b4c <__pow5mult>
 8006bcc:	4683      	mov	fp, r0
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 fefd 	bl	80079d0 <__i2b>
 8006bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bd8:	4604      	mov	r4, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f340 8086 	ble.w	8006cec <_dtoa_r+0x8dc>
 8006be0:	461a      	mov	r2, r3
 8006be2:	4601      	mov	r1, r0
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 ffb1 	bl	8007b4c <__pow5mult>
 8006bea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bec:	4604      	mov	r4, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	dd7f      	ble.n	8006cf2 <_dtoa_r+0x8e2>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bfc:	6918      	ldr	r0, [r3, #16]
 8006bfe:	f000 fe99 	bl	8007934 <__hi0bits>
 8006c02:	f1c0 0020 	rsb	r0, r0, #32
 8006c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c08:	4418      	add	r0, r3
 8006c0a:	f010 001f 	ands.w	r0, r0, #31
 8006c0e:	f000 8092 	beq.w	8006d36 <_dtoa_r+0x926>
 8006c12:	f1c0 0320 	rsb	r3, r0, #32
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	f340 808a 	ble.w	8006d30 <_dtoa_r+0x920>
 8006c1c:	f1c0 001c 	rsb	r0, r0, #28
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	4407      	add	r7, r0
 8006c24:	4403      	add	r3, r0
 8006c26:	9306      	str	r3, [sp, #24]
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	4403      	add	r3, r0
 8006c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2e:	9b06      	ldr	r3, [sp, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dd05      	ble.n	8006c40 <_dtoa_r+0x830>
 8006c34:	4659      	mov	r1, fp
 8006c36:	461a      	mov	r2, r3
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 ffe1 	bl	8007c00 <__lshift>
 8006c3e:	4683      	mov	fp, r0
 8006c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dd05      	ble.n	8006c52 <_dtoa_r+0x842>
 8006c46:	4621      	mov	r1, r4
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 ffd8 	bl	8007c00 <__lshift>
 8006c50:	4604      	mov	r4, r0
 8006c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d070      	beq.n	8006d3a <_dtoa_r+0x92a>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4658      	mov	r0, fp
 8006c5c:	f001 f840 	bl	8007ce0 <__mcmp>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	da6a      	bge.n	8006d3a <_dtoa_r+0x92a>
 8006c64:	2300      	movs	r3, #0
 8006c66:	4659      	mov	r1, fp
 8006c68:	220a      	movs	r2, #10
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 fdd2 	bl	8007814 <__multadd>
 8006c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c72:	4683      	mov	fp, r0
 8006c74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8194 	beq.w	8006fa6 <_dtoa_r+0xb96>
 8006c7e:	4631      	mov	r1, r6
 8006c80:	2300      	movs	r3, #0
 8006c82:	220a      	movs	r2, #10
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 fdc5 	bl	8007814 <__multadd>
 8006c8a:	f1b9 0f00 	cmp.w	r9, #0
 8006c8e:	4606      	mov	r6, r0
 8006c90:	f300 8093 	bgt.w	8006dba <_dtoa_r+0x9aa>
 8006c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	dc57      	bgt.n	8006d4a <_dtoa_r+0x93a>
 8006c9a:	e08e      	b.n	8006dba <_dtoa_r+0x9aa>
 8006c9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ca2:	e757      	b.n	8006b54 <_dtoa_r+0x744>
 8006ca4:	9b08      	ldr	r3, [sp, #32]
 8006ca6:	1e5c      	subs	r4, r3, #1
 8006ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	bfb7      	itett	lt
 8006cae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cb0:	1b1c      	subge	r4, r3, r4
 8006cb2:	1ae2      	sublt	r2, r4, r3
 8006cb4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006cb6:	bfbe      	ittt	lt
 8006cb8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006cba:	189b      	addlt	r3, r3, r2
 8006cbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	bfb8      	it	lt
 8006cc2:	2400      	movlt	r4, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfbb      	ittet	lt
 8006cc8:	9b06      	ldrlt	r3, [sp, #24]
 8006cca:	9a08      	ldrlt	r2, [sp, #32]
 8006ccc:	9f06      	ldrge	r7, [sp, #24]
 8006cce:	1a9f      	sublt	r7, r3, r2
 8006cd0:	bfac      	ite	ge
 8006cd2:	9b08      	ldrge	r3, [sp, #32]
 8006cd4:	2300      	movlt	r3, #0
 8006cd6:	e73f      	b.n	8006b58 <_dtoa_r+0x748>
 8006cd8:	3fe00000 	.word	0x3fe00000
 8006cdc:	40240000 	.word	0x40240000
 8006ce0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ce2:	9f06      	ldr	r7, [sp, #24]
 8006ce4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ce6:	e742      	b.n	8006b6e <_dtoa_r+0x75e>
 8006ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cea:	e76b      	b.n	8006bc4 <_dtoa_r+0x7b4>
 8006cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	dc19      	bgt.n	8006d26 <_dtoa_r+0x916>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	b9bb      	cbnz	r3, 8006d26 <_dtoa_r+0x916>
 8006cf6:	9b05      	ldr	r3, [sp, #20]
 8006cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cfc:	b99b      	cbnz	r3, 8006d26 <_dtoa_r+0x916>
 8006cfe:	9b05      	ldr	r3, [sp, #20]
 8006d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d04:	0d1b      	lsrs	r3, r3, #20
 8006d06:	051b      	lsls	r3, r3, #20
 8006d08:	b183      	cbz	r3, 8006d2c <_dtoa_r+0x91c>
 8006d0a:	f04f 0801 	mov.w	r8, #1
 8006d0e:	9b06      	ldr	r3, [sp, #24]
 8006d10:	3301      	adds	r3, #1
 8006d12:	9306      	str	r3, [sp, #24]
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	3301      	adds	r3, #1
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f af6a 	bne.w	8006bf6 <_dtoa_r+0x7e6>
 8006d22:	2001      	movs	r0, #1
 8006d24:	e76f      	b.n	8006c06 <_dtoa_r+0x7f6>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	e7f6      	b.n	8006d1a <_dtoa_r+0x90a>
 8006d2c:	4698      	mov	r8, r3
 8006d2e:	e7f4      	b.n	8006d1a <_dtoa_r+0x90a>
 8006d30:	f43f af7d 	beq.w	8006c2e <_dtoa_r+0x81e>
 8006d34:	4618      	mov	r0, r3
 8006d36:	301c      	adds	r0, #28
 8006d38:	e772      	b.n	8006c20 <_dtoa_r+0x810>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc36      	bgt.n	8006dae <_dtoa_r+0x99e>
 8006d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	dd33      	ble.n	8006dae <_dtoa_r+0x99e>
 8006d46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d4a:	f1b9 0f00 	cmp.w	r9, #0
 8006d4e:	d10d      	bne.n	8006d6c <_dtoa_r+0x95c>
 8006d50:	4621      	mov	r1, r4
 8006d52:	464b      	mov	r3, r9
 8006d54:	2205      	movs	r2, #5
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 fd5c 	bl	8007814 <__multadd>
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4658      	mov	r0, fp
 8006d62:	f000 ffbd 	bl	8007ce0 <__mcmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f73f adb8 	bgt.w	80068dc <_dtoa_r+0x4cc>
 8006d6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d6e:	9f03      	ldr	r7, [sp, #12]
 8006d70:	ea6f 0a03 	mvn.w	sl, r3
 8006d74:	f04f 0800 	mov.w	r8, #0
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 fd28 	bl	80077d0 <_Bfree>
 8006d80:	2e00      	cmp	r6, #0
 8006d82:	f43f aea7 	beq.w	8006ad4 <_dtoa_r+0x6c4>
 8006d86:	f1b8 0f00 	cmp.w	r8, #0
 8006d8a:	d005      	beq.n	8006d98 <_dtoa_r+0x988>
 8006d8c:	45b0      	cmp	r8, r6
 8006d8e:	d003      	beq.n	8006d98 <_dtoa_r+0x988>
 8006d90:	4641      	mov	r1, r8
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 fd1c 	bl	80077d0 <_Bfree>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 fd18 	bl	80077d0 <_Bfree>
 8006da0:	e698      	b.n	8006ad4 <_dtoa_r+0x6c4>
 8006da2:	2400      	movs	r4, #0
 8006da4:	4626      	mov	r6, r4
 8006da6:	e7e1      	b.n	8006d6c <_dtoa_r+0x95c>
 8006da8:	46c2      	mov	sl, r8
 8006daa:	4626      	mov	r6, r4
 8006dac:	e596      	b.n	80068dc <_dtoa_r+0x4cc>
 8006dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80fd 	beq.w	8006fb4 <_dtoa_r+0xba4>
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	dd05      	ble.n	8006dca <_dtoa_r+0x9ba>
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 ff1c 	bl	8007c00 <__lshift>
 8006dc8:	4606      	mov	r6, r0
 8006dca:	f1b8 0f00 	cmp.w	r8, #0
 8006dce:	d05c      	beq.n	8006e8a <_dtoa_r+0xa7a>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	6871      	ldr	r1, [r6, #4]
 8006dd4:	f000 fcbc 	bl	8007750 <_Balloc>
 8006dd8:	4607      	mov	r7, r0
 8006dda:	b928      	cbnz	r0, 8006de8 <_dtoa_r+0x9d8>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006de2:	4b7f      	ldr	r3, [pc, #508]	; (8006fe0 <_dtoa_r+0xbd0>)
 8006de4:	f7ff bb28 	b.w	8006438 <_dtoa_r+0x28>
 8006de8:	6932      	ldr	r2, [r6, #16]
 8006dea:	f106 010c 	add.w	r1, r6, #12
 8006dee:	3202      	adds	r2, #2
 8006df0:	0092      	lsls	r2, r2, #2
 8006df2:	300c      	adds	r0, #12
 8006df4:	f000 fc9e 	bl	8007734 <memcpy>
 8006df8:	2201      	movs	r2, #1
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f000 feff 	bl	8007c00 <__lshift>
 8006e02:	46b0      	mov	r8, r6
 8006e04:	4606      	mov	r6, r0
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	9308      	str	r3, [sp, #32]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	444b      	add	r3, r9
 8006e10:	930a      	str	r3, [sp, #40]	; 0x28
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	4658      	mov	r0, fp
 8006e22:	9304      	str	r3, [sp, #16]
 8006e24:	f7ff fa66 	bl	80062f4 <quorem>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	3330      	adds	r3, #48	; 0x30
 8006e2e:	9006      	str	r0, [sp, #24]
 8006e30:	4658      	mov	r0, fp
 8006e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e34:	f000 ff54 	bl	8007ce0 <__mcmp>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4681      	mov	r9, r0
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 ff6a 	bl	8007d18 <__mdiff>
 8006e44:	68c2      	ldr	r2, [r0, #12]
 8006e46:	4607      	mov	r7, r0
 8006e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e4a:	bb02      	cbnz	r2, 8006e8e <_dtoa_r+0xa7e>
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4658      	mov	r0, fp
 8006e50:	f000 ff46 	bl	8007ce0 <__mcmp>
 8006e54:	4602      	mov	r2, r0
 8006e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006e60:	f000 fcb6 	bl	80077d0 <_Bfree>
 8006e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e68:	9f08      	ldr	r7, [sp, #32]
 8006e6a:	ea43 0102 	orr.w	r1, r3, r2
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	430b      	orrs	r3, r1
 8006e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e74:	d10d      	bne.n	8006e92 <_dtoa_r+0xa82>
 8006e76:	2b39      	cmp	r3, #57	; 0x39
 8006e78:	d029      	beq.n	8006ece <_dtoa_r+0xabe>
 8006e7a:	f1b9 0f00 	cmp.w	r9, #0
 8006e7e:	dd01      	ble.n	8006e84 <_dtoa_r+0xa74>
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	3331      	adds	r3, #49	; 0x31
 8006e84:	9a04      	ldr	r2, [sp, #16]
 8006e86:	7013      	strb	r3, [r2, #0]
 8006e88:	e776      	b.n	8006d78 <_dtoa_r+0x968>
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	e7b9      	b.n	8006e02 <_dtoa_r+0x9f2>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	e7e2      	b.n	8006e58 <_dtoa_r+0xa48>
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	db06      	blt.n	8006ea6 <_dtoa_r+0xa96>
 8006e98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006e9a:	ea41 0909 	orr.w	r9, r1, r9
 8006e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ea0:	ea59 0101 	orrs.w	r1, r9, r1
 8006ea4:	d120      	bne.n	8006ee8 <_dtoa_r+0xad8>
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	ddec      	ble.n	8006e84 <_dtoa_r+0xa74>
 8006eaa:	4659      	mov	r1, fp
 8006eac:	2201      	movs	r2, #1
 8006eae:	4628      	mov	r0, r5
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	f000 fea5 	bl	8007c00 <__lshift>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4683      	mov	fp, r0
 8006eba:	f000 ff11 	bl	8007ce0 <__mcmp>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	dc02      	bgt.n	8006eca <_dtoa_r+0xaba>
 8006ec4:	d1de      	bne.n	8006e84 <_dtoa_r+0xa74>
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d5dc      	bpl.n	8006e84 <_dtoa_r+0xa74>
 8006eca:	2b39      	cmp	r3, #57	; 0x39
 8006ecc:	d1d8      	bne.n	8006e80 <_dtoa_r+0xa70>
 8006ece:	2339      	movs	r3, #57	; 0x39
 8006ed0:	9a04      	ldr	r2, [sp, #16]
 8006ed2:	7013      	strb	r3, [r2, #0]
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	461f      	mov	r7, r3
 8006ed8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	2a39      	cmp	r2, #57	; 0x39
 8006ee0:	d050      	beq.n	8006f84 <_dtoa_r+0xb74>
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e747      	b.n	8006d78 <_dtoa_r+0x968>
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	dd03      	ble.n	8006ef4 <_dtoa_r+0xae4>
 8006eec:	2b39      	cmp	r3, #57	; 0x39
 8006eee:	d0ee      	beq.n	8006ece <_dtoa_r+0xabe>
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	e7c7      	b.n	8006e84 <_dtoa_r+0xa74>
 8006ef4:	9a08      	ldr	r2, [sp, #32]
 8006ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ef8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006efc:	428a      	cmp	r2, r1
 8006efe:	d02a      	beq.n	8006f56 <_dtoa_r+0xb46>
 8006f00:	4659      	mov	r1, fp
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fc84 	bl	8007814 <__multadd>
 8006f0c:	45b0      	cmp	r8, r6
 8006f0e:	4683      	mov	fp, r0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	f04f 020a 	mov.w	r2, #10
 8006f18:	4641      	mov	r1, r8
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	d107      	bne.n	8006f2e <_dtoa_r+0xb1e>
 8006f1e:	f000 fc79 	bl	8007814 <__multadd>
 8006f22:	4680      	mov	r8, r0
 8006f24:	4606      	mov	r6, r0
 8006f26:	9b08      	ldr	r3, [sp, #32]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	9308      	str	r3, [sp, #32]
 8006f2c:	e775      	b.n	8006e1a <_dtoa_r+0xa0a>
 8006f2e:	f000 fc71 	bl	8007814 <__multadd>
 8006f32:	4631      	mov	r1, r6
 8006f34:	4680      	mov	r8, r0
 8006f36:	2300      	movs	r3, #0
 8006f38:	220a      	movs	r2, #10
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 fc6a 	bl	8007814 <__multadd>
 8006f40:	4606      	mov	r6, r0
 8006f42:	e7f0      	b.n	8006f26 <_dtoa_r+0xb16>
 8006f44:	f1b9 0f00 	cmp.w	r9, #0
 8006f48:	bfcc      	ite	gt
 8006f4a:	464f      	movgt	r7, r9
 8006f4c:	2701      	movle	r7, #1
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	9a03      	ldr	r2, [sp, #12]
 8006f54:	4417      	add	r7, r2
 8006f56:	4659      	mov	r1, fp
 8006f58:	2201      	movs	r2, #1
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	9308      	str	r3, [sp, #32]
 8006f5e:	f000 fe4f 	bl	8007c00 <__lshift>
 8006f62:	4621      	mov	r1, r4
 8006f64:	4683      	mov	fp, r0
 8006f66:	f000 febb 	bl	8007ce0 <__mcmp>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	dcb2      	bgt.n	8006ed4 <_dtoa_r+0xac4>
 8006f6e:	d102      	bne.n	8006f76 <_dtoa_r+0xb66>
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	07db      	lsls	r3, r3, #31
 8006f74:	d4ae      	bmi.n	8006ed4 <_dtoa_r+0xac4>
 8006f76:	463b      	mov	r3, r7
 8006f78:	461f      	mov	r7, r3
 8006f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f7e:	2a30      	cmp	r2, #48	; 0x30
 8006f80:	d0fa      	beq.n	8006f78 <_dtoa_r+0xb68>
 8006f82:	e6f9      	b.n	8006d78 <_dtoa_r+0x968>
 8006f84:	9a03      	ldr	r2, [sp, #12]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d1a5      	bne.n	8006ed6 <_dtoa_r+0xac6>
 8006f8a:	2331      	movs	r3, #49	; 0x31
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	e779      	b.n	8006e86 <_dtoa_r+0xa76>
 8006f92:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <_dtoa_r+0xbd4>)
 8006f94:	f7ff baa8 	b.w	80064e8 <_dtoa_r+0xd8>
 8006f98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f aa81 	bne.w	80064a2 <_dtoa_r+0x92>
 8006fa0:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <_dtoa_r+0xbd8>)
 8006fa2:	f7ff baa1 	b.w	80064e8 <_dtoa_r+0xd8>
 8006fa6:	f1b9 0f00 	cmp.w	r9, #0
 8006faa:	dc03      	bgt.n	8006fb4 <_dtoa_r+0xba4>
 8006fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	f73f aecb 	bgt.w	8006d4a <_dtoa_r+0x93a>
 8006fb4:	9f03      	ldr	r7, [sp, #12]
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4658      	mov	r0, fp
 8006fba:	f7ff f99b 	bl	80062f4 <quorem>
 8006fbe:	9a03      	ldr	r2, [sp, #12]
 8006fc0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fc4:	f807 3b01 	strb.w	r3, [r7], #1
 8006fc8:	1aba      	subs	r2, r7, r2
 8006fca:	4591      	cmp	r9, r2
 8006fcc:	ddba      	ble.n	8006f44 <_dtoa_r+0xb34>
 8006fce:	4659      	mov	r1, fp
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 fc1d 	bl	8007814 <__multadd>
 8006fda:	4683      	mov	fp, r0
 8006fdc:	e7eb      	b.n	8006fb6 <_dtoa_r+0xba6>
 8006fde:	bf00      	nop
 8006fe0:	080093c5 	.word	0x080093c5
 8006fe4:	08009134 	.word	0x08009134
 8006fe8:	0800935d 	.word	0x0800935d

08006fec <fiprintf>:
 8006fec:	b40e      	push	{r1, r2, r3}
 8006fee:	b503      	push	{r0, r1, lr}
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	ab03      	add	r3, sp, #12
 8006ff4:	4805      	ldr	r0, [pc, #20]	; (800700c <fiprintf+0x20>)
 8006ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	f001 fad3 	bl	80085a8 <_vfiprintf_r>
 8007002:	b002      	add	sp, #8
 8007004:	f85d eb04 	ldr.w	lr, [sp], #4
 8007008:	b003      	add	sp, #12
 800700a:	4770      	bx	lr
 800700c:	20000010 	.word	0x20000010

08007010 <rshift>:
 8007010:	6903      	ldr	r3, [r0, #16]
 8007012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007016:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800701a:	f100 0414 	add.w	r4, r0, #20
 800701e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007022:	dd46      	ble.n	80070b2 <rshift+0xa2>
 8007024:	f011 011f 	ands.w	r1, r1, #31
 8007028:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800702c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007030:	d10c      	bne.n	800704c <rshift+0x3c>
 8007032:	4629      	mov	r1, r5
 8007034:	f100 0710 	add.w	r7, r0, #16
 8007038:	42b1      	cmp	r1, r6
 800703a:	d335      	bcc.n	80070a8 <rshift+0x98>
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	1eea      	subs	r2, r5, #3
 8007042:	4296      	cmp	r6, r2
 8007044:	bf38      	it	cc
 8007046:	2300      	movcc	r3, #0
 8007048:	4423      	add	r3, r4
 800704a:	e015      	b.n	8007078 <rshift+0x68>
 800704c:	46a1      	mov	r9, r4
 800704e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007052:	f1c1 0820 	rsb	r8, r1, #32
 8007056:	40cf      	lsrs	r7, r1
 8007058:	f105 0e04 	add.w	lr, r5, #4
 800705c:	4576      	cmp	r6, lr
 800705e:	46f4      	mov	ip, lr
 8007060:	d816      	bhi.n	8007090 <rshift+0x80>
 8007062:	1a9a      	subs	r2, r3, r2
 8007064:	0092      	lsls	r2, r2, #2
 8007066:	3a04      	subs	r2, #4
 8007068:	3501      	adds	r5, #1
 800706a:	42ae      	cmp	r6, r5
 800706c:	bf38      	it	cc
 800706e:	2200      	movcc	r2, #0
 8007070:	18a3      	adds	r3, r4, r2
 8007072:	50a7      	str	r7, [r4, r2]
 8007074:	b107      	cbz	r7, 8007078 <rshift+0x68>
 8007076:	3304      	adds	r3, #4
 8007078:	42a3      	cmp	r3, r4
 800707a:	eba3 0204 	sub.w	r2, r3, r4
 800707e:	bf08      	it	eq
 8007080:	2300      	moveq	r3, #0
 8007082:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007086:	6102      	str	r2, [r0, #16]
 8007088:	bf08      	it	eq
 800708a:	6143      	streq	r3, [r0, #20]
 800708c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007090:	f8dc c000 	ldr.w	ip, [ip]
 8007094:	fa0c fc08 	lsl.w	ip, ip, r8
 8007098:	ea4c 0707 	orr.w	r7, ip, r7
 800709c:	f849 7b04 	str.w	r7, [r9], #4
 80070a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070a4:	40cf      	lsrs	r7, r1
 80070a6:	e7d9      	b.n	800705c <rshift+0x4c>
 80070a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80070ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80070b0:	e7c2      	b.n	8007038 <rshift+0x28>
 80070b2:	4623      	mov	r3, r4
 80070b4:	e7e0      	b.n	8007078 <rshift+0x68>

080070b6 <__hexdig_fun>:
 80070b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d802      	bhi.n	80070c4 <__hexdig_fun+0xe>
 80070be:	3820      	subs	r0, #32
 80070c0:	b2c0      	uxtb	r0, r0
 80070c2:	4770      	bx	lr
 80070c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	d801      	bhi.n	80070d0 <__hexdig_fun+0x1a>
 80070cc:	3847      	subs	r0, #71	; 0x47
 80070ce:	e7f7      	b.n	80070c0 <__hexdig_fun+0xa>
 80070d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80070d4:	2b05      	cmp	r3, #5
 80070d6:	d801      	bhi.n	80070dc <__hexdig_fun+0x26>
 80070d8:	3827      	subs	r0, #39	; 0x27
 80070da:	e7f1      	b.n	80070c0 <__hexdig_fun+0xa>
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr

080070e0 <__gethex>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b08b      	sub	sp, #44	; 0x2c
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	4bb2      	ldr	r3, [pc, #712]	; (80073b4 <__gethex+0x2d4>)
 80070ea:	9002      	str	r0, [sp, #8]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	468b      	mov	fp, r1
 80070f0:	4618      	mov	r0, r3
 80070f2:	4690      	mov	r8, r2
 80070f4:	9303      	str	r3, [sp, #12]
 80070f6:	f7f9 f82b 	bl	8000150 <strlen>
 80070fa:	4682      	mov	sl, r0
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	f8db 2000 	ldr.w	r2, [fp]
 8007102:	4403      	add	r3, r0
 8007104:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007108:	9306      	str	r3, [sp, #24]
 800710a:	1c93      	adds	r3, r2, #2
 800710c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007110:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007114:	32fe      	adds	r2, #254	; 0xfe
 8007116:	18d1      	adds	r1, r2, r3
 8007118:	461f      	mov	r7, r3
 800711a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800711e:	9101      	str	r1, [sp, #4]
 8007120:	2830      	cmp	r0, #48	; 0x30
 8007122:	d0f8      	beq.n	8007116 <__gethex+0x36>
 8007124:	f7ff ffc7 	bl	80070b6 <__hexdig_fun>
 8007128:	4604      	mov	r4, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	d13a      	bne.n	80071a4 <__gethex+0xc4>
 800712e:	4652      	mov	r2, sl
 8007130:	4638      	mov	r0, r7
 8007132:	9903      	ldr	r1, [sp, #12]
 8007134:	f001 fb7e 	bl	8008834 <strncmp>
 8007138:	4605      	mov	r5, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	d166      	bne.n	800720c <__gethex+0x12c>
 800713e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007142:	eb07 060a 	add.w	r6, r7, sl
 8007146:	f7ff ffb6 	bl	80070b6 <__hexdig_fun>
 800714a:	2800      	cmp	r0, #0
 800714c:	d060      	beq.n	8007210 <__gethex+0x130>
 800714e:	4633      	mov	r3, r6
 8007150:	7818      	ldrb	r0, [r3, #0]
 8007152:	461f      	mov	r7, r3
 8007154:	2830      	cmp	r0, #48	; 0x30
 8007156:	f103 0301 	add.w	r3, r3, #1
 800715a:	d0f9      	beq.n	8007150 <__gethex+0x70>
 800715c:	f7ff ffab 	bl	80070b6 <__hexdig_fun>
 8007160:	2301      	movs	r3, #1
 8007162:	fab0 f480 	clz	r4, r0
 8007166:	4635      	mov	r5, r6
 8007168:	0964      	lsrs	r4, r4, #5
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	463a      	mov	r2, r7
 800716e:	4616      	mov	r6, r2
 8007170:	7830      	ldrb	r0, [r6, #0]
 8007172:	3201      	adds	r2, #1
 8007174:	f7ff ff9f 	bl	80070b6 <__hexdig_fun>
 8007178:	2800      	cmp	r0, #0
 800717a:	d1f8      	bne.n	800716e <__gethex+0x8e>
 800717c:	4652      	mov	r2, sl
 800717e:	4630      	mov	r0, r6
 8007180:	9903      	ldr	r1, [sp, #12]
 8007182:	f001 fb57 	bl	8008834 <strncmp>
 8007186:	b980      	cbnz	r0, 80071aa <__gethex+0xca>
 8007188:	b94d      	cbnz	r5, 800719e <__gethex+0xbe>
 800718a:	eb06 050a 	add.w	r5, r6, sl
 800718e:	462a      	mov	r2, r5
 8007190:	4616      	mov	r6, r2
 8007192:	7830      	ldrb	r0, [r6, #0]
 8007194:	3201      	adds	r2, #1
 8007196:	f7ff ff8e 	bl	80070b6 <__hexdig_fun>
 800719a:	2800      	cmp	r0, #0
 800719c:	d1f8      	bne.n	8007190 <__gethex+0xb0>
 800719e:	1bad      	subs	r5, r5, r6
 80071a0:	00ad      	lsls	r5, r5, #2
 80071a2:	e004      	b.n	80071ae <__gethex+0xce>
 80071a4:	2400      	movs	r4, #0
 80071a6:	4625      	mov	r5, r4
 80071a8:	e7e0      	b.n	800716c <__gethex+0x8c>
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	d1f7      	bne.n	800719e <__gethex+0xbe>
 80071ae:	7833      	ldrb	r3, [r6, #0]
 80071b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071b4:	2b50      	cmp	r3, #80	; 0x50
 80071b6:	d139      	bne.n	800722c <__gethex+0x14c>
 80071b8:	7873      	ldrb	r3, [r6, #1]
 80071ba:	2b2b      	cmp	r3, #43	; 0x2b
 80071bc:	d02a      	beq.n	8007214 <__gethex+0x134>
 80071be:	2b2d      	cmp	r3, #45	; 0x2d
 80071c0:	d02c      	beq.n	800721c <__gethex+0x13c>
 80071c2:	f04f 0900 	mov.w	r9, #0
 80071c6:	1c71      	adds	r1, r6, #1
 80071c8:	7808      	ldrb	r0, [r1, #0]
 80071ca:	f7ff ff74 	bl	80070b6 <__hexdig_fun>
 80071ce:	1e43      	subs	r3, r0, #1
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b18      	cmp	r3, #24
 80071d4:	d82a      	bhi.n	800722c <__gethex+0x14c>
 80071d6:	f1a0 0210 	sub.w	r2, r0, #16
 80071da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071de:	f7ff ff6a 	bl	80070b6 <__hexdig_fun>
 80071e2:	1e43      	subs	r3, r0, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b18      	cmp	r3, #24
 80071e8:	d91b      	bls.n	8007222 <__gethex+0x142>
 80071ea:	f1b9 0f00 	cmp.w	r9, #0
 80071ee:	d000      	beq.n	80071f2 <__gethex+0x112>
 80071f0:	4252      	negs	r2, r2
 80071f2:	4415      	add	r5, r2
 80071f4:	f8cb 1000 	str.w	r1, [fp]
 80071f8:	b1d4      	cbz	r4, 8007230 <__gethex+0x150>
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2700      	movne	r7, #0
 8007202:	2706      	moveq	r7, #6
 8007204:	4638      	mov	r0, r7
 8007206:	b00b      	add	sp, #44	; 0x2c
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	463e      	mov	r6, r7
 800720e:	4625      	mov	r5, r4
 8007210:	2401      	movs	r4, #1
 8007212:	e7cc      	b.n	80071ae <__gethex+0xce>
 8007214:	f04f 0900 	mov.w	r9, #0
 8007218:	1cb1      	adds	r1, r6, #2
 800721a:	e7d5      	b.n	80071c8 <__gethex+0xe8>
 800721c:	f04f 0901 	mov.w	r9, #1
 8007220:	e7fa      	b.n	8007218 <__gethex+0x138>
 8007222:	230a      	movs	r3, #10
 8007224:	fb03 0202 	mla	r2, r3, r2, r0
 8007228:	3a10      	subs	r2, #16
 800722a:	e7d6      	b.n	80071da <__gethex+0xfa>
 800722c:	4631      	mov	r1, r6
 800722e:	e7e1      	b.n	80071f4 <__gethex+0x114>
 8007230:	4621      	mov	r1, r4
 8007232:	1bf3      	subs	r3, r6, r7
 8007234:	3b01      	subs	r3, #1
 8007236:	2b07      	cmp	r3, #7
 8007238:	dc0a      	bgt.n	8007250 <__gethex+0x170>
 800723a:	9802      	ldr	r0, [sp, #8]
 800723c:	f000 fa88 	bl	8007750 <_Balloc>
 8007240:	4604      	mov	r4, r0
 8007242:	b940      	cbnz	r0, 8007256 <__gethex+0x176>
 8007244:	4602      	mov	r2, r0
 8007246:	21de      	movs	r1, #222	; 0xde
 8007248:	4b5b      	ldr	r3, [pc, #364]	; (80073b8 <__gethex+0x2d8>)
 800724a:	485c      	ldr	r0, [pc, #368]	; (80073bc <__gethex+0x2dc>)
 800724c:	f7ff f834 	bl	80062b8 <__assert_func>
 8007250:	3101      	adds	r1, #1
 8007252:	105b      	asrs	r3, r3, #1
 8007254:	e7ef      	b.n	8007236 <__gethex+0x156>
 8007256:	f04f 0b00 	mov.w	fp, #0
 800725a:	f100 0914 	add.w	r9, r0, #20
 800725e:	f1ca 0301 	rsb	r3, sl, #1
 8007262:	f8cd 9010 	str.w	r9, [sp, #16]
 8007266:	f8cd b004 	str.w	fp, [sp, #4]
 800726a:	9308      	str	r3, [sp, #32]
 800726c:	42b7      	cmp	r7, r6
 800726e:	d33f      	bcc.n	80072f0 <__gethex+0x210>
 8007270:	9f04      	ldr	r7, [sp, #16]
 8007272:	9b01      	ldr	r3, [sp, #4]
 8007274:	f847 3b04 	str.w	r3, [r7], #4
 8007278:	eba7 0709 	sub.w	r7, r7, r9
 800727c:	10bf      	asrs	r7, r7, #2
 800727e:	6127      	str	r7, [r4, #16]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fb57 	bl	8007934 <__hi0bits>
 8007286:	017f      	lsls	r7, r7, #5
 8007288:	f8d8 6000 	ldr.w	r6, [r8]
 800728c:	1a3f      	subs	r7, r7, r0
 800728e:	42b7      	cmp	r7, r6
 8007290:	dd62      	ble.n	8007358 <__gethex+0x278>
 8007292:	1bbf      	subs	r7, r7, r6
 8007294:	4639      	mov	r1, r7
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fef1 	bl	800807e <__any_on>
 800729c:	4682      	mov	sl, r0
 800729e:	b1a8      	cbz	r0, 80072cc <__gethex+0x1ec>
 80072a0:	f04f 0a01 	mov.w	sl, #1
 80072a4:	1e7b      	subs	r3, r7, #1
 80072a6:	1159      	asrs	r1, r3, #5
 80072a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072ac:	f003 021f 	and.w	r2, r3, #31
 80072b0:	fa0a f202 	lsl.w	r2, sl, r2
 80072b4:	420a      	tst	r2, r1
 80072b6:	d009      	beq.n	80072cc <__gethex+0x1ec>
 80072b8:	4553      	cmp	r3, sl
 80072ba:	dd05      	ble.n	80072c8 <__gethex+0x1e8>
 80072bc:	4620      	mov	r0, r4
 80072be:	1eb9      	subs	r1, r7, #2
 80072c0:	f000 fedd 	bl	800807e <__any_on>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d144      	bne.n	8007352 <__gethex+0x272>
 80072c8:	f04f 0a02 	mov.w	sl, #2
 80072cc:	4639      	mov	r1, r7
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7ff fe9e 	bl	8007010 <rshift>
 80072d4:	443d      	add	r5, r7
 80072d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072da:	42ab      	cmp	r3, r5
 80072dc:	da4a      	bge.n	8007374 <__gethex+0x294>
 80072de:	4621      	mov	r1, r4
 80072e0:	9802      	ldr	r0, [sp, #8]
 80072e2:	f000 fa75 	bl	80077d0 <_Bfree>
 80072e6:	2300      	movs	r3, #0
 80072e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072ea:	27a3      	movs	r7, #163	; 0xa3
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e789      	b.n	8007204 <__gethex+0x124>
 80072f0:	1e73      	subs	r3, r6, #1
 80072f2:	9a06      	ldr	r2, [sp, #24]
 80072f4:	9307      	str	r3, [sp, #28]
 80072f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d019      	beq.n	8007332 <__gethex+0x252>
 80072fe:	f1bb 0f20 	cmp.w	fp, #32
 8007302:	d107      	bne.n	8007314 <__gethex+0x234>
 8007304:	9b04      	ldr	r3, [sp, #16]
 8007306:	9a01      	ldr	r2, [sp, #4]
 8007308:	f843 2b04 	str.w	r2, [r3], #4
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	2300      	movs	r3, #0
 8007310:	469b      	mov	fp, r3
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007318:	f7ff fecd 	bl	80070b6 <__hexdig_fun>
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	f000 000f 	and.w	r0, r0, #15
 8007322:	fa00 f00b 	lsl.w	r0, r0, fp
 8007326:	4303      	orrs	r3, r0
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	f10b 0b04 	add.w	fp, fp, #4
 800732e:	9b07      	ldr	r3, [sp, #28]
 8007330:	e00d      	b.n	800734e <__gethex+0x26e>
 8007332:	9a08      	ldr	r2, [sp, #32]
 8007334:	1e73      	subs	r3, r6, #1
 8007336:	4413      	add	r3, r2
 8007338:	42bb      	cmp	r3, r7
 800733a:	d3e0      	bcc.n	80072fe <__gethex+0x21e>
 800733c:	4618      	mov	r0, r3
 800733e:	4652      	mov	r2, sl
 8007340:	9903      	ldr	r1, [sp, #12]
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	f001 fa76 	bl	8008834 <strncmp>
 8007348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734a:	2800      	cmp	r0, #0
 800734c:	d1d7      	bne.n	80072fe <__gethex+0x21e>
 800734e:	461e      	mov	r6, r3
 8007350:	e78c      	b.n	800726c <__gethex+0x18c>
 8007352:	f04f 0a03 	mov.w	sl, #3
 8007356:	e7b9      	b.n	80072cc <__gethex+0x1ec>
 8007358:	da09      	bge.n	800736e <__gethex+0x28e>
 800735a:	1bf7      	subs	r7, r6, r7
 800735c:	4621      	mov	r1, r4
 800735e:	463a      	mov	r2, r7
 8007360:	9802      	ldr	r0, [sp, #8]
 8007362:	f000 fc4d 	bl	8007c00 <__lshift>
 8007366:	4604      	mov	r4, r0
 8007368:	1bed      	subs	r5, r5, r7
 800736a:	f100 0914 	add.w	r9, r0, #20
 800736e:	f04f 0a00 	mov.w	sl, #0
 8007372:	e7b0      	b.n	80072d6 <__gethex+0x1f6>
 8007374:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007378:	42a8      	cmp	r0, r5
 800737a:	dd72      	ble.n	8007462 <__gethex+0x382>
 800737c:	1b45      	subs	r5, r0, r5
 800737e:	42ae      	cmp	r6, r5
 8007380:	dc35      	bgt.n	80073ee <__gethex+0x30e>
 8007382:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d029      	beq.n	80073de <__gethex+0x2fe>
 800738a:	2b03      	cmp	r3, #3
 800738c:	d02b      	beq.n	80073e6 <__gethex+0x306>
 800738e:	2b01      	cmp	r3, #1
 8007390:	d11c      	bne.n	80073cc <__gethex+0x2ec>
 8007392:	42ae      	cmp	r6, r5
 8007394:	d11a      	bne.n	80073cc <__gethex+0x2ec>
 8007396:	2e01      	cmp	r6, #1
 8007398:	d112      	bne.n	80073c0 <__gethex+0x2e0>
 800739a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800739e:	9a05      	ldr	r2, [sp, #20]
 80073a0:	2762      	movs	r7, #98	; 0x62
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	2301      	movs	r3, #1
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	f8c9 3000 	str.w	r3, [r9]
 80073ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073ae:	601c      	str	r4, [r3, #0]
 80073b0:	e728      	b.n	8007204 <__gethex+0x124>
 80073b2:	bf00      	nop
 80073b4:	0800943c 	.word	0x0800943c
 80073b8:	080093c5 	.word	0x080093c5
 80073bc:	080093d6 	.word	0x080093d6
 80073c0:	4620      	mov	r0, r4
 80073c2:	1e71      	subs	r1, r6, #1
 80073c4:	f000 fe5b 	bl	800807e <__any_on>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1e6      	bne.n	800739a <__gethex+0x2ba>
 80073cc:	4621      	mov	r1, r4
 80073ce:	9802      	ldr	r0, [sp, #8]
 80073d0:	f000 f9fe 	bl	80077d0 <_Bfree>
 80073d4:	2300      	movs	r3, #0
 80073d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073d8:	2750      	movs	r7, #80	; 0x50
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	e712      	b.n	8007204 <__gethex+0x124>
 80073de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f3      	bne.n	80073cc <__gethex+0x2ec>
 80073e4:	e7d9      	b.n	800739a <__gethex+0x2ba>
 80073e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1d6      	bne.n	800739a <__gethex+0x2ba>
 80073ec:	e7ee      	b.n	80073cc <__gethex+0x2ec>
 80073ee:	1e6f      	subs	r7, r5, #1
 80073f0:	f1ba 0f00 	cmp.w	sl, #0
 80073f4:	d132      	bne.n	800745c <__gethex+0x37c>
 80073f6:	b127      	cbz	r7, 8007402 <__gethex+0x322>
 80073f8:	4639      	mov	r1, r7
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fe3f 	bl	800807e <__any_on>
 8007400:	4682      	mov	sl, r0
 8007402:	2101      	movs	r1, #1
 8007404:	117b      	asrs	r3, r7, #5
 8007406:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800740a:	f007 071f 	and.w	r7, r7, #31
 800740e:	fa01 f707 	lsl.w	r7, r1, r7
 8007412:	421f      	tst	r7, r3
 8007414:	f04f 0702 	mov.w	r7, #2
 8007418:	4629      	mov	r1, r5
 800741a:	4620      	mov	r0, r4
 800741c:	bf18      	it	ne
 800741e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007422:	1b76      	subs	r6, r6, r5
 8007424:	f7ff fdf4 	bl	8007010 <rshift>
 8007428:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800742c:	f1ba 0f00 	cmp.w	sl, #0
 8007430:	d048      	beq.n	80074c4 <__gethex+0x3e4>
 8007432:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d015      	beq.n	8007466 <__gethex+0x386>
 800743a:	2b03      	cmp	r3, #3
 800743c:	d017      	beq.n	800746e <__gethex+0x38e>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d109      	bne.n	8007456 <__gethex+0x376>
 8007442:	f01a 0f02 	tst.w	sl, #2
 8007446:	d006      	beq.n	8007456 <__gethex+0x376>
 8007448:	f8d9 0000 	ldr.w	r0, [r9]
 800744c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007450:	f01a 0f01 	tst.w	sl, #1
 8007454:	d10e      	bne.n	8007474 <__gethex+0x394>
 8007456:	f047 0710 	orr.w	r7, r7, #16
 800745a:	e033      	b.n	80074c4 <__gethex+0x3e4>
 800745c:	f04f 0a01 	mov.w	sl, #1
 8007460:	e7cf      	b.n	8007402 <__gethex+0x322>
 8007462:	2701      	movs	r7, #1
 8007464:	e7e2      	b.n	800742c <__gethex+0x34c>
 8007466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007468:	f1c3 0301 	rsb	r3, r3, #1
 800746c:	9315      	str	r3, [sp, #84]	; 0x54
 800746e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <__gethex+0x376>
 8007474:	f04f 0c00 	mov.w	ip, #0
 8007478:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800747c:	f104 0314 	add.w	r3, r4, #20
 8007480:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007484:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007488:	4618      	mov	r0, r3
 800748a:	f853 2b04 	ldr.w	r2, [r3], #4
 800748e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007492:	d01c      	beq.n	80074ce <__gethex+0x3ee>
 8007494:	3201      	adds	r2, #1
 8007496:	6002      	str	r2, [r0, #0]
 8007498:	2f02      	cmp	r7, #2
 800749a:	f104 0314 	add.w	r3, r4, #20
 800749e:	d13d      	bne.n	800751c <__gethex+0x43c>
 80074a0:	f8d8 2000 	ldr.w	r2, [r8]
 80074a4:	3a01      	subs	r2, #1
 80074a6:	42b2      	cmp	r2, r6
 80074a8:	d10a      	bne.n	80074c0 <__gethex+0x3e0>
 80074aa:	2201      	movs	r2, #1
 80074ac:	1171      	asrs	r1, r6, #5
 80074ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074b2:	f006 061f 	and.w	r6, r6, #31
 80074b6:	fa02 f606 	lsl.w	r6, r2, r6
 80074ba:	421e      	tst	r6, r3
 80074bc:	bf18      	it	ne
 80074be:	4617      	movne	r7, r2
 80074c0:	f047 0720 	orr.w	r7, r7, #32
 80074c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074c6:	601c      	str	r4, [r3, #0]
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	601d      	str	r5, [r3, #0]
 80074cc:	e69a      	b.n	8007204 <__gethex+0x124>
 80074ce:	4299      	cmp	r1, r3
 80074d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80074d4:	d8d8      	bhi.n	8007488 <__gethex+0x3a8>
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	459b      	cmp	fp, r3
 80074da:	db17      	blt.n	800750c <__gethex+0x42c>
 80074dc:	6861      	ldr	r1, [r4, #4]
 80074de:	9802      	ldr	r0, [sp, #8]
 80074e0:	3101      	adds	r1, #1
 80074e2:	f000 f935 	bl	8007750 <_Balloc>
 80074e6:	4681      	mov	r9, r0
 80074e8:	b918      	cbnz	r0, 80074f2 <__gethex+0x412>
 80074ea:	4602      	mov	r2, r0
 80074ec:	2184      	movs	r1, #132	; 0x84
 80074ee:	4b19      	ldr	r3, [pc, #100]	; (8007554 <__gethex+0x474>)
 80074f0:	e6ab      	b.n	800724a <__gethex+0x16a>
 80074f2:	6922      	ldr	r2, [r4, #16]
 80074f4:	f104 010c 	add.w	r1, r4, #12
 80074f8:	3202      	adds	r2, #2
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f000 f919 	bl	8007734 <memcpy>
 8007502:	4621      	mov	r1, r4
 8007504:	9802      	ldr	r0, [sp, #8]
 8007506:	f000 f963 	bl	80077d0 <_Bfree>
 800750a:	464c      	mov	r4, r9
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6122      	str	r2, [r4, #16]
 8007512:	2201      	movs	r2, #1
 8007514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007518:	615a      	str	r2, [r3, #20]
 800751a:	e7bd      	b.n	8007498 <__gethex+0x3b8>
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	455a      	cmp	r2, fp
 8007520:	dd0b      	ble.n	800753a <__gethex+0x45a>
 8007522:	2101      	movs	r1, #1
 8007524:	4620      	mov	r0, r4
 8007526:	f7ff fd73 	bl	8007010 <rshift>
 800752a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800752e:	3501      	adds	r5, #1
 8007530:	42ab      	cmp	r3, r5
 8007532:	f6ff aed4 	blt.w	80072de <__gethex+0x1fe>
 8007536:	2701      	movs	r7, #1
 8007538:	e7c2      	b.n	80074c0 <__gethex+0x3e0>
 800753a:	f016 061f 	ands.w	r6, r6, #31
 800753e:	d0fa      	beq.n	8007536 <__gethex+0x456>
 8007540:	4453      	add	r3, sl
 8007542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007546:	f000 f9f5 	bl	8007934 <__hi0bits>
 800754a:	f1c6 0620 	rsb	r6, r6, #32
 800754e:	42b0      	cmp	r0, r6
 8007550:	dbe7      	blt.n	8007522 <__gethex+0x442>
 8007552:	e7f0      	b.n	8007536 <__gethex+0x456>
 8007554:	080093c5 	.word	0x080093c5

08007558 <L_shift>:
 8007558:	f1c2 0208 	rsb	r2, r2, #8
 800755c:	0092      	lsls	r2, r2, #2
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	f1c2 0620 	rsb	r6, r2, #32
 8007564:	6843      	ldr	r3, [r0, #4]
 8007566:	6804      	ldr	r4, [r0, #0]
 8007568:	fa03 f506 	lsl.w	r5, r3, r6
 800756c:	432c      	orrs	r4, r5
 800756e:	40d3      	lsrs	r3, r2
 8007570:	6004      	str	r4, [r0, #0]
 8007572:	f840 3f04 	str.w	r3, [r0, #4]!
 8007576:	4288      	cmp	r0, r1
 8007578:	d3f4      	bcc.n	8007564 <L_shift+0xc>
 800757a:	bd70      	pop	{r4, r5, r6, pc}

0800757c <__match>:
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	6803      	ldr	r3, [r0, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007586:	b914      	cbnz	r4, 800758e <__match+0x12>
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	2001      	movs	r0, #1
 800758c:	bd30      	pop	{r4, r5, pc}
 800758e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007592:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007596:	2d19      	cmp	r5, #25
 8007598:	bf98      	it	ls
 800759a:	3220      	addls	r2, #32
 800759c:	42a2      	cmp	r2, r4
 800759e:	d0f0      	beq.n	8007582 <__match+0x6>
 80075a0:	2000      	movs	r0, #0
 80075a2:	e7f3      	b.n	800758c <__match+0x10>

080075a4 <__hexnan>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	2500      	movs	r5, #0
 80075aa:	680b      	ldr	r3, [r1, #0]
 80075ac:	4682      	mov	sl, r0
 80075ae:	115e      	asrs	r6, r3, #5
 80075b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075b4:	f013 031f 	ands.w	r3, r3, #31
 80075b8:	bf18      	it	ne
 80075ba:	3604      	addne	r6, #4
 80075bc:	1f37      	subs	r7, r6, #4
 80075be:	46b9      	mov	r9, r7
 80075c0:	463c      	mov	r4, r7
 80075c2:	46ab      	mov	fp, r5
 80075c4:	b087      	sub	sp, #28
 80075c6:	4690      	mov	r8, r2
 80075c8:	6802      	ldr	r2, [r0, #0]
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80075d0:	9502      	str	r5, [sp, #8]
 80075d2:	7851      	ldrb	r1, [r2, #1]
 80075d4:	1c53      	adds	r3, r2, #1
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	b341      	cbz	r1, 800762c <__hexnan+0x88>
 80075da:	4608      	mov	r0, r1
 80075dc:	9205      	str	r2, [sp, #20]
 80075de:	9104      	str	r1, [sp, #16]
 80075e0:	f7ff fd69 	bl	80070b6 <__hexdig_fun>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d14f      	bne.n	8007688 <__hexnan+0xe4>
 80075e8:	9904      	ldr	r1, [sp, #16]
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	2920      	cmp	r1, #32
 80075ee:	d818      	bhi.n	8007622 <__hexnan+0x7e>
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	459b      	cmp	fp, r3
 80075f4:	dd13      	ble.n	800761e <__hexnan+0x7a>
 80075f6:	454c      	cmp	r4, r9
 80075f8:	d206      	bcs.n	8007608 <__hexnan+0x64>
 80075fa:	2d07      	cmp	r5, #7
 80075fc:	dc04      	bgt.n	8007608 <__hexnan+0x64>
 80075fe:	462a      	mov	r2, r5
 8007600:	4649      	mov	r1, r9
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff ffa8 	bl	8007558 <L_shift>
 8007608:	4544      	cmp	r4, r8
 800760a:	d950      	bls.n	80076ae <__hexnan+0x10a>
 800760c:	2300      	movs	r3, #0
 800760e:	f1a4 0904 	sub.w	r9, r4, #4
 8007612:	f844 3c04 	str.w	r3, [r4, #-4]
 8007616:	461d      	mov	r5, r3
 8007618:	464c      	mov	r4, r9
 800761a:	f8cd b008 	str.w	fp, [sp, #8]
 800761e:	9a03      	ldr	r2, [sp, #12]
 8007620:	e7d7      	b.n	80075d2 <__hexnan+0x2e>
 8007622:	2929      	cmp	r1, #41	; 0x29
 8007624:	d156      	bne.n	80076d4 <__hexnan+0x130>
 8007626:	3202      	adds	r2, #2
 8007628:	f8ca 2000 	str.w	r2, [sl]
 800762c:	f1bb 0f00 	cmp.w	fp, #0
 8007630:	d050      	beq.n	80076d4 <__hexnan+0x130>
 8007632:	454c      	cmp	r4, r9
 8007634:	d206      	bcs.n	8007644 <__hexnan+0xa0>
 8007636:	2d07      	cmp	r5, #7
 8007638:	dc04      	bgt.n	8007644 <__hexnan+0xa0>
 800763a:	462a      	mov	r2, r5
 800763c:	4649      	mov	r1, r9
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff ff8a 	bl	8007558 <L_shift>
 8007644:	4544      	cmp	r4, r8
 8007646:	d934      	bls.n	80076b2 <__hexnan+0x10e>
 8007648:	4623      	mov	r3, r4
 800764a:	f1a8 0204 	sub.w	r2, r8, #4
 800764e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007652:	429f      	cmp	r7, r3
 8007654:	f842 1f04 	str.w	r1, [r2, #4]!
 8007658:	d2f9      	bcs.n	800764e <__hexnan+0xaa>
 800765a:	1b3b      	subs	r3, r7, r4
 800765c:	f023 0303 	bic.w	r3, r3, #3
 8007660:	3304      	adds	r3, #4
 8007662:	3401      	adds	r4, #1
 8007664:	3e03      	subs	r6, #3
 8007666:	42b4      	cmp	r4, r6
 8007668:	bf88      	it	hi
 800766a:	2304      	movhi	r3, #4
 800766c:	2200      	movs	r2, #0
 800766e:	4443      	add	r3, r8
 8007670:	f843 2b04 	str.w	r2, [r3], #4
 8007674:	429f      	cmp	r7, r3
 8007676:	d2fb      	bcs.n	8007670 <__hexnan+0xcc>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	b91b      	cbnz	r3, 8007684 <__hexnan+0xe0>
 800767c:	4547      	cmp	r7, r8
 800767e:	d127      	bne.n	80076d0 <__hexnan+0x12c>
 8007680:	2301      	movs	r3, #1
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	2005      	movs	r0, #5
 8007686:	e026      	b.n	80076d6 <__hexnan+0x132>
 8007688:	3501      	adds	r5, #1
 800768a:	2d08      	cmp	r5, #8
 800768c:	f10b 0b01 	add.w	fp, fp, #1
 8007690:	dd06      	ble.n	80076a0 <__hexnan+0xfc>
 8007692:	4544      	cmp	r4, r8
 8007694:	d9c3      	bls.n	800761e <__hexnan+0x7a>
 8007696:	2300      	movs	r3, #0
 8007698:	2501      	movs	r5, #1
 800769a:	f844 3c04 	str.w	r3, [r4, #-4]
 800769e:	3c04      	subs	r4, #4
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	f000 000f 	and.w	r0, r0, #15
 80076a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	e7b7      	b.n	800761e <__hexnan+0x7a>
 80076ae:	2508      	movs	r5, #8
 80076b0:	e7b5      	b.n	800761e <__hexnan+0x7a>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0df      	beq.n	8007678 <__hexnan+0xd4>
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	f1c3 0320 	rsb	r3, r3, #32
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076c8:	401a      	ands	r2, r3
 80076ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80076ce:	e7d3      	b.n	8007678 <__hexnan+0xd4>
 80076d0:	3f04      	subs	r7, #4
 80076d2:	e7d1      	b.n	8007678 <__hexnan+0xd4>
 80076d4:	2004      	movs	r0, #4
 80076d6:	b007      	add	sp, #28
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076dc <_localeconv_r>:
 80076dc:	4800      	ldr	r0, [pc, #0]	; (80076e0 <_localeconv_r+0x4>)
 80076de:	4770      	bx	lr
 80076e0:	20000168 	.word	0x20000168

080076e4 <malloc>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <malloc+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f000 bd65 	b.w	80081b8 <_malloc_r>
 80076ee:	bf00      	nop
 80076f0:	20000010 	.word	0x20000010

080076f4 <__ascii_mbtowc>:
 80076f4:	b082      	sub	sp, #8
 80076f6:	b901      	cbnz	r1, 80076fa <__ascii_mbtowc+0x6>
 80076f8:	a901      	add	r1, sp, #4
 80076fa:	b142      	cbz	r2, 800770e <__ascii_mbtowc+0x1a>
 80076fc:	b14b      	cbz	r3, 8007712 <__ascii_mbtowc+0x1e>
 80076fe:	7813      	ldrb	r3, [r2, #0]
 8007700:	600b      	str	r3, [r1, #0]
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	1e10      	subs	r0, r2, #0
 8007706:	bf18      	it	ne
 8007708:	2001      	movne	r0, #1
 800770a:	b002      	add	sp, #8
 800770c:	4770      	bx	lr
 800770e:	4610      	mov	r0, r2
 8007710:	e7fb      	b.n	800770a <__ascii_mbtowc+0x16>
 8007712:	f06f 0001 	mvn.w	r0, #1
 8007716:	e7f8      	b.n	800770a <__ascii_mbtowc+0x16>

08007718 <memchr>:
 8007718:	4603      	mov	r3, r0
 800771a:	b510      	push	{r4, lr}
 800771c:	b2c9      	uxtb	r1, r1
 800771e:	4402      	add	r2, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	4618      	mov	r0, r3
 8007724:	d101      	bne.n	800772a <memchr+0x12>
 8007726:	2000      	movs	r0, #0
 8007728:	e003      	b.n	8007732 <memchr+0x1a>
 800772a:	7804      	ldrb	r4, [r0, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	428c      	cmp	r4, r1
 8007730:	d1f6      	bne.n	8007720 <memchr+0x8>
 8007732:	bd10      	pop	{r4, pc}

08007734 <memcpy>:
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	f100 33ff 	add.w	r3, r0, #4294967295
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	4770      	bx	lr
 8007740:	b510      	push	{r4, lr}
 8007742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007746:	4291      	cmp	r1, r2
 8007748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774c:	d1f9      	bne.n	8007742 <memcpy+0xe>
 800774e:	bd10      	pop	{r4, pc}

08007750 <_Balloc>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007754:	4604      	mov	r4, r0
 8007756:	460d      	mov	r5, r1
 8007758:	b976      	cbnz	r6, 8007778 <_Balloc+0x28>
 800775a:	2010      	movs	r0, #16
 800775c:	f7ff ffc2 	bl	80076e4 <malloc>
 8007760:	4602      	mov	r2, r0
 8007762:	6260      	str	r0, [r4, #36]	; 0x24
 8007764:	b920      	cbnz	r0, 8007770 <_Balloc+0x20>
 8007766:	2166      	movs	r1, #102	; 0x66
 8007768:	4b17      	ldr	r3, [pc, #92]	; (80077c8 <_Balloc+0x78>)
 800776a:	4818      	ldr	r0, [pc, #96]	; (80077cc <_Balloc+0x7c>)
 800776c:	f7fe fda4 	bl	80062b8 <__assert_func>
 8007770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007774:	6006      	str	r6, [r0, #0]
 8007776:	60c6      	str	r6, [r0, #12]
 8007778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800777a:	68f3      	ldr	r3, [r6, #12]
 800777c:	b183      	cbz	r3, 80077a0 <_Balloc+0x50>
 800777e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007786:	b9b8      	cbnz	r0, 80077b8 <_Balloc+0x68>
 8007788:	2101      	movs	r1, #1
 800778a:	fa01 f605 	lsl.w	r6, r1, r5
 800778e:	1d72      	adds	r2, r6, #5
 8007790:	4620      	mov	r0, r4
 8007792:	0092      	lsls	r2, r2, #2
 8007794:	f000 fc94 	bl	80080c0 <_calloc_r>
 8007798:	b160      	cbz	r0, 80077b4 <_Balloc+0x64>
 800779a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800779e:	e00e      	b.n	80077be <_Balloc+0x6e>
 80077a0:	2221      	movs	r2, #33	; 0x21
 80077a2:	2104      	movs	r1, #4
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fc8b 	bl	80080c0 <_calloc_r>
 80077aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ac:	60f0      	str	r0, [r6, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e4      	bne.n	800777e <_Balloc+0x2e>
 80077b4:	2000      	movs	r0, #0
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	6802      	ldr	r2, [r0, #0]
 80077ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077be:	2300      	movs	r3, #0
 80077c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077c4:	e7f7      	b.n	80077b6 <_Balloc+0x66>
 80077c6:	bf00      	nop
 80077c8:	0800915d 	.word	0x0800915d
 80077cc:	08009450 	.word	0x08009450

080077d0 <_Bfree>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b976      	cbnz	r6, 80077f8 <_Bfree+0x28>
 80077da:	2010      	movs	r0, #16
 80077dc:	f7ff ff82 	bl	80076e4 <malloc>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6268      	str	r0, [r5, #36]	; 0x24
 80077e4:	b920      	cbnz	r0, 80077f0 <_Bfree+0x20>
 80077e6:	218a      	movs	r1, #138	; 0x8a
 80077e8:	4b08      	ldr	r3, [pc, #32]	; (800780c <_Bfree+0x3c>)
 80077ea:	4809      	ldr	r0, [pc, #36]	; (8007810 <_Bfree+0x40>)
 80077ec:	f7fe fd64 	bl	80062b8 <__assert_func>
 80077f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f4:	6006      	str	r6, [r0, #0]
 80077f6:	60c6      	str	r6, [r0, #12]
 80077f8:	b13c      	cbz	r4, 800780a <_Bfree+0x3a>
 80077fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007804:	6021      	str	r1, [r4, #0]
 8007806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	0800915d 	.word	0x0800915d
 8007810:	08009450 	.word	0x08009450

08007814 <__multadd>:
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	4607      	mov	r7, r0
 800781a:	460c      	mov	r4, r1
 800781c:	461e      	mov	r6, r3
 800781e:	2000      	movs	r0, #0
 8007820:	690d      	ldr	r5, [r1, #16]
 8007822:	f101 0c14 	add.w	ip, r1, #20
 8007826:	f8dc 3000 	ldr.w	r3, [ip]
 800782a:	3001      	adds	r0, #1
 800782c:	b299      	uxth	r1, r3
 800782e:	fb02 6101 	mla	r1, r2, r1, r6
 8007832:	0c1e      	lsrs	r6, r3, #16
 8007834:	0c0b      	lsrs	r3, r1, #16
 8007836:	fb02 3306 	mla	r3, r2, r6, r3
 800783a:	b289      	uxth	r1, r1
 800783c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007840:	4285      	cmp	r5, r0
 8007842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007846:	f84c 1b04 	str.w	r1, [ip], #4
 800784a:	dcec      	bgt.n	8007826 <__multadd+0x12>
 800784c:	b30e      	cbz	r6, 8007892 <__multadd+0x7e>
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	42ab      	cmp	r3, r5
 8007852:	dc19      	bgt.n	8007888 <__multadd+0x74>
 8007854:	6861      	ldr	r1, [r4, #4]
 8007856:	4638      	mov	r0, r7
 8007858:	3101      	adds	r1, #1
 800785a:	f7ff ff79 	bl	8007750 <_Balloc>
 800785e:	4680      	mov	r8, r0
 8007860:	b928      	cbnz	r0, 800786e <__multadd+0x5a>
 8007862:	4602      	mov	r2, r0
 8007864:	21b5      	movs	r1, #181	; 0xb5
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <__multadd+0x84>)
 8007868:	480c      	ldr	r0, [pc, #48]	; (800789c <__multadd+0x88>)
 800786a:	f7fe fd25 	bl	80062b8 <__assert_func>
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	f104 010c 	add.w	r1, r4, #12
 8007874:	3202      	adds	r2, #2
 8007876:	0092      	lsls	r2, r2, #2
 8007878:	300c      	adds	r0, #12
 800787a:	f7ff ff5b 	bl	8007734 <memcpy>
 800787e:	4621      	mov	r1, r4
 8007880:	4638      	mov	r0, r7
 8007882:	f7ff ffa5 	bl	80077d0 <_Bfree>
 8007886:	4644      	mov	r4, r8
 8007888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800788c:	3501      	adds	r5, #1
 800788e:	615e      	str	r6, [r3, #20]
 8007890:	6125      	str	r5, [r4, #16]
 8007892:	4620      	mov	r0, r4
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	080093c5 	.word	0x080093c5
 800789c:	08009450 	.word	0x08009450

080078a0 <__s2b>:
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	4615      	mov	r5, r2
 80078a6:	2209      	movs	r2, #9
 80078a8:	461f      	mov	r7, r3
 80078aa:	3308      	adds	r3, #8
 80078ac:	460c      	mov	r4, r1
 80078ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80078b2:	4606      	mov	r6, r0
 80078b4:	2201      	movs	r2, #1
 80078b6:	2100      	movs	r1, #0
 80078b8:	429a      	cmp	r2, r3
 80078ba:	db09      	blt.n	80078d0 <__s2b+0x30>
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff ff47 	bl	8007750 <_Balloc>
 80078c2:	b940      	cbnz	r0, 80078d6 <__s2b+0x36>
 80078c4:	4602      	mov	r2, r0
 80078c6:	21ce      	movs	r1, #206	; 0xce
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <__s2b+0x8c>)
 80078ca:	4819      	ldr	r0, [pc, #100]	; (8007930 <__s2b+0x90>)
 80078cc:	f7fe fcf4 	bl	80062b8 <__assert_func>
 80078d0:	0052      	lsls	r2, r2, #1
 80078d2:	3101      	adds	r1, #1
 80078d4:	e7f0      	b.n	80078b8 <__s2b+0x18>
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	2d09      	cmp	r5, #9
 80078da:	6143      	str	r3, [r0, #20]
 80078dc:	f04f 0301 	mov.w	r3, #1
 80078e0:	6103      	str	r3, [r0, #16]
 80078e2:	dd16      	ble.n	8007912 <__s2b+0x72>
 80078e4:	f104 0909 	add.w	r9, r4, #9
 80078e8:	46c8      	mov	r8, r9
 80078ea:	442c      	add	r4, r5
 80078ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078f0:	4601      	mov	r1, r0
 80078f2:	220a      	movs	r2, #10
 80078f4:	4630      	mov	r0, r6
 80078f6:	3b30      	subs	r3, #48	; 0x30
 80078f8:	f7ff ff8c 	bl	8007814 <__multadd>
 80078fc:	45a0      	cmp	r8, r4
 80078fe:	d1f5      	bne.n	80078ec <__s2b+0x4c>
 8007900:	f1a5 0408 	sub.w	r4, r5, #8
 8007904:	444c      	add	r4, r9
 8007906:	1b2d      	subs	r5, r5, r4
 8007908:	1963      	adds	r3, r4, r5
 800790a:	42bb      	cmp	r3, r7
 800790c:	db04      	blt.n	8007918 <__s2b+0x78>
 800790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007912:	2509      	movs	r5, #9
 8007914:	340a      	adds	r4, #10
 8007916:	e7f6      	b.n	8007906 <__s2b+0x66>
 8007918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800791c:	4601      	mov	r1, r0
 800791e:	220a      	movs	r2, #10
 8007920:	4630      	mov	r0, r6
 8007922:	3b30      	subs	r3, #48	; 0x30
 8007924:	f7ff ff76 	bl	8007814 <__multadd>
 8007928:	e7ee      	b.n	8007908 <__s2b+0x68>
 800792a:	bf00      	nop
 800792c:	080093c5 	.word	0x080093c5
 8007930:	08009450 	.word	0x08009450

08007934 <__hi0bits>:
 8007934:	0c02      	lsrs	r2, r0, #16
 8007936:	0412      	lsls	r2, r2, #16
 8007938:	4603      	mov	r3, r0
 800793a:	b9ca      	cbnz	r2, 8007970 <__hi0bits+0x3c>
 800793c:	0403      	lsls	r3, r0, #16
 800793e:	2010      	movs	r0, #16
 8007940:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007944:	bf04      	itt	eq
 8007946:	021b      	lsleq	r3, r3, #8
 8007948:	3008      	addeq	r0, #8
 800794a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800794e:	bf04      	itt	eq
 8007950:	011b      	lsleq	r3, r3, #4
 8007952:	3004      	addeq	r0, #4
 8007954:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007958:	bf04      	itt	eq
 800795a:	009b      	lsleq	r3, r3, #2
 800795c:	3002      	addeq	r0, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	db05      	blt.n	800796e <__hi0bits+0x3a>
 8007962:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007966:	f100 0001 	add.w	r0, r0, #1
 800796a:	bf08      	it	eq
 800796c:	2020      	moveq	r0, #32
 800796e:	4770      	bx	lr
 8007970:	2000      	movs	r0, #0
 8007972:	e7e5      	b.n	8007940 <__hi0bits+0xc>

08007974 <__lo0bits>:
 8007974:	6803      	ldr	r3, [r0, #0]
 8007976:	4602      	mov	r2, r0
 8007978:	f013 0007 	ands.w	r0, r3, #7
 800797c:	d00b      	beq.n	8007996 <__lo0bits+0x22>
 800797e:	07d9      	lsls	r1, r3, #31
 8007980:	d421      	bmi.n	80079c6 <__lo0bits+0x52>
 8007982:	0798      	lsls	r0, r3, #30
 8007984:	bf49      	itett	mi
 8007986:	085b      	lsrmi	r3, r3, #1
 8007988:	089b      	lsrpl	r3, r3, #2
 800798a:	2001      	movmi	r0, #1
 800798c:	6013      	strmi	r3, [r2, #0]
 800798e:	bf5c      	itt	pl
 8007990:	2002      	movpl	r0, #2
 8007992:	6013      	strpl	r3, [r2, #0]
 8007994:	4770      	bx	lr
 8007996:	b299      	uxth	r1, r3
 8007998:	b909      	cbnz	r1, 800799e <__lo0bits+0x2a>
 800799a:	2010      	movs	r0, #16
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	b2d9      	uxtb	r1, r3
 80079a0:	b909      	cbnz	r1, 80079a6 <__lo0bits+0x32>
 80079a2:	3008      	adds	r0, #8
 80079a4:	0a1b      	lsrs	r3, r3, #8
 80079a6:	0719      	lsls	r1, r3, #28
 80079a8:	bf04      	itt	eq
 80079aa:	091b      	lsreq	r3, r3, #4
 80079ac:	3004      	addeq	r0, #4
 80079ae:	0799      	lsls	r1, r3, #30
 80079b0:	bf04      	itt	eq
 80079b2:	089b      	lsreq	r3, r3, #2
 80079b4:	3002      	addeq	r0, #2
 80079b6:	07d9      	lsls	r1, r3, #31
 80079b8:	d403      	bmi.n	80079c2 <__lo0bits+0x4e>
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	f100 0001 	add.w	r0, r0, #1
 80079c0:	d003      	beq.n	80079ca <__lo0bits+0x56>
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	4770      	bx	lr
 80079c6:	2000      	movs	r0, #0
 80079c8:	4770      	bx	lr
 80079ca:	2020      	movs	r0, #32
 80079cc:	4770      	bx	lr
	...

080079d0 <__i2b>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	460c      	mov	r4, r1
 80079d4:	2101      	movs	r1, #1
 80079d6:	f7ff febb 	bl	8007750 <_Balloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	b928      	cbnz	r0, 80079ea <__i2b+0x1a>
 80079de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <__i2b+0x24>)
 80079e4:	4804      	ldr	r0, [pc, #16]	; (80079f8 <__i2b+0x28>)
 80079e6:	f7fe fc67 	bl	80062b8 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	6144      	str	r4, [r0, #20]
 80079ee:	6103      	str	r3, [r0, #16]
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	080093c5 	.word	0x080093c5
 80079f8:	08009450 	.word	0x08009450

080079fc <__multiply>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	4691      	mov	r9, r2
 8007a02:	690a      	ldr	r2, [r1, #16]
 8007a04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a08:	460c      	mov	r4, r1
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	bfbe      	ittt	lt
 8007a0e:	460b      	movlt	r3, r1
 8007a10:	464c      	movlt	r4, r9
 8007a12:	4699      	movlt	r9, r3
 8007a14:	6927      	ldr	r7, [r4, #16]
 8007a16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	6861      	ldr	r1, [r4, #4]
 8007a1e:	eb07 060a 	add.w	r6, r7, sl
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	b085      	sub	sp, #20
 8007a26:	bfb8      	it	lt
 8007a28:	3101      	addlt	r1, #1
 8007a2a:	f7ff fe91 	bl	8007750 <_Balloc>
 8007a2e:	b930      	cbnz	r0, 8007a3e <__multiply+0x42>
 8007a30:	4602      	mov	r2, r0
 8007a32:	f240 115d 	movw	r1, #349	; 0x15d
 8007a36:	4b43      	ldr	r3, [pc, #268]	; (8007b44 <__multiply+0x148>)
 8007a38:	4843      	ldr	r0, [pc, #268]	; (8007b48 <__multiply+0x14c>)
 8007a3a:	f7fe fc3d 	bl	80062b8 <__assert_func>
 8007a3e:	f100 0514 	add.w	r5, r0, #20
 8007a42:	462b      	mov	r3, r5
 8007a44:	2200      	movs	r2, #0
 8007a46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a4a:	4543      	cmp	r3, r8
 8007a4c:	d321      	bcc.n	8007a92 <__multiply+0x96>
 8007a4e:	f104 0314 	add.w	r3, r4, #20
 8007a52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a56:	f109 0314 	add.w	r3, r9, #20
 8007a5a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a5e:	9202      	str	r2, [sp, #8]
 8007a60:	1b3a      	subs	r2, r7, r4
 8007a62:	3a15      	subs	r2, #21
 8007a64:	f022 0203 	bic.w	r2, r2, #3
 8007a68:	3204      	adds	r2, #4
 8007a6a:	f104 0115 	add.w	r1, r4, #21
 8007a6e:	428f      	cmp	r7, r1
 8007a70:	bf38      	it	cc
 8007a72:	2204      	movcc	r2, #4
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	9a02      	ldr	r2, [sp, #8]
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d80c      	bhi.n	8007a98 <__multiply+0x9c>
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	dd03      	ble.n	8007a8a <__multiply+0x8e>
 8007a82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d059      	beq.n	8007b3e <__multiply+0x142>
 8007a8a:	6106      	str	r6, [r0, #16]
 8007a8c:	b005      	add	sp, #20
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	f843 2b04 	str.w	r2, [r3], #4
 8007a96:	e7d8      	b.n	8007a4a <__multiply+0x4e>
 8007a98:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a9c:	f1ba 0f00 	cmp.w	sl, #0
 8007aa0:	d023      	beq.n	8007aea <__multiply+0xee>
 8007aa2:	46a9      	mov	r9, r5
 8007aa4:	f04f 0c00 	mov.w	ip, #0
 8007aa8:	f104 0e14 	add.w	lr, r4, #20
 8007aac:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ab0:	f8d9 1000 	ldr.w	r1, [r9]
 8007ab4:	fa1f fb82 	uxth.w	fp, r2
 8007ab8:	b289      	uxth	r1, r1
 8007aba:	fb0a 110b 	mla	r1, sl, fp, r1
 8007abe:	4461      	add	r1, ip
 8007ac0:	f8d9 c000 	ldr.w	ip, [r9]
 8007ac4:	0c12      	lsrs	r2, r2, #16
 8007ac6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007aca:	fb0a c202 	mla	r2, sl, r2, ip
 8007ace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ad2:	b289      	uxth	r1, r1
 8007ad4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ad8:	4577      	cmp	r7, lr
 8007ada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ade:	f849 1b04 	str.w	r1, [r9], #4
 8007ae2:	d8e3      	bhi.n	8007aac <__multiply+0xb0>
 8007ae4:	9a01      	ldr	r2, [sp, #4]
 8007ae6:	f845 c002 	str.w	ip, [r5, r2]
 8007aea:	9a03      	ldr	r2, [sp, #12]
 8007aec:	3304      	adds	r3, #4
 8007aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007af2:	f1b9 0f00 	cmp.w	r9, #0
 8007af6:	d020      	beq.n	8007b3a <__multiply+0x13e>
 8007af8:	46ae      	mov	lr, r5
 8007afa:	f04f 0a00 	mov.w	sl, #0
 8007afe:	6829      	ldr	r1, [r5, #0]
 8007b00:	f104 0c14 	add.w	ip, r4, #20
 8007b04:	f8bc b000 	ldrh.w	fp, [ip]
 8007b08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b0c:	b289      	uxth	r1, r1
 8007b0e:	fb09 220b 	mla	r2, r9, fp, r2
 8007b12:	4492      	add	sl, r2
 8007b14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b18:	f84e 1b04 	str.w	r1, [lr], #4
 8007b1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b20:	f8be 1000 	ldrh.w	r1, [lr]
 8007b24:	0c12      	lsrs	r2, r2, #16
 8007b26:	fb09 1102 	mla	r1, r9, r2, r1
 8007b2a:	4567      	cmp	r7, ip
 8007b2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b34:	d8e6      	bhi.n	8007b04 <__multiply+0x108>
 8007b36:	9a01      	ldr	r2, [sp, #4]
 8007b38:	50a9      	str	r1, [r5, r2]
 8007b3a:	3504      	adds	r5, #4
 8007b3c:	e79b      	b.n	8007a76 <__multiply+0x7a>
 8007b3e:	3e01      	subs	r6, #1
 8007b40:	e79d      	b.n	8007a7e <__multiply+0x82>
 8007b42:	bf00      	nop
 8007b44:	080093c5 	.word	0x080093c5
 8007b48:	08009450 	.word	0x08009450

08007b4c <__pow5mult>:
 8007b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b50:	4615      	mov	r5, r2
 8007b52:	f012 0203 	ands.w	r2, r2, #3
 8007b56:	4606      	mov	r6, r0
 8007b58:	460f      	mov	r7, r1
 8007b5a:	d007      	beq.n	8007b6c <__pow5mult+0x20>
 8007b5c:	4c25      	ldr	r4, [pc, #148]	; (8007bf4 <__pow5mult+0xa8>)
 8007b5e:	3a01      	subs	r2, #1
 8007b60:	2300      	movs	r3, #0
 8007b62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b66:	f7ff fe55 	bl	8007814 <__multadd>
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	10ad      	asrs	r5, r5, #2
 8007b6e:	d03d      	beq.n	8007bec <__pow5mult+0xa0>
 8007b70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b72:	b97c      	cbnz	r4, 8007b94 <__pow5mult+0x48>
 8007b74:	2010      	movs	r0, #16
 8007b76:	f7ff fdb5 	bl	80076e4 <malloc>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6270      	str	r0, [r6, #36]	; 0x24
 8007b7e:	b928      	cbnz	r0, 8007b8c <__pow5mult+0x40>
 8007b80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b84:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <__pow5mult+0xac>)
 8007b86:	481d      	ldr	r0, [pc, #116]	; (8007bfc <__pow5mult+0xb0>)
 8007b88:	f7fe fb96 	bl	80062b8 <__assert_func>
 8007b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b90:	6004      	str	r4, [r0, #0]
 8007b92:	60c4      	str	r4, [r0, #12]
 8007b94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b9c:	b94c      	cbnz	r4, 8007bb2 <__pow5mult+0x66>
 8007b9e:	f240 2171 	movw	r1, #625	; 0x271
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ff14 	bl	80079d0 <__i2b>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4604      	mov	r4, r0
 8007bac:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb0:	6003      	str	r3, [r0, #0]
 8007bb2:	f04f 0900 	mov.w	r9, #0
 8007bb6:	07eb      	lsls	r3, r5, #31
 8007bb8:	d50a      	bpl.n	8007bd0 <__pow5mult+0x84>
 8007bba:	4639      	mov	r1, r7
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ff1c 	bl	80079fc <__multiply>
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff fe01 	bl	80077d0 <_Bfree>
 8007bce:	4647      	mov	r7, r8
 8007bd0:	106d      	asrs	r5, r5, #1
 8007bd2:	d00b      	beq.n	8007bec <__pow5mult+0xa0>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	b938      	cbnz	r0, 8007be8 <__pow5mult+0x9c>
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7ff ff0d 	bl	80079fc <__multiply>
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	f8c0 9000 	str.w	r9, [r0]
 8007be8:	4604      	mov	r4, r0
 8007bea:	e7e4      	b.n	8007bb6 <__pow5mult+0x6a>
 8007bec:	4638      	mov	r0, r7
 8007bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	bf00      	nop
 8007bf4:	080095a0 	.word	0x080095a0
 8007bf8:	0800915d 	.word	0x0800915d
 8007bfc:	08009450 	.word	0x08009450

08007c00 <__lshift>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	4607      	mov	r7, r0
 8007c08:	4691      	mov	r9, r2
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6849      	ldr	r1, [r1, #4]
 8007c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c18:	f108 0601 	add.w	r6, r8, #1
 8007c1c:	42b3      	cmp	r3, r6
 8007c1e:	db0b      	blt.n	8007c38 <__lshift+0x38>
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff fd95 	bl	8007750 <_Balloc>
 8007c26:	4605      	mov	r5, r0
 8007c28:	b948      	cbnz	r0, 8007c3e <__lshift+0x3e>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c30:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <__lshift+0xd8>)
 8007c32:	482a      	ldr	r0, [pc, #168]	; (8007cdc <__lshift+0xdc>)
 8007c34:	f7fe fb40 	bl	80062b8 <__assert_func>
 8007c38:	3101      	adds	r1, #1
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	e7ee      	b.n	8007c1c <__lshift+0x1c>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f100 0114 	add.w	r1, r0, #20
 8007c44:	f100 0210 	add.w	r2, r0, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	4553      	cmp	r3, sl
 8007c4c:	db37      	blt.n	8007cbe <__lshift+0xbe>
 8007c4e:	6920      	ldr	r0, [r4, #16]
 8007c50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c54:	f104 0314 	add.w	r3, r4, #20
 8007c58:	f019 091f 	ands.w	r9, r9, #31
 8007c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c64:	d02f      	beq.n	8007cc6 <__lshift+0xc6>
 8007c66:	468a      	mov	sl, r1
 8007c68:	f04f 0c00 	mov.w	ip, #0
 8007c6c:	f1c9 0e20 	rsb	lr, r9, #32
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	fa02 f209 	lsl.w	r2, r2, r9
 8007c76:	ea42 020c 	orr.w	r2, r2, ip
 8007c7a:	f84a 2b04 	str.w	r2, [sl], #4
 8007c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c82:	4298      	cmp	r0, r3
 8007c84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c88:	d8f2      	bhi.n	8007c70 <__lshift+0x70>
 8007c8a:	1b03      	subs	r3, r0, r4
 8007c8c:	3b15      	subs	r3, #21
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	3304      	adds	r3, #4
 8007c94:	f104 0215 	add.w	r2, r4, #21
 8007c98:	4290      	cmp	r0, r2
 8007c9a:	bf38      	it	cc
 8007c9c:	2304      	movcc	r3, #4
 8007c9e:	f841 c003 	str.w	ip, [r1, r3]
 8007ca2:	f1bc 0f00 	cmp.w	ip, #0
 8007ca6:	d001      	beq.n	8007cac <__lshift+0xac>
 8007ca8:	f108 0602 	add.w	r6, r8, #2
 8007cac:	3e01      	subs	r6, #1
 8007cae:	4638      	mov	r0, r7
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	612e      	str	r6, [r5, #16]
 8007cb4:	f7ff fd8c 	bl	80077d0 <_Bfree>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7c1      	b.n	8007c4a <__lshift+0x4a>
 8007cc6:	3904      	subs	r1, #4
 8007cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ccc:	4298      	cmp	r0, r3
 8007cce:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cd2:	d8f9      	bhi.n	8007cc8 <__lshift+0xc8>
 8007cd4:	e7ea      	b.n	8007cac <__lshift+0xac>
 8007cd6:	bf00      	nop
 8007cd8:	080093c5 	.word	0x080093c5
 8007cdc:	08009450 	.word	0x08009450

08007ce0 <__mcmp>:
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	690a      	ldr	r2, [r1, #16]
 8007ce4:	6900      	ldr	r0, [r0, #16]
 8007ce6:	b530      	push	{r4, r5, lr}
 8007ce8:	1a80      	subs	r0, r0, r2
 8007cea:	d10d      	bne.n	8007d08 <__mcmp+0x28>
 8007cec:	3314      	adds	r3, #20
 8007cee:	3114      	adds	r1, #20
 8007cf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d00:	4295      	cmp	r5, r2
 8007d02:	d002      	beq.n	8007d0a <__mcmp+0x2a>
 8007d04:	d304      	bcc.n	8007d10 <__mcmp+0x30>
 8007d06:	2001      	movs	r0, #1
 8007d08:	bd30      	pop	{r4, r5, pc}
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	d3f4      	bcc.n	8007cf8 <__mcmp+0x18>
 8007d0e:	e7fb      	b.n	8007d08 <__mcmp+0x28>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e7f8      	b.n	8007d08 <__mcmp+0x28>
	...

08007d18 <__mdiff>:
 8007d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4611      	mov	r1, r2
 8007d22:	4628      	mov	r0, r5
 8007d24:	4614      	mov	r4, r2
 8007d26:	f7ff ffdb 	bl	8007ce0 <__mcmp>
 8007d2a:	1e06      	subs	r6, r0, #0
 8007d2c:	d111      	bne.n	8007d52 <__mdiff+0x3a>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff fd0d 	bl	8007750 <_Balloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__mdiff+0x2e>
 8007d3a:	f240 2132 	movw	r1, #562	; 0x232
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <__mdiff+0x110>)
 8007d40:	483a      	ldr	r0, [pc, #232]	; (8007e2c <__mdiff+0x114>)
 8007d42:	f7fe fab9 	bl	80062b8 <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	bfa4      	itt	ge
 8007d54:	4623      	movge	r3, r4
 8007d56:	462c      	movge	r4, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	6861      	ldr	r1, [r4, #4]
 8007d5c:	bfa6      	itte	ge
 8007d5e:	461d      	movge	r5, r3
 8007d60:	2600      	movge	r6, #0
 8007d62:	2601      	movlt	r6, #1
 8007d64:	f7ff fcf4 	bl	8007750 <_Balloc>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	b918      	cbnz	r0, 8007d74 <__mdiff+0x5c>
 8007d6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d70:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <__mdiff+0x110>)
 8007d72:	e7e5      	b.n	8007d40 <__mdiff+0x28>
 8007d74:	f102 0814 	add.w	r8, r2, #20
 8007d78:	46c2      	mov	sl, r8
 8007d7a:	f04f 0c00 	mov.w	ip, #0
 8007d7e:	6927      	ldr	r7, [r4, #16]
 8007d80:	60c6      	str	r6, [r0, #12]
 8007d82:	692e      	ldr	r6, [r5, #16]
 8007d84:	f104 0014 	add.w	r0, r4, #20
 8007d88:	f105 0914 	add.w	r9, r5, #20
 8007d8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d94:	3410      	adds	r4, #16
 8007d96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d9e:	fa1f f18b 	uxth.w	r1, fp
 8007da2:	448c      	add	ip, r1
 8007da4:	b299      	uxth	r1, r3
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	ebac 0101 	sub.w	r1, ip, r1
 8007dac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007db0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007db4:	b289      	uxth	r1, r1
 8007db6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007dba:	454e      	cmp	r6, r9
 8007dbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dc0:	f84a 3b04 	str.w	r3, [sl], #4
 8007dc4:	d8e7      	bhi.n	8007d96 <__mdiff+0x7e>
 8007dc6:	1b73      	subs	r3, r6, r5
 8007dc8:	3b15      	subs	r3, #21
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	3515      	adds	r5, #21
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	42ae      	cmp	r6, r5
 8007dd4:	bf38      	it	cc
 8007dd6:	2304      	movcc	r3, #4
 8007dd8:	4418      	add	r0, r3
 8007dda:	4443      	add	r3, r8
 8007ddc:	461e      	mov	r6, r3
 8007dde:	4605      	mov	r5, r0
 8007de0:	4575      	cmp	r5, lr
 8007de2:	d30e      	bcc.n	8007e02 <__mdiff+0xea>
 8007de4:	f10e 0103 	add.w	r1, lr, #3
 8007de8:	1a09      	subs	r1, r1, r0
 8007dea:	f021 0103 	bic.w	r1, r1, #3
 8007dee:	3803      	subs	r0, #3
 8007df0:	4586      	cmp	lr, r0
 8007df2:	bf38      	it	cc
 8007df4:	2100      	movcc	r1, #0
 8007df6:	4419      	add	r1, r3
 8007df8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007dfc:	b18b      	cbz	r3, 8007e22 <__mdiff+0x10a>
 8007dfe:	6117      	str	r7, [r2, #16]
 8007e00:	e7a4      	b.n	8007d4c <__mdiff+0x34>
 8007e02:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e06:	fa1f f188 	uxth.w	r1, r8
 8007e0a:	4461      	add	r1, ip
 8007e0c:	140c      	asrs	r4, r1, #16
 8007e0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e12:	b289      	uxth	r1, r1
 8007e14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e18:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e1c:	f846 1b04 	str.w	r1, [r6], #4
 8007e20:	e7de      	b.n	8007de0 <__mdiff+0xc8>
 8007e22:	3f01      	subs	r7, #1
 8007e24:	e7e8      	b.n	8007df8 <__mdiff+0xe0>
 8007e26:	bf00      	nop
 8007e28:	080093c5 	.word	0x080093c5
 8007e2c:	08009450 	.word	0x08009450

08007e30 <__ulp>:
 8007e30:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <__ulp+0x48>)
 8007e32:	400b      	ands	r3, r1
 8007e34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dd02      	ble.n	8007e42 <__ulp+0x12>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4770      	bx	lr
 8007e42:	425b      	negs	r3, r3
 8007e44:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e48:	f04f 0000 	mov.w	r0, #0
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e54:	da04      	bge.n	8007e60 <__ulp+0x30>
 8007e56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e5a:	fa43 f102 	asr.w	r1, r3, r2
 8007e5e:	4770      	bx	lr
 8007e60:	f1a2 0314 	sub.w	r3, r2, #20
 8007e64:	2b1e      	cmp	r3, #30
 8007e66:	bfd6      	itet	le
 8007e68:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e6c:	2301      	movgt	r3, #1
 8007e6e:	fa22 f303 	lsrle.w	r3, r2, r3
 8007e72:	4618      	mov	r0, r3
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	7ff00000 	.word	0x7ff00000

08007e7c <__b2d>:
 8007e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e80:	6907      	ldr	r7, [r0, #16]
 8007e82:	f100 0914 	add.w	r9, r0, #20
 8007e86:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007e8a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007e8e:	f1a7 0804 	sub.w	r8, r7, #4
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff fd4e 	bl	8007934 <__hi0bits>
 8007e98:	f1c0 0320 	rsb	r3, r0, #32
 8007e9c:	280a      	cmp	r0, #10
 8007e9e:	600b      	str	r3, [r1, #0]
 8007ea0:	491f      	ldr	r1, [pc, #124]	; (8007f20 <__b2d+0xa4>)
 8007ea2:	dc17      	bgt.n	8007ed4 <__b2d+0x58>
 8007ea4:	45c1      	cmp	r9, r8
 8007ea6:	bf28      	it	cs
 8007ea8:	2200      	movcs	r2, #0
 8007eaa:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eae:	fa26 f30c 	lsr.w	r3, r6, ip
 8007eb2:	bf38      	it	cc
 8007eb4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007eb8:	ea43 0501 	orr.w	r5, r3, r1
 8007ebc:	f100 0315 	add.w	r3, r0, #21
 8007ec0:	fa06 f303 	lsl.w	r3, r6, r3
 8007ec4:	fa22 f20c 	lsr.w	r2, r2, ip
 8007ec8:	ea43 0402 	orr.w	r4, r3, r2
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4629      	mov	r1, r5
 8007ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed4:	45c1      	cmp	r9, r8
 8007ed6:	bf2e      	itee	cs
 8007ed8:	2200      	movcs	r2, #0
 8007eda:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ede:	f1a7 0808 	subcc.w	r8, r7, #8
 8007ee2:	f1b0 030b 	subs.w	r3, r0, #11
 8007ee6:	d016      	beq.n	8007f16 <__b2d+0x9a>
 8007ee8:	f1c3 0720 	rsb	r7, r3, #32
 8007eec:	fa22 f107 	lsr.w	r1, r2, r7
 8007ef0:	45c8      	cmp	r8, r9
 8007ef2:	fa06 f603 	lsl.w	r6, r6, r3
 8007ef6:	ea46 0601 	orr.w	r6, r6, r1
 8007efa:	bf94      	ite	ls
 8007efc:	2100      	movls	r1, #0
 8007efe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007f02:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007f06:	fa02 f003 	lsl.w	r0, r2, r3
 8007f0a:	40f9      	lsrs	r1, r7
 8007f0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f10:	ea40 0401 	orr.w	r4, r0, r1
 8007f14:	e7da      	b.n	8007ecc <__b2d+0x50>
 8007f16:	4614      	mov	r4, r2
 8007f18:	ea46 0501 	orr.w	r5, r6, r1
 8007f1c:	e7d6      	b.n	8007ecc <__b2d+0x50>
 8007f1e:	bf00      	nop
 8007f20:	3ff00000 	.word	0x3ff00000

08007f24 <__d2b>:
 8007f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f28:	2101      	movs	r1, #1
 8007f2a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f2e:	4690      	mov	r8, r2
 8007f30:	461d      	mov	r5, r3
 8007f32:	f7ff fc0d 	bl	8007750 <_Balloc>
 8007f36:	4604      	mov	r4, r0
 8007f38:	b930      	cbnz	r0, 8007f48 <__d2b+0x24>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	f240 310a 	movw	r1, #778	; 0x30a
 8007f40:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <__d2b+0xb0>)
 8007f42:	4825      	ldr	r0, [pc, #148]	; (8007fd8 <__d2b+0xb4>)
 8007f44:	f7fe f9b8 	bl	80062b8 <__assert_func>
 8007f48:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f4c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f50:	bb2d      	cbnz	r5, 8007f9e <__d2b+0x7a>
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	f1b8 0300 	subs.w	r3, r8, #0
 8007f58:	d026      	beq.n	8007fa8 <__d2b+0x84>
 8007f5a:	4668      	mov	r0, sp
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f7ff fd09 	bl	8007974 <__lo0bits>
 8007f62:	9900      	ldr	r1, [sp, #0]
 8007f64:	b1f0      	cbz	r0, 8007fa4 <__d2b+0x80>
 8007f66:	9a01      	ldr	r2, [sp, #4]
 8007f68:	f1c0 0320 	rsb	r3, r0, #32
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	430b      	orrs	r3, r1
 8007f72:	40c2      	lsrs	r2, r0
 8007f74:	6163      	str	r3, [r4, #20]
 8007f76:	9201      	str	r2, [sp, #4]
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bf14      	ite	ne
 8007f7e:	2102      	movne	r1, #2
 8007f80:	2101      	moveq	r1, #1
 8007f82:	61a3      	str	r3, [r4, #24]
 8007f84:	6121      	str	r1, [r4, #16]
 8007f86:	b1c5      	cbz	r5, 8007fba <__d2b+0x96>
 8007f88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f8c:	4405      	add	r5, r0
 8007f8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f92:	603d      	str	r5, [r7, #0]
 8007f94:	6030      	str	r0, [r6, #0]
 8007f96:	4620      	mov	r0, r4
 8007f98:	b002      	add	sp, #8
 8007f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fa2:	e7d6      	b.n	8007f52 <__d2b+0x2e>
 8007fa4:	6161      	str	r1, [r4, #20]
 8007fa6:	e7e7      	b.n	8007f78 <__d2b+0x54>
 8007fa8:	a801      	add	r0, sp, #4
 8007faa:	f7ff fce3 	bl	8007974 <__lo0bits>
 8007fae:	2101      	movs	r1, #1
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	6121      	str	r1, [r4, #16]
 8007fb4:	6163      	str	r3, [r4, #20]
 8007fb6:	3020      	adds	r0, #32
 8007fb8:	e7e5      	b.n	8007f86 <__d2b+0x62>
 8007fba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007fbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fc2:	6038      	str	r0, [r7, #0]
 8007fc4:	6918      	ldr	r0, [r3, #16]
 8007fc6:	f7ff fcb5 	bl	8007934 <__hi0bits>
 8007fca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	e7e1      	b.n	8007f96 <__d2b+0x72>
 8007fd2:	bf00      	nop
 8007fd4:	080093c5 	.word	0x080093c5
 8007fd8:	08009450 	.word	0x08009450

08007fdc <__ratio>:
 8007fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	4688      	mov	r8, r1
 8007fe2:	4669      	mov	r1, sp
 8007fe4:	4681      	mov	r9, r0
 8007fe6:	f7ff ff49 	bl	8007e7c <__b2d>
 8007fea:	460f      	mov	r7, r1
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	a901      	add	r1, sp, #4
 8007ff4:	f7ff ff42 	bl	8007e7c <__b2d>
 8007ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ffc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008000:	468b      	mov	fp, r1
 8008002:	eba3 0c02 	sub.w	ip, r3, r2
 8008006:	e9dd 3200 	ldrd	r3, r2, [sp]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008010:	2b00      	cmp	r3, #0
 8008012:	bfd5      	itete	le
 8008014:	460a      	movle	r2, r1
 8008016:	462a      	movgt	r2, r5
 8008018:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800801c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008020:	bfd8      	it	le
 8008022:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008026:	465b      	mov	r3, fp
 8008028:	4602      	mov	r2, r0
 800802a:	4639      	mov	r1, r7
 800802c:	4620      	mov	r0, r4
 800802e:	f7f8 fb7d 	bl	800072c <__aeabi_ddiv>
 8008032:	b003      	add	sp, #12
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008038 <__copybits>:
 8008038:	3901      	subs	r1, #1
 800803a:	b570      	push	{r4, r5, r6, lr}
 800803c:	1149      	asrs	r1, r1, #5
 800803e:	6914      	ldr	r4, [r2, #16]
 8008040:	3101      	adds	r1, #1
 8008042:	f102 0314 	add.w	r3, r2, #20
 8008046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800804a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800804e:	1f05      	subs	r5, r0, #4
 8008050:	42a3      	cmp	r3, r4
 8008052:	d30c      	bcc.n	800806e <__copybits+0x36>
 8008054:	1aa3      	subs	r3, r4, r2
 8008056:	3b11      	subs	r3, #17
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	3211      	adds	r2, #17
 800805e:	42a2      	cmp	r2, r4
 8008060:	bf88      	it	hi
 8008062:	2300      	movhi	r3, #0
 8008064:	4418      	add	r0, r3
 8008066:	2300      	movs	r3, #0
 8008068:	4288      	cmp	r0, r1
 800806a:	d305      	bcc.n	8008078 <__copybits+0x40>
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008072:	f845 6f04 	str.w	r6, [r5, #4]!
 8008076:	e7eb      	b.n	8008050 <__copybits+0x18>
 8008078:	f840 3b04 	str.w	r3, [r0], #4
 800807c:	e7f4      	b.n	8008068 <__copybits+0x30>

0800807e <__any_on>:
 800807e:	f100 0214 	add.w	r2, r0, #20
 8008082:	6900      	ldr	r0, [r0, #16]
 8008084:	114b      	asrs	r3, r1, #5
 8008086:	4298      	cmp	r0, r3
 8008088:	b510      	push	{r4, lr}
 800808a:	db11      	blt.n	80080b0 <__any_on+0x32>
 800808c:	dd0a      	ble.n	80080a4 <__any_on+0x26>
 800808e:	f011 011f 	ands.w	r1, r1, #31
 8008092:	d007      	beq.n	80080a4 <__any_on+0x26>
 8008094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008098:	fa24 f001 	lsr.w	r0, r4, r1
 800809c:	fa00 f101 	lsl.w	r1, r0, r1
 80080a0:	428c      	cmp	r4, r1
 80080a2:	d10b      	bne.n	80080bc <__any_on+0x3e>
 80080a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d803      	bhi.n	80080b4 <__any_on+0x36>
 80080ac:	2000      	movs	r0, #0
 80080ae:	bd10      	pop	{r4, pc}
 80080b0:	4603      	mov	r3, r0
 80080b2:	e7f7      	b.n	80080a4 <__any_on+0x26>
 80080b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d0f5      	beq.n	80080a8 <__any_on+0x2a>
 80080bc:	2001      	movs	r0, #1
 80080be:	e7f6      	b.n	80080ae <__any_on+0x30>

080080c0 <_calloc_r>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	fba1 5402 	umull	r5, r4, r1, r2
 80080c6:	b934      	cbnz	r4, 80080d6 <_calloc_r+0x16>
 80080c8:	4629      	mov	r1, r5
 80080ca:	f000 f875 	bl	80081b8 <_malloc_r>
 80080ce:	4606      	mov	r6, r0
 80080d0:	b928      	cbnz	r0, 80080de <_calloc_r+0x1e>
 80080d2:	4630      	mov	r0, r6
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
 80080d6:	220c      	movs	r2, #12
 80080d8:	2600      	movs	r6, #0
 80080da:	6002      	str	r2, [r0, #0]
 80080dc:	e7f9      	b.n	80080d2 <_calloc_r+0x12>
 80080de:	462a      	mov	r2, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	f7fc fb83 	bl	80047ec <memset>
 80080e6:	e7f4      	b.n	80080d2 <_calloc_r+0x12>

080080e8 <_free_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d040      	beq.n	8008172 <_free_r+0x8a>
 80080f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f4:	1f0c      	subs	r4, r1, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	18e4      	addlt	r4, r4, r3
 80080fc:	f000 feba 	bl	8008e74 <__malloc_lock>
 8008100:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <_free_r+0x8c>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	b933      	cbnz	r3, 8008114 <_free_r+0x2c>
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	6014      	str	r4, [r2, #0]
 800810a:	4628      	mov	r0, r5
 800810c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008110:	f000 beb6 	b.w	8008e80 <__malloc_unlock>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d908      	bls.n	800812a <_free_r+0x42>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	1821      	adds	r1, r4, r0
 800811c:	428b      	cmp	r3, r1
 800811e:	bf01      	itttt	eq
 8008120:	6819      	ldreq	r1, [r3, #0]
 8008122:	685b      	ldreq	r3, [r3, #4]
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	e7ed      	b.n	8008106 <_free_r+0x1e>
 800812a:	461a      	mov	r2, r3
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	b10b      	cbz	r3, 8008134 <_free_r+0x4c>
 8008130:	42a3      	cmp	r3, r4
 8008132:	d9fa      	bls.n	800812a <_free_r+0x42>
 8008134:	6811      	ldr	r1, [r2, #0]
 8008136:	1850      	adds	r0, r2, r1
 8008138:	42a0      	cmp	r0, r4
 800813a:	d10b      	bne.n	8008154 <_free_r+0x6c>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	4401      	add	r1, r0
 8008140:	1850      	adds	r0, r2, r1
 8008142:	4283      	cmp	r3, r0
 8008144:	6011      	str	r1, [r2, #0]
 8008146:	d1e0      	bne.n	800810a <_free_r+0x22>
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4401      	add	r1, r0
 800814e:	6011      	str	r1, [r2, #0]
 8008150:	6053      	str	r3, [r2, #4]
 8008152:	e7da      	b.n	800810a <_free_r+0x22>
 8008154:	d902      	bls.n	800815c <_free_r+0x74>
 8008156:	230c      	movs	r3, #12
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	e7d6      	b.n	800810a <_free_r+0x22>
 800815c:	6820      	ldr	r0, [r4, #0]
 800815e:	1821      	adds	r1, r4, r0
 8008160:	428b      	cmp	r3, r1
 8008162:	bf01      	itttt	eq
 8008164:	6819      	ldreq	r1, [r3, #0]
 8008166:	685b      	ldreq	r3, [r3, #4]
 8008168:	1809      	addeq	r1, r1, r0
 800816a:	6021      	streq	r1, [r4, #0]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	6054      	str	r4, [r2, #4]
 8008170:	e7cb      	b.n	800810a <_free_r+0x22>
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	200003a4 	.word	0x200003a4

08008178 <sbrk_aligned>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	4e0e      	ldr	r6, [pc, #56]	; (80081b4 <sbrk_aligned+0x3c>)
 800817c:	460c      	mov	r4, r1
 800817e:	6831      	ldr	r1, [r6, #0]
 8008180:	4605      	mov	r5, r0
 8008182:	b911      	cbnz	r1, 800818a <sbrk_aligned+0x12>
 8008184:	f000 fb46 	bl	8008814 <_sbrk_r>
 8008188:	6030      	str	r0, [r6, #0]
 800818a:	4621      	mov	r1, r4
 800818c:	4628      	mov	r0, r5
 800818e:	f000 fb41 	bl	8008814 <_sbrk_r>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d00a      	beq.n	80081ac <sbrk_aligned+0x34>
 8008196:	1cc4      	adds	r4, r0, #3
 8008198:	f024 0403 	bic.w	r4, r4, #3
 800819c:	42a0      	cmp	r0, r4
 800819e:	d007      	beq.n	80081b0 <sbrk_aligned+0x38>
 80081a0:	1a21      	subs	r1, r4, r0
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 fb36 	bl	8008814 <_sbrk_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d101      	bne.n	80081b0 <sbrk_aligned+0x38>
 80081ac:	f04f 34ff 	mov.w	r4, #4294967295
 80081b0:	4620      	mov	r0, r4
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	200003a8 	.word	0x200003a8

080081b8 <_malloc_r>:
 80081b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	1ccd      	adds	r5, r1, #3
 80081be:	f025 0503 	bic.w	r5, r5, #3
 80081c2:	3508      	adds	r5, #8
 80081c4:	2d0c      	cmp	r5, #12
 80081c6:	bf38      	it	cc
 80081c8:	250c      	movcc	r5, #12
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	4607      	mov	r7, r0
 80081ce:	db01      	blt.n	80081d4 <_malloc_r+0x1c>
 80081d0:	42a9      	cmp	r1, r5
 80081d2:	d905      	bls.n	80081e0 <_malloc_r+0x28>
 80081d4:	230c      	movs	r3, #12
 80081d6:	2600      	movs	r6, #0
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	4630      	mov	r0, r6
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	4e2e      	ldr	r6, [pc, #184]	; (800829c <_malloc_r+0xe4>)
 80081e2:	f000 fe47 	bl	8008e74 <__malloc_lock>
 80081e6:	6833      	ldr	r3, [r6, #0]
 80081e8:	461c      	mov	r4, r3
 80081ea:	bb34      	cbnz	r4, 800823a <_malloc_r+0x82>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4638      	mov	r0, r7
 80081f0:	f7ff ffc2 	bl	8008178 <sbrk_aligned>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	4604      	mov	r4, r0
 80081f8:	d14d      	bne.n	8008296 <_malloc_r+0xde>
 80081fa:	6834      	ldr	r4, [r6, #0]
 80081fc:	4626      	mov	r6, r4
 80081fe:	2e00      	cmp	r6, #0
 8008200:	d140      	bne.n	8008284 <_malloc_r+0xcc>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	4631      	mov	r1, r6
 8008206:	4638      	mov	r0, r7
 8008208:	eb04 0803 	add.w	r8, r4, r3
 800820c:	f000 fb02 	bl	8008814 <_sbrk_r>
 8008210:	4580      	cmp	r8, r0
 8008212:	d13a      	bne.n	800828a <_malloc_r+0xd2>
 8008214:	6821      	ldr	r1, [r4, #0]
 8008216:	3503      	adds	r5, #3
 8008218:	1a6d      	subs	r5, r5, r1
 800821a:	f025 0503 	bic.w	r5, r5, #3
 800821e:	3508      	adds	r5, #8
 8008220:	2d0c      	cmp	r5, #12
 8008222:	bf38      	it	cc
 8008224:	250c      	movcc	r5, #12
 8008226:	4638      	mov	r0, r7
 8008228:	4629      	mov	r1, r5
 800822a:	f7ff ffa5 	bl	8008178 <sbrk_aligned>
 800822e:	3001      	adds	r0, #1
 8008230:	d02b      	beq.n	800828a <_malloc_r+0xd2>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	442b      	add	r3, r5
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	e00e      	b.n	8008258 <_malloc_r+0xa0>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	1b52      	subs	r2, r2, r5
 800823e:	d41e      	bmi.n	800827e <_malloc_r+0xc6>
 8008240:	2a0b      	cmp	r2, #11
 8008242:	d916      	bls.n	8008272 <_malloc_r+0xba>
 8008244:	1961      	adds	r1, r4, r5
 8008246:	42a3      	cmp	r3, r4
 8008248:	6025      	str	r5, [r4, #0]
 800824a:	bf18      	it	ne
 800824c:	6059      	strne	r1, [r3, #4]
 800824e:	6863      	ldr	r3, [r4, #4]
 8008250:	bf08      	it	eq
 8008252:	6031      	streq	r1, [r6, #0]
 8008254:	5162      	str	r2, [r4, r5]
 8008256:	604b      	str	r3, [r1, #4]
 8008258:	4638      	mov	r0, r7
 800825a:	f104 060b 	add.w	r6, r4, #11
 800825e:	f000 fe0f 	bl	8008e80 <__malloc_unlock>
 8008262:	f026 0607 	bic.w	r6, r6, #7
 8008266:	1d23      	adds	r3, r4, #4
 8008268:	1af2      	subs	r2, r6, r3
 800826a:	d0b6      	beq.n	80081da <_malloc_r+0x22>
 800826c:	1b9b      	subs	r3, r3, r6
 800826e:	50a3      	str	r3, [r4, r2]
 8008270:	e7b3      	b.n	80081da <_malloc_r+0x22>
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	42a3      	cmp	r3, r4
 8008276:	bf0c      	ite	eq
 8008278:	6032      	streq	r2, [r6, #0]
 800827a:	605a      	strne	r2, [r3, #4]
 800827c:	e7ec      	b.n	8008258 <_malloc_r+0xa0>
 800827e:	4623      	mov	r3, r4
 8008280:	6864      	ldr	r4, [r4, #4]
 8008282:	e7b2      	b.n	80081ea <_malloc_r+0x32>
 8008284:	4634      	mov	r4, r6
 8008286:	6876      	ldr	r6, [r6, #4]
 8008288:	e7b9      	b.n	80081fe <_malloc_r+0x46>
 800828a:	230c      	movs	r3, #12
 800828c:	4638      	mov	r0, r7
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	f000 fdf6 	bl	8008e80 <__malloc_unlock>
 8008294:	e7a1      	b.n	80081da <_malloc_r+0x22>
 8008296:	6025      	str	r5, [r4, #0]
 8008298:	e7de      	b.n	8008258 <_malloc_r+0xa0>
 800829a:	bf00      	nop
 800829c:	200003a4 	.word	0x200003a4

080082a0 <__ssputs_r>:
 80082a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	688e      	ldr	r6, [r1, #8]
 80082a6:	4682      	mov	sl, r0
 80082a8:	429e      	cmp	r6, r3
 80082aa:	460c      	mov	r4, r1
 80082ac:	4690      	mov	r8, r2
 80082ae:	461f      	mov	r7, r3
 80082b0:	d838      	bhi.n	8008324 <__ssputs_r+0x84>
 80082b2:	898a      	ldrh	r2, [r1, #12]
 80082b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082b8:	d032      	beq.n	8008320 <__ssputs_r+0x80>
 80082ba:	6825      	ldr	r5, [r4, #0]
 80082bc:	6909      	ldr	r1, [r1, #16]
 80082be:	3301      	adds	r3, #1
 80082c0:	eba5 0901 	sub.w	r9, r5, r1
 80082c4:	6965      	ldr	r5, [r4, #20]
 80082c6:	444b      	add	r3, r9
 80082c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082d0:	106d      	asrs	r5, r5, #1
 80082d2:	429d      	cmp	r5, r3
 80082d4:	bf38      	it	cc
 80082d6:	461d      	movcc	r5, r3
 80082d8:	0553      	lsls	r3, r2, #21
 80082da:	d531      	bpl.n	8008340 <__ssputs_r+0xa0>
 80082dc:	4629      	mov	r1, r5
 80082de:	f7ff ff6b 	bl	80081b8 <_malloc_r>
 80082e2:	4606      	mov	r6, r0
 80082e4:	b950      	cbnz	r0, 80082fc <__ssputs_r+0x5c>
 80082e6:	230c      	movs	r3, #12
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	f8ca 3000 	str.w	r3, [sl]
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fc:	464a      	mov	r2, r9
 80082fe:	6921      	ldr	r1, [r4, #16]
 8008300:	f7ff fa18 	bl	8007734 <memcpy>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800830a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	6126      	str	r6, [r4, #16]
 8008312:	444e      	add	r6, r9
 8008314:	6026      	str	r6, [r4, #0]
 8008316:	463e      	mov	r6, r7
 8008318:	6165      	str	r5, [r4, #20]
 800831a:	eba5 0509 	sub.w	r5, r5, r9
 800831e:	60a5      	str	r5, [r4, #8]
 8008320:	42be      	cmp	r6, r7
 8008322:	d900      	bls.n	8008326 <__ssputs_r+0x86>
 8008324:	463e      	mov	r6, r7
 8008326:	4632      	mov	r2, r6
 8008328:	4641      	mov	r1, r8
 800832a:	6820      	ldr	r0, [r4, #0]
 800832c:	f000 fd88 	bl	8008e40 <memmove>
 8008330:	68a3      	ldr	r3, [r4, #8]
 8008332:	2000      	movs	r0, #0
 8008334:	1b9b      	subs	r3, r3, r6
 8008336:	60a3      	str	r3, [r4, #8]
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	4433      	add	r3, r6
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	e7db      	b.n	80082f8 <__ssputs_r+0x58>
 8008340:	462a      	mov	r2, r5
 8008342:	f000 fda3 	bl	8008e8c <_realloc_r>
 8008346:	4606      	mov	r6, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	d1e1      	bne.n	8008310 <__ssputs_r+0x70>
 800834c:	4650      	mov	r0, sl
 800834e:	6921      	ldr	r1, [r4, #16]
 8008350:	f7ff feca 	bl	80080e8 <_free_r>
 8008354:	e7c7      	b.n	80082e6 <__ssputs_r+0x46>
	...

08008358 <_svfiprintf_r>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4698      	mov	r8, r3
 800835e:	898b      	ldrh	r3, [r1, #12]
 8008360:	4607      	mov	r7, r0
 8008362:	061b      	lsls	r3, r3, #24
 8008364:	460d      	mov	r5, r1
 8008366:	4614      	mov	r4, r2
 8008368:	b09d      	sub	sp, #116	; 0x74
 800836a:	d50e      	bpl.n	800838a <_svfiprintf_r+0x32>
 800836c:	690b      	ldr	r3, [r1, #16]
 800836e:	b963      	cbnz	r3, 800838a <_svfiprintf_r+0x32>
 8008370:	2140      	movs	r1, #64	; 0x40
 8008372:	f7ff ff21 	bl	80081b8 <_malloc_r>
 8008376:	6028      	str	r0, [r5, #0]
 8008378:	6128      	str	r0, [r5, #16]
 800837a:	b920      	cbnz	r0, 8008386 <_svfiprintf_r+0x2e>
 800837c:	230c      	movs	r3, #12
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e0d1      	b.n	800852a <_svfiprintf_r+0x1d2>
 8008386:	2340      	movs	r3, #64	; 0x40
 8008388:	616b      	str	r3, [r5, #20]
 800838a:	2300      	movs	r3, #0
 800838c:	9309      	str	r3, [sp, #36]	; 0x24
 800838e:	2320      	movs	r3, #32
 8008390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008394:	2330      	movs	r3, #48	; 0x30
 8008396:	f04f 0901 	mov.w	r9, #1
 800839a:	f8cd 800c 	str.w	r8, [sp, #12]
 800839e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008544 <_svfiprintf_r+0x1ec>
 80083a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083a6:	4623      	mov	r3, r4
 80083a8:	469a      	mov	sl, r3
 80083aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ae:	b10a      	cbz	r2, 80083b4 <_svfiprintf_r+0x5c>
 80083b0:	2a25      	cmp	r2, #37	; 0x25
 80083b2:	d1f9      	bne.n	80083a8 <_svfiprintf_r+0x50>
 80083b4:	ebba 0b04 	subs.w	fp, sl, r4
 80083b8:	d00b      	beq.n	80083d2 <_svfiprintf_r+0x7a>
 80083ba:	465b      	mov	r3, fp
 80083bc:	4622      	mov	r2, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ff6d 	bl	80082a0 <__ssputs_r>
 80083c6:	3001      	adds	r0, #1
 80083c8:	f000 80aa 	beq.w	8008520 <_svfiprintf_r+0x1c8>
 80083cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ce:	445a      	add	r2, fp
 80083d0:	9209      	str	r2, [sp, #36]	; 0x24
 80083d2:	f89a 3000 	ldrb.w	r3, [sl]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 80a2 	beq.w	8008520 <_svfiprintf_r+0x1c8>
 80083dc:	2300      	movs	r3, #0
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e6:	f10a 0a01 	add.w	sl, sl, #1
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	9307      	str	r3, [sp, #28]
 80083ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083f2:	931a      	str	r3, [sp, #104]	; 0x68
 80083f4:	4654      	mov	r4, sl
 80083f6:	2205      	movs	r2, #5
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	4851      	ldr	r0, [pc, #324]	; (8008544 <_svfiprintf_r+0x1ec>)
 80083fe:	f7ff f98b 	bl	8007718 <memchr>
 8008402:	9a04      	ldr	r2, [sp, #16]
 8008404:	b9d8      	cbnz	r0, 800843e <_svfiprintf_r+0xe6>
 8008406:	06d0      	lsls	r0, r2, #27
 8008408:	bf44      	itt	mi
 800840a:	2320      	movmi	r3, #32
 800840c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008410:	0711      	lsls	r1, r2, #28
 8008412:	bf44      	itt	mi
 8008414:	232b      	movmi	r3, #43	; 0x2b
 8008416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800841a:	f89a 3000 	ldrb.w	r3, [sl]
 800841e:	2b2a      	cmp	r3, #42	; 0x2a
 8008420:	d015      	beq.n	800844e <_svfiprintf_r+0xf6>
 8008422:	4654      	mov	r4, sl
 8008424:	2000      	movs	r0, #0
 8008426:	f04f 0c0a 	mov.w	ip, #10
 800842a:	9a07      	ldr	r2, [sp, #28]
 800842c:	4621      	mov	r1, r4
 800842e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008432:	3b30      	subs	r3, #48	; 0x30
 8008434:	2b09      	cmp	r3, #9
 8008436:	d94e      	bls.n	80084d6 <_svfiprintf_r+0x17e>
 8008438:	b1b0      	cbz	r0, 8008468 <_svfiprintf_r+0x110>
 800843a:	9207      	str	r2, [sp, #28]
 800843c:	e014      	b.n	8008468 <_svfiprintf_r+0x110>
 800843e:	eba0 0308 	sub.w	r3, r0, r8
 8008442:	fa09 f303 	lsl.w	r3, r9, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	46a2      	mov	sl, r4
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	e7d2      	b.n	80083f4 <_svfiprintf_r+0x9c>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	1d19      	adds	r1, r3, #4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	9103      	str	r1, [sp, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfbb      	ittet	lt
 800845a:	425b      	neglt	r3, r3
 800845c:	f042 0202 	orrlt.w	r2, r2, #2
 8008460:	9307      	strge	r3, [sp, #28]
 8008462:	9307      	strlt	r3, [sp, #28]
 8008464:	bfb8      	it	lt
 8008466:	9204      	strlt	r2, [sp, #16]
 8008468:	7823      	ldrb	r3, [r4, #0]
 800846a:	2b2e      	cmp	r3, #46	; 0x2e
 800846c:	d10c      	bne.n	8008488 <_svfiprintf_r+0x130>
 800846e:	7863      	ldrb	r3, [r4, #1]
 8008470:	2b2a      	cmp	r3, #42	; 0x2a
 8008472:	d135      	bne.n	80084e0 <_svfiprintf_r+0x188>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	3402      	adds	r4, #2
 8008478:	1d1a      	adds	r2, r3, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	9203      	str	r2, [sp, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfb8      	it	lt
 8008482:	f04f 33ff 	movlt.w	r3, #4294967295
 8008486:	9305      	str	r3, [sp, #20]
 8008488:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008548 <_svfiprintf_r+0x1f0>
 800848c:	2203      	movs	r2, #3
 800848e:	4650      	mov	r0, sl
 8008490:	7821      	ldrb	r1, [r4, #0]
 8008492:	f7ff f941 	bl	8007718 <memchr>
 8008496:	b140      	cbz	r0, 80084aa <_svfiprintf_r+0x152>
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	eba0 000a 	sub.w	r0, r0, sl
 800849e:	fa03 f000 	lsl.w	r0, r3, r0
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	3401      	adds	r4, #1
 80084a6:	4303      	orrs	r3, r0
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ae:	2206      	movs	r2, #6
 80084b0:	4826      	ldr	r0, [pc, #152]	; (800854c <_svfiprintf_r+0x1f4>)
 80084b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084b6:	f7ff f92f 	bl	8007718 <memchr>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d038      	beq.n	8008530 <_svfiprintf_r+0x1d8>
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <_svfiprintf_r+0x1f8>)
 80084c0:	bb1b      	cbnz	r3, 800850a <_svfiprintf_r+0x1b2>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	3307      	adds	r3, #7
 80084c6:	f023 0307 	bic.w	r3, r3, #7
 80084ca:	3308      	adds	r3, #8
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d0:	4433      	add	r3, r6
 80084d2:	9309      	str	r3, [sp, #36]	; 0x24
 80084d4:	e767      	b.n	80083a6 <_svfiprintf_r+0x4e>
 80084d6:	460c      	mov	r4, r1
 80084d8:	2001      	movs	r0, #1
 80084da:	fb0c 3202 	mla	r2, ip, r2, r3
 80084de:	e7a5      	b.n	800842c <_svfiprintf_r+0xd4>
 80084e0:	2300      	movs	r3, #0
 80084e2:	f04f 0c0a 	mov.w	ip, #10
 80084e6:	4619      	mov	r1, r3
 80084e8:	3401      	adds	r4, #1
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	4620      	mov	r0, r4
 80084ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f2:	3a30      	subs	r2, #48	; 0x30
 80084f4:	2a09      	cmp	r2, #9
 80084f6:	d903      	bls.n	8008500 <_svfiprintf_r+0x1a8>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0c5      	beq.n	8008488 <_svfiprintf_r+0x130>
 80084fc:	9105      	str	r1, [sp, #20]
 80084fe:	e7c3      	b.n	8008488 <_svfiprintf_r+0x130>
 8008500:	4604      	mov	r4, r0
 8008502:	2301      	movs	r3, #1
 8008504:	fb0c 2101 	mla	r1, ip, r1, r2
 8008508:	e7f0      	b.n	80084ec <_svfiprintf_r+0x194>
 800850a:	ab03      	add	r3, sp, #12
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	462a      	mov	r2, r5
 8008510:	4638      	mov	r0, r7
 8008512:	4b10      	ldr	r3, [pc, #64]	; (8008554 <_svfiprintf_r+0x1fc>)
 8008514:	a904      	add	r1, sp, #16
 8008516:	f7fc fa0f 	bl	8004938 <_printf_float>
 800851a:	1c42      	adds	r2, r0, #1
 800851c:	4606      	mov	r6, r0
 800851e:	d1d6      	bne.n	80084ce <_svfiprintf_r+0x176>
 8008520:	89ab      	ldrh	r3, [r5, #12]
 8008522:	065b      	lsls	r3, r3, #25
 8008524:	f53f af2c 	bmi.w	8008380 <_svfiprintf_r+0x28>
 8008528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852a:	b01d      	add	sp, #116	; 0x74
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	ab03      	add	r3, sp, #12
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	462a      	mov	r2, r5
 8008536:	4638      	mov	r0, r7
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <_svfiprintf_r+0x1fc>)
 800853a:	a904      	add	r1, sp, #16
 800853c:	f7fc fc98 	bl	8004e70 <_printf_i>
 8008540:	e7eb      	b.n	800851a <_svfiprintf_r+0x1c2>
 8008542:	bf00      	nop
 8008544:	080095ac 	.word	0x080095ac
 8008548:	080095b2 	.word	0x080095b2
 800854c:	080095b6 	.word	0x080095b6
 8008550:	08004939 	.word	0x08004939
 8008554:	080082a1 	.word	0x080082a1

08008558 <__sfputc_r>:
 8008558:	6893      	ldr	r3, [r2, #8]
 800855a:	b410      	push	{r4}
 800855c:	3b01      	subs	r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	6093      	str	r3, [r2, #8]
 8008562:	da07      	bge.n	8008574 <__sfputc_r+0x1c>
 8008564:	6994      	ldr	r4, [r2, #24]
 8008566:	42a3      	cmp	r3, r4
 8008568:	db01      	blt.n	800856e <__sfputc_r+0x16>
 800856a:	290a      	cmp	r1, #10
 800856c:	d102      	bne.n	8008574 <__sfputc_r+0x1c>
 800856e:	bc10      	pop	{r4}
 8008570:	f000 b974 	b.w	800885c <__swbuf_r>
 8008574:	6813      	ldr	r3, [r2, #0]
 8008576:	1c58      	adds	r0, r3, #1
 8008578:	6010      	str	r0, [r2, #0]
 800857a:	7019      	strb	r1, [r3, #0]
 800857c:	4608      	mov	r0, r1
 800857e:	bc10      	pop	{r4}
 8008580:	4770      	bx	lr

08008582 <__sfputs_r>:
 8008582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	4614      	mov	r4, r2
 800858a:	18d5      	adds	r5, r2, r3
 800858c:	42ac      	cmp	r4, r5
 800858e:	d101      	bne.n	8008594 <__sfputs_r+0x12>
 8008590:	2000      	movs	r0, #0
 8008592:	e007      	b.n	80085a4 <__sfputs_r+0x22>
 8008594:	463a      	mov	r2, r7
 8008596:	4630      	mov	r0, r6
 8008598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859c:	f7ff ffdc 	bl	8008558 <__sfputc_r>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d1f3      	bne.n	800858c <__sfputs_r+0xa>
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085a8 <_vfiprintf_r>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	460d      	mov	r5, r1
 80085ae:	4614      	mov	r4, r2
 80085b0:	4698      	mov	r8, r3
 80085b2:	4606      	mov	r6, r0
 80085b4:	b09d      	sub	sp, #116	; 0x74
 80085b6:	b118      	cbz	r0, 80085c0 <_vfiprintf_r+0x18>
 80085b8:	6983      	ldr	r3, [r0, #24]
 80085ba:	b90b      	cbnz	r3, 80085c0 <_vfiprintf_r+0x18>
 80085bc:	f000 fb3a 	bl	8008c34 <__sinit>
 80085c0:	4b89      	ldr	r3, [pc, #548]	; (80087e8 <_vfiprintf_r+0x240>)
 80085c2:	429d      	cmp	r5, r3
 80085c4:	d11b      	bne.n	80085fe <_vfiprintf_r+0x56>
 80085c6:	6875      	ldr	r5, [r6, #4]
 80085c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ca:	07d9      	lsls	r1, r3, #31
 80085cc:	d405      	bmi.n	80085da <_vfiprintf_r+0x32>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	059a      	lsls	r2, r3, #22
 80085d2:	d402      	bmi.n	80085da <_vfiprintf_r+0x32>
 80085d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085d6:	f000 fbcb 	bl	8008d70 <__retarget_lock_acquire_recursive>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	071b      	lsls	r3, r3, #28
 80085de:	d501      	bpl.n	80085e4 <_vfiprintf_r+0x3c>
 80085e0:	692b      	ldr	r3, [r5, #16]
 80085e2:	b9eb      	cbnz	r3, 8008620 <_vfiprintf_r+0x78>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f000 f998 	bl	800891c <__swsetup_r>
 80085ec:	b1c0      	cbz	r0, 8008620 <_vfiprintf_r+0x78>
 80085ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f0:	07dc      	lsls	r4, r3, #31
 80085f2:	d50e      	bpl.n	8008612 <_vfiprintf_r+0x6a>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	b01d      	add	sp, #116	; 0x74
 80085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fe:	4b7b      	ldr	r3, [pc, #492]	; (80087ec <_vfiprintf_r+0x244>)
 8008600:	429d      	cmp	r5, r3
 8008602:	d101      	bne.n	8008608 <_vfiprintf_r+0x60>
 8008604:	68b5      	ldr	r5, [r6, #8]
 8008606:	e7df      	b.n	80085c8 <_vfiprintf_r+0x20>
 8008608:	4b79      	ldr	r3, [pc, #484]	; (80087f0 <_vfiprintf_r+0x248>)
 800860a:	429d      	cmp	r5, r3
 800860c:	bf08      	it	eq
 800860e:	68f5      	ldreq	r5, [r6, #12]
 8008610:	e7da      	b.n	80085c8 <_vfiprintf_r+0x20>
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	0598      	lsls	r0, r3, #22
 8008616:	d4ed      	bmi.n	80085f4 <_vfiprintf_r+0x4c>
 8008618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800861a:	f000 fbaa 	bl	8008d72 <__retarget_lock_release_recursive>
 800861e:	e7e9      	b.n	80085f4 <_vfiprintf_r+0x4c>
 8008620:	2300      	movs	r3, #0
 8008622:	9309      	str	r3, [sp, #36]	; 0x24
 8008624:	2320      	movs	r3, #32
 8008626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862a:	2330      	movs	r3, #48	; 0x30
 800862c:	f04f 0901 	mov.w	r9, #1
 8008630:	f8cd 800c 	str.w	r8, [sp, #12]
 8008634:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80087f4 <_vfiprintf_r+0x24c>
 8008638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800863c:	4623      	mov	r3, r4
 800863e:	469a      	mov	sl, r3
 8008640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008644:	b10a      	cbz	r2, 800864a <_vfiprintf_r+0xa2>
 8008646:	2a25      	cmp	r2, #37	; 0x25
 8008648:	d1f9      	bne.n	800863e <_vfiprintf_r+0x96>
 800864a:	ebba 0b04 	subs.w	fp, sl, r4
 800864e:	d00b      	beq.n	8008668 <_vfiprintf_r+0xc0>
 8008650:	465b      	mov	r3, fp
 8008652:	4622      	mov	r2, r4
 8008654:	4629      	mov	r1, r5
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff93 	bl	8008582 <__sfputs_r>
 800865c:	3001      	adds	r0, #1
 800865e:	f000 80aa 	beq.w	80087b6 <_vfiprintf_r+0x20e>
 8008662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008664:	445a      	add	r2, fp
 8008666:	9209      	str	r2, [sp, #36]	; 0x24
 8008668:	f89a 3000 	ldrb.w	r3, [sl]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 80a2 	beq.w	80087b6 <_vfiprintf_r+0x20e>
 8008672:	2300      	movs	r3, #0
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867c:	f10a 0a01 	add.w	sl, sl, #1
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	9307      	str	r3, [sp, #28]
 8008684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008688:	931a      	str	r3, [sp, #104]	; 0x68
 800868a:	4654      	mov	r4, sl
 800868c:	2205      	movs	r2, #5
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	4858      	ldr	r0, [pc, #352]	; (80087f4 <_vfiprintf_r+0x24c>)
 8008694:	f7ff f840 	bl	8007718 <memchr>
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	b9d8      	cbnz	r0, 80086d4 <_vfiprintf_r+0x12c>
 800869c:	06d1      	lsls	r1, r2, #27
 800869e:	bf44      	itt	mi
 80086a0:	2320      	movmi	r3, #32
 80086a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a6:	0713      	lsls	r3, r2, #28
 80086a8:	bf44      	itt	mi
 80086aa:	232b      	movmi	r3, #43	; 0x2b
 80086ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b0:	f89a 3000 	ldrb.w	r3, [sl]
 80086b4:	2b2a      	cmp	r3, #42	; 0x2a
 80086b6:	d015      	beq.n	80086e4 <_vfiprintf_r+0x13c>
 80086b8:	4654      	mov	r4, sl
 80086ba:	2000      	movs	r0, #0
 80086bc:	f04f 0c0a 	mov.w	ip, #10
 80086c0:	9a07      	ldr	r2, [sp, #28]
 80086c2:	4621      	mov	r1, r4
 80086c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c8:	3b30      	subs	r3, #48	; 0x30
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	d94e      	bls.n	800876c <_vfiprintf_r+0x1c4>
 80086ce:	b1b0      	cbz	r0, 80086fe <_vfiprintf_r+0x156>
 80086d0:	9207      	str	r2, [sp, #28]
 80086d2:	e014      	b.n	80086fe <_vfiprintf_r+0x156>
 80086d4:	eba0 0308 	sub.w	r3, r0, r8
 80086d8:	fa09 f303 	lsl.w	r3, r9, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	46a2      	mov	sl, r4
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	e7d2      	b.n	800868a <_vfiprintf_r+0xe2>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	1d19      	adds	r1, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfbb      	ittet	lt
 80086f0:	425b      	neglt	r3, r3
 80086f2:	f042 0202 	orrlt.w	r2, r2, #2
 80086f6:	9307      	strge	r3, [sp, #28]
 80086f8:	9307      	strlt	r3, [sp, #28]
 80086fa:	bfb8      	it	lt
 80086fc:	9204      	strlt	r2, [sp, #16]
 80086fe:	7823      	ldrb	r3, [r4, #0]
 8008700:	2b2e      	cmp	r3, #46	; 0x2e
 8008702:	d10c      	bne.n	800871e <_vfiprintf_r+0x176>
 8008704:	7863      	ldrb	r3, [r4, #1]
 8008706:	2b2a      	cmp	r3, #42	; 0x2a
 8008708:	d135      	bne.n	8008776 <_vfiprintf_r+0x1ce>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3402      	adds	r4, #2
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9203      	str	r2, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb8      	it	lt
 8008718:	f04f 33ff 	movlt.w	r3, #4294967295
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80087f8 <_vfiprintf_r+0x250>
 8008722:	2203      	movs	r2, #3
 8008724:	4650      	mov	r0, sl
 8008726:	7821      	ldrb	r1, [r4, #0]
 8008728:	f7fe fff6 	bl	8007718 <memchr>
 800872c:	b140      	cbz	r0, 8008740 <_vfiprintf_r+0x198>
 800872e:	2340      	movs	r3, #64	; 0x40
 8008730:	eba0 000a 	sub.w	r0, r0, sl
 8008734:	fa03 f000 	lsl.w	r0, r3, r0
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	3401      	adds	r4, #1
 800873c:	4303      	orrs	r3, r0
 800873e:	9304      	str	r3, [sp, #16]
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	2206      	movs	r2, #6
 8008746:	482d      	ldr	r0, [pc, #180]	; (80087fc <_vfiprintf_r+0x254>)
 8008748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800874c:	f7fe ffe4 	bl	8007718 <memchr>
 8008750:	2800      	cmp	r0, #0
 8008752:	d03f      	beq.n	80087d4 <_vfiprintf_r+0x22c>
 8008754:	4b2a      	ldr	r3, [pc, #168]	; (8008800 <_vfiprintf_r+0x258>)
 8008756:	bb1b      	cbnz	r3, 80087a0 <_vfiprintf_r+0x1f8>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	3307      	adds	r3, #7
 800875c:	f023 0307 	bic.w	r3, r3, #7
 8008760:	3308      	adds	r3, #8
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008766:	443b      	add	r3, r7
 8008768:	9309      	str	r3, [sp, #36]	; 0x24
 800876a:	e767      	b.n	800863c <_vfiprintf_r+0x94>
 800876c:	460c      	mov	r4, r1
 800876e:	2001      	movs	r0, #1
 8008770:	fb0c 3202 	mla	r2, ip, r2, r3
 8008774:	e7a5      	b.n	80086c2 <_vfiprintf_r+0x11a>
 8008776:	2300      	movs	r3, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4619      	mov	r1, r3
 800877e:	3401      	adds	r4, #1
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	4620      	mov	r0, r4
 8008784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008788:	3a30      	subs	r2, #48	; 0x30
 800878a:	2a09      	cmp	r2, #9
 800878c:	d903      	bls.n	8008796 <_vfiprintf_r+0x1ee>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0c5      	beq.n	800871e <_vfiprintf_r+0x176>
 8008792:	9105      	str	r1, [sp, #20]
 8008794:	e7c3      	b.n	800871e <_vfiprintf_r+0x176>
 8008796:	4604      	mov	r4, r0
 8008798:	2301      	movs	r3, #1
 800879a:	fb0c 2101 	mla	r1, ip, r1, r2
 800879e:	e7f0      	b.n	8008782 <_vfiprintf_r+0x1da>
 80087a0:	ab03      	add	r3, sp, #12
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	462a      	mov	r2, r5
 80087a6:	4630      	mov	r0, r6
 80087a8:	4b16      	ldr	r3, [pc, #88]	; (8008804 <_vfiprintf_r+0x25c>)
 80087aa:	a904      	add	r1, sp, #16
 80087ac:	f7fc f8c4 	bl	8004938 <_printf_float>
 80087b0:	4607      	mov	r7, r0
 80087b2:	1c78      	adds	r0, r7, #1
 80087b4:	d1d6      	bne.n	8008764 <_vfiprintf_r+0x1bc>
 80087b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b8:	07d9      	lsls	r1, r3, #31
 80087ba:	d405      	bmi.n	80087c8 <_vfiprintf_r+0x220>
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	059a      	lsls	r2, r3, #22
 80087c0:	d402      	bmi.n	80087c8 <_vfiprintf_r+0x220>
 80087c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c4:	f000 fad5 	bl	8008d72 <__retarget_lock_release_recursive>
 80087c8:	89ab      	ldrh	r3, [r5, #12]
 80087ca:	065b      	lsls	r3, r3, #25
 80087cc:	f53f af12 	bmi.w	80085f4 <_vfiprintf_r+0x4c>
 80087d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d2:	e711      	b.n	80085f8 <_vfiprintf_r+0x50>
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	462a      	mov	r2, r5
 80087da:	4630      	mov	r0, r6
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <_vfiprintf_r+0x25c>)
 80087de:	a904      	add	r1, sp, #16
 80087e0:	f7fc fb46 	bl	8004e70 <_printf_i>
 80087e4:	e7e4      	b.n	80087b0 <_vfiprintf_r+0x208>
 80087e6:	bf00      	nop
 80087e8:	080095e0 	.word	0x080095e0
 80087ec:	08009600 	.word	0x08009600
 80087f0:	080095c0 	.word	0x080095c0
 80087f4:	080095ac 	.word	0x080095ac
 80087f8:	080095b2 	.word	0x080095b2
 80087fc:	080095b6 	.word	0x080095b6
 8008800:	08004939 	.word	0x08004939
 8008804:	08008583 	.word	0x08008583

08008808 <nan>:
 8008808:	2000      	movs	r0, #0
 800880a:	4901      	ldr	r1, [pc, #4]	; (8008810 <nan+0x8>)
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	7ff80000 	.word	0x7ff80000

08008814 <_sbrk_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	2300      	movs	r3, #0
 8008818:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_sbrk_r+0x1c>)
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f8 ff2c 	bl	800167c <_sbrk>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_sbrk_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_sbrk_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	200003b0 	.word	0x200003b0

08008834 <strncmp>:
 8008834:	4603      	mov	r3, r0
 8008836:	b510      	push	{r4, lr}
 8008838:	b172      	cbz	r2, 8008858 <strncmp+0x24>
 800883a:	3901      	subs	r1, #1
 800883c:	1884      	adds	r4, r0, r2
 800883e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008842:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008846:	4290      	cmp	r0, r2
 8008848:	d101      	bne.n	800884e <strncmp+0x1a>
 800884a:	42a3      	cmp	r3, r4
 800884c:	d101      	bne.n	8008852 <strncmp+0x1e>
 800884e:	1a80      	subs	r0, r0, r2
 8008850:	bd10      	pop	{r4, pc}
 8008852:	2800      	cmp	r0, #0
 8008854:	d1f3      	bne.n	800883e <strncmp+0xa>
 8008856:	e7fa      	b.n	800884e <strncmp+0x1a>
 8008858:	4610      	mov	r0, r2
 800885a:	e7f9      	b.n	8008850 <strncmp+0x1c>

0800885c <__swbuf_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	460e      	mov	r6, r1
 8008860:	4614      	mov	r4, r2
 8008862:	4605      	mov	r5, r0
 8008864:	b118      	cbz	r0, 800886e <__swbuf_r+0x12>
 8008866:	6983      	ldr	r3, [r0, #24]
 8008868:	b90b      	cbnz	r3, 800886e <__swbuf_r+0x12>
 800886a:	f000 f9e3 	bl	8008c34 <__sinit>
 800886e:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <__swbuf_r+0x98>)
 8008870:	429c      	cmp	r4, r3
 8008872:	d12b      	bne.n	80088cc <__swbuf_r+0x70>
 8008874:	686c      	ldr	r4, [r5, #4]
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	d52f      	bpl.n	80088e0 <__swbuf_r+0x84>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	b36b      	cbz	r3, 80088e0 <__swbuf_r+0x84>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	b2f6      	uxtb	r6, r6
 800888a:	1ac0      	subs	r0, r0, r3
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	4637      	mov	r7, r6
 8008890:	4283      	cmp	r3, r0
 8008892:	dc04      	bgt.n	800889e <__swbuf_r+0x42>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 f938 	bl	8008b0c <_fflush_r>
 800889c:	bb30      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	3001      	adds	r0, #1
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	701e      	strb	r6, [r3, #0]
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	4283      	cmp	r3, r0
 80088b2:	d004      	beq.n	80088be <__swbuf_r+0x62>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	07db      	lsls	r3, r3, #31
 80088b8:	d506      	bpl.n	80088c8 <__swbuf_r+0x6c>
 80088ba:	2e0a      	cmp	r6, #10
 80088bc:	d104      	bne.n	80088c8 <__swbuf_r+0x6c>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f923 	bl	8008b0c <_fflush_r>
 80088c6:	b988      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 80088c8:	4638      	mov	r0, r7
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <__swbuf_r+0x9c>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d101      	bne.n	80088d6 <__swbuf_r+0x7a>
 80088d2:	68ac      	ldr	r4, [r5, #8]
 80088d4:	e7cf      	b.n	8008876 <__swbuf_r+0x1a>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__swbuf_r+0xa0>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	bf08      	it	eq
 80088dc:	68ec      	ldreq	r4, [r5, #12]
 80088de:	e7ca      	b.n	8008876 <__swbuf_r+0x1a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 f81a 	bl	800891c <__swsetup_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0cb      	beq.n	8008884 <__swbuf_r+0x28>
 80088ec:	f04f 37ff 	mov.w	r7, #4294967295
 80088f0:	e7ea      	b.n	80088c8 <__swbuf_r+0x6c>
 80088f2:	bf00      	nop
 80088f4:	080095e0 	.word	0x080095e0
 80088f8:	08009600 	.word	0x08009600
 80088fc:	080095c0 	.word	0x080095c0

08008900 <__ascii_wctomb>:
 8008900:	4603      	mov	r3, r0
 8008902:	4608      	mov	r0, r1
 8008904:	b141      	cbz	r1, 8008918 <__ascii_wctomb+0x18>
 8008906:	2aff      	cmp	r2, #255	; 0xff
 8008908:	d904      	bls.n	8008914 <__ascii_wctomb+0x14>
 800890a:	228a      	movs	r2, #138	; 0x8a
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	4770      	bx	lr
 8008914:	2001      	movs	r0, #1
 8008916:	700a      	strb	r2, [r1, #0]
 8008918:	4770      	bx	lr
	...

0800891c <__swsetup_r>:
 800891c:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <__swsetup_r+0xcc>)
 800891e:	b570      	push	{r4, r5, r6, lr}
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	4606      	mov	r6, r0
 8008924:	460c      	mov	r4, r1
 8008926:	b125      	cbz	r5, 8008932 <__swsetup_r+0x16>
 8008928:	69ab      	ldr	r3, [r5, #24]
 800892a:	b913      	cbnz	r3, 8008932 <__swsetup_r+0x16>
 800892c:	4628      	mov	r0, r5
 800892e:	f000 f981 	bl	8008c34 <__sinit>
 8008932:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <__swsetup_r+0xd0>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d10f      	bne.n	8008958 <__swsetup_r+0x3c>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008940:	0719      	lsls	r1, r3, #28
 8008942:	d42c      	bmi.n	800899e <__swsetup_r+0x82>
 8008944:	06dd      	lsls	r5, r3, #27
 8008946:	d411      	bmi.n	800896c <__swsetup_r+0x50>
 8008948:	2309      	movs	r3, #9
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	81a3      	strh	r3, [r4, #12]
 8008956:	e03e      	b.n	80089d6 <__swsetup_r+0xba>
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <__swsetup_r+0xd4>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d101      	bne.n	8008962 <__swsetup_r+0x46>
 800895e:	68ac      	ldr	r4, [r5, #8]
 8008960:	e7eb      	b.n	800893a <__swsetup_r+0x1e>
 8008962:	4b24      	ldr	r3, [pc, #144]	; (80089f4 <__swsetup_r+0xd8>)
 8008964:	429c      	cmp	r4, r3
 8008966:	bf08      	it	eq
 8008968:	68ec      	ldreq	r4, [r5, #12]
 800896a:	e7e6      	b.n	800893a <__swsetup_r+0x1e>
 800896c:	0758      	lsls	r0, r3, #29
 800896e:	d512      	bpl.n	8008996 <__swsetup_r+0x7a>
 8008970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008972:	b141      	cbz	r1, 8008986 <__swsetup_r+0x6a>
 8008974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008978:	4299      	cmp	r1, r3
 800897a:	d002      	beq.n	8008982 <__swsetup_r+0x66>
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff fbb3 	bl	80080e8 <_free_r>
 8008982:	2300      	movs	r3, #0
 8008984:	6363      	str	r3, [r4, #52]	; 0x34
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	2300      	movs	r3, #0
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f043 0308 	orr.w	r3, r3, #8
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	b94b      	cbnz	r3, 80089b6 <__swsetup_r+0x9a>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ac:	d003      	beq.n	80089b6 <__swsetup_r+0x9a>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 fa05 	bl	8008dc0 <__smakebuf_r>
 80089b6:	89a0      	ldrh	r0, [r4, #12]
 80089b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089bc:	f010 0301 	ands.w	r3, r0, #1
 80089c0:	d00a      	beq.n	80089d8 <__swsetup_r+0xbc>
 80089c2:	2300      	movs	r3, #0
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	6963      	ldr	r3, [r4, #20]
 80089c8:	425b      	negs	r3, r3
 80089ca:	61a3      	str	r3, [r4, #24]
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b943      	cbnz	r3, 80089e2 <__swsetup_r+0xc6>
 80089d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089d4:	d1ba      	bne.n	800894c <__swsetup_r+0x30>
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	0781      	lsls	r1, r0, #30
 80089da:	bf58      	it	pl
 80089dc:	6963      	ldrpl	r3, [r4, #20]
 80089de:	60a3      	str	r3, [r4, #8]
 80089e0:	e7f4      	b.n	80089cc <__swsetup_r+0xb0>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e7f7      	b.n	80089d6 <__swsetup_r+0xba>
 80089e6:	bf00      	nop
 80089e8:	20000010 	.word	0x20000010
 80089ec:	080095e0 	.word	0x080095e0
 80089f0:	08009600 	.word	0x08009600
 80089f4:	080095c0 	.word	0x080095c0

080089f8 <abort>:
 80089f8:	2006      	movs	r0, #6
 80089fa:	b508      	push	{r3, lr}
 80089fc:	f000 fa9e 	bl	8008f3c <raise>
 8008a00:	2001      	movs	r0, #1
 8008a02:	f7f8 fdc8 	bl	8001596 <_exit>
	...

08008a08 <__sflush_r>:
 8008a08:	898a      	ldrh	r2, [r1, #12]
 8008a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	0710      	lsls	r0, r2, #28
 8008a10:	460c      	mov	r4, r1
 8008a12:	d457      	bmi.n	8008ac4 <__sflush_r+0xbc>
 8008a14:	684b      	ldr	r3, [r1, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc04      	bgt.n	8008a24 <__sflush_r+0x1c>
 8008a1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc01      	bgt.n	8008a24 <__sflush_r+0x1c>
 8008a20:	2000      	movs	r0, #0
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d0fa      	beq.n	8008a20 <__sflush_r+0x18>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a30:	682f      	ldr	r7, [r5, #0]
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	d032      	beq.n	8008a9c <__sflush_r+0x94>
 8008a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	075a      	lsls	r2, r3, #29
 8008a3c:	d505      	bpl.n	8008a4a <__sflush_r+0x42>
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	1ac0      	subs	r0, r0, r3
 8008a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a44:	b10b      	cbz	r3, 8008a4a <__sflush_r+0x42>
 8008a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a48:	1ac0      	subs	r0, r0, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a50:	4628      	mov	r0, r5
 8008a52:	6a21      	ldr	r1, [r4, #32]
 8008a54:	47b0      	blx	r6
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	d106      	bne.n	8008a6a <__sflush_r+0x62>
 8008a5c:	6829      	ldr	r1, [r5, #0]
 8008a5e:	291d      	cmp	r1, #29
 8008a60:	d82c      	bhi.n	8008abc <__sflush_r+0xb4>
 8008a62:	4a29      	ldr	r2, [pc, #164]	; (8008b08 <__sflush_r+0x100>)
 8008a64:	40ca      	lsrs	r2, r1
 8008a66:	07d6      	lsls	r6, r2, #31
 8008a68:	d528      	bpl.n	8008abc <__sflush_r+0xb4>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	6062      	str	r2, [r4, #4]
 8008a6e:	6922      	ldr	r2, [r4, #16]
 8008a70:	04d9      	lsls	r1, r3, #19
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	d504      	bpl.n	8008a80 <__sflush_r+0x78>
 8008a76:	1c42      	adds	r2, r0, #1
 8008a78:	d101      	bne.n	8008a7e <__sflush_r+0x76>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b903      	cbnz	r3, 8008a80 <__sflush_r+0x78>
 8008a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a82:	602f      	str	r7, [r5, #0]
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d0cb      	beq.n	8008a20 <__sflush_r+0x18>
 8008a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d002      	beq.n	8008a96 <__sflush_r+0x8e>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7ff fb29 	bl	80080e8 <_free_r>
 8008a96:	2000      	movs	r0, #0
 8008a98:	6360      	str	r0, [r4, #52]	; 0x34
 8008a9a:	e7c2      	b.n	8008a22 <__sflush_r+0x1a>
 8008a9c:	6a21      	ldr	r1, [r4, #32]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	1c41      	adds	r1, r0, #1
 8008aa6:	d1c7      	bne.n	8008a38 <__sflush_r+0x30>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c4      	beq.n	8008a38 <__sflush_r+0x30>
 8008aae:	2b1d      	cmp	r3, #29
 8008ab0:	d001      	beq.n	8008ab6 <__sflush_r+0xae>
 8008ab2:	2b16      	cmp	r3, #22
 8008ab4:	d101      	bne.n	8008aba <__sflush_r+0xb2>
 8008ab6:	602f      	str	r7, [r5, #0]
 8008ab8:	e7b2      	b.n	8008a20 <__sflush_r+0x18>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	e7ae      	b.n	8008a22 <__sflush_r+0x1a>
 8008ac4:	690f      	ldr	r7, [r1, #16]
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d0aa      	beq.n	8008a20 <__sflush_r+0x18>
 8008aca:	0793      	lsls	r3, r2, #30
 8008acc:	bf18      	it	ne
 8008ace:	2300      	movne	r3, #0
 8008ad0:	680e      	ldr	r6, [r1, #0]
 8008ad2:	bf08      	it	eq
 8008ad4:	694b      	ldreq	r3, [r1, #20]
 8008ad6:	1bf6      	subs	r6, r6, r7
 8008ad8:	600f      	str	r7, [r1, #0]
 8008ada:	608b      	str	r3, [r1, #8]
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	dd9f      	ble.n	8008a20 <__sflush_r+0x18>
 8008ae0:	4633      	mov	r3, r6
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	6a21      	ldr	r1, [r4, #32]
 8008ae8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008aec:	47e0      	blx	ip
 8008aee:	2800      	cmp	r0, #0
 8008af0:	dc06      	bgt.n	8008b00 <__sflush_r+0xf8>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	e790      	b.n	8008a22 <__sflush_r+0x1a>
 8008b00:	4407      	add	r7, r0
 8008b02:	1a36      	subs	r6, r6, r0
 8008b04:	e7ea      	b.n	8008adc <__sflush_r+0xd4>
 8008b06:	bf00      	nop
 8008b08:	20400001 	.word	0x20400001

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6983      	ldr	r3, [r0, #24]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f000 f887 	bl	8008c34 <__sinit>
 8008b26:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <_fflush_r+0x6c>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	d11b      	bne.n	8008b64 <_fflush_r+0x58>
 8008b2c:	686c      	ldr	r4, [r5, #4]
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0ef      	beq.n	8008b16 <_fflush_r+0xa>
 8008b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b38:	07d0      	lsls	r0, r2, #31
 8008b3a:	d404      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b3c:	0599      	lsls	r1, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_fflush_r+0x3a>
 8008b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b42:	f000 f915 	bl	8008d70 <__retarget_lock_acquire_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7ff ff5d 	bl	8008a08 <__sflush_r>
 8008b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b50:	4605      	mov	r5, r0
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	d4e0      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d4dd      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5e:	f000 f908 	bl	8008d72 <__retarget_lock_release_recursive>
 8008b62:	e7d9      	b.n	8008b18 <_fflush_r+0xc>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_fflush_r+0x70>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <_fflush_r+0x62>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7df      	b.n	8008b2e <_fflush_r+0x22>
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <_fflush_r+0x74>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7da      	b.n	8008b2e <_fflush_r+0x22>
 8008b78:	080095e0 	.word	0x080095e0
 8008b7c:	08009600 	.word	0x08009600
 8008b80:	080095c0 	.word	0x080095c0

08008b84 <std>:
 8008b84:	2300      	movs	r3, #0
 8008b86:	b510      	push	{r4, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b92:	6083      	str	r3, [r0, #8]
 8008b94:	8181      	strh	r1, [r0, #12]
 8008b96:	6643      	str	r3, [r0, #100]	; 0x64
 8008b98:	81c2      	strh	r2, [r0, #14]
 8008b9a:	6183      	str	r3, [r0, #24]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	305c      	adds	r0, #92	; 0x5c
 8008ba2:	f7fb fe23 	bl	80047ec <memset>
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <std+0x38>)
 8008ba8:	6224      	str	r4, [r4, #32]
 8008baa:	6263      	str	r3, [r4, #36]	; 0x24
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <std+0x3c>)
 8008bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bb0:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <std+0x40>)
 8008bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <std+0x44>)
 8008bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	bf00      	nop
 8008bbc:	08008f75 	.word	0x08008f75
 8008bc0:	08008f97 	.word	0x08008f97
 8008bc4:	08008fcf 	.word	0x08008fcf
 8008bc8:	08008ff3 	.word	0x08008ff3

08008bcc <_cleanup_r>:
 8008bcc:	4901      	ldr	r1, [pc, #4]	; (8008bd4 <_cleanup_r+0x8>)
 8008bce:	f000 b8af 	b.w	8008d30 <_fwalk_reent>
 8008bd2:	bf00      	nop
 8008bd4:	08008b0d 	.word	0x08008b0d

08008bd8 <__sfmoreglue>:
 8008bd8:	2268      	movs	r2, #104	; 0x68
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	1e4d      	subs	r5, r1, #1
 8008bde:	4355      	muls	r5, r2
 8008be0:	460e      	mov	r6, r1
 8008be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008be6:	f7ff fae7 	bl	80081b8 <_malloc_r>
 8008bea:	4604      	mov	r4, r0
 8008bec:	b140      	cbz	r0, 8008c00 <__sfmoreglue+0x28>
 8008bee:	2100      	movs	r1, #0
 8008bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8008bf4:	300c      	adds	r0, #12
 8008bf6:	60a0      	str	r0, [r4, #8]
 8008bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bfc:	f7fb fdf6 	bl	80047ec <memset>
 8008c00:	4620      	mov	r0, r4
 8008c02:	bd70      	pop	{r4, r5, r6, pc}

08008c04 <__sfp_lock_acquire>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__sfp_lock_acquire+0x8>)
 8008c06:	f000 b8b3 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	200003ad 	.word	0x200003ad

08008c10 <__sfp_lock_release>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__sfp_lock_release+0x8>)
 8008c12:	f000 b8ae 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	200003ad 	.word	0x200003ad

08008c1c <__sinit_lock_acquire>:
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <__sinit_lock_acquire+0x8>)
 8008c1e:	f000 b8a7 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008c22:	bf00      	nop
 8008c24:	200003ae 	.word	0x200003ae

08008c28 <__sinit_lock_release>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__sinit_lock_release+0x8>)
 8008c2a:	f000 b8a2 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008c2e:	bf00      	nop
 8008c30:	200003ae 	.word	0x200003ae

08008c34 <__sinit>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	f7ff fff0 	bl	8008c1c <__sinit_lock_acquire>
 8008c3c:	69a3      	ldr	r3, [r4, #24]
 8008c3e:	b11b      	cbz	r3, 8008c48 <__sinit+0x14>
 8008c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c44:	f7ff bff0 	b.w	8008c28 <__sinit_lock_release>
 8008c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <__sinit+0x68>)
 8008c50:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <__sinit+0x6c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	bf08      	it	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	bf08      	it	eq
 8008c60:	61a3      	streq	r3, [r4, #24]
 8008c62:	f000 f81f 	bl	8008ca4 <__sfp>
 8008c66:	6060      	str	r0, [r4, #4]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f81b 	bl	8008ca4 <__sfp>
 8008c6e:	60a0      	str	r0, [r4, #8]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f817 	bl	8008ca4 <__sfp>
 8008c76:	2200      	movs	r2, #0
 8008c78:	2104      	movs	r1, #4
 8008c7a:	60e0      	str	r0, [r4, #12]
 8008c7c:	6860      	ldr	r0, [r4, #4]
 8008c7e:	f7ff ff81 	bl	8008b84 <std>
 8008c82:	2201      	movs	r2, #1
 8008c84:	2109      	movs	r1, #9
 8008c86:	68a0      	ldr	r0, [r4, #8]
 8008c88:	f7ff ff7c 	bl	8008b84 <std>
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	2112      	movs	r1, #18
 8008c90:	68e0      	ldr	r0, [r4, #12]
 8008c92:	f7ff ff77 	bl	8008b84 <std>
 8008c96:	2301      	movs	r3, #1
 8008c98:	61a3      	str	r3, [r4, #24]
 8008c9a:	e7d1      	b.n	8008c40 <__sinit+0xc>
 8008c9c:	08009120 	.word	0x08009120
 8008ca0:	08008bcd 	.word	0x08008bcd

08008ca4 <__sfp>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	f7ff ffac 	bl	8008c04 <__sfp_lock_acquire>
 8008cac:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <__sfp+0x84>)
 8008cae:	681e      	ldr	r6, [r3, #0]
 8008cb0:	69b3      	ldr	r3, [r6, #24]
 8008cb2:	b913      	cbnz	r3, 8008cba <__sfp+0x16>
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff ffbd 	bl	8008c34 <__sinit>
 8008cba:	3648      	adds	r6, #72	; 0x48
 8008cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	d503      	bpl.n	8008ccc <__sfp+0x28>
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	b30b      	cbz	r3, 8008d0c <__sfp+0x68>
 8008cc8:	6836      	ldr	r6, [r6, #0]
 8008cca:	e7f7      	b.n	8008cbc <__sfp+0x18>
 8008ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd0:	b9d5      	cbnz	r5, 8008d08 <__sfp+0x64>
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <__sfp+0x88>)
 8008cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cd8:	60e3      	str	r3, [r4, #12]
 8008cda:	6665      	str	r5, [r4, #100]	; 0x64
 8008cdc:	f000 f847 	bl	8008d6e <__retarget_lock_init_recursive>
 8008ce0:	f7ff ff96 	bl	8008c10 <__sfp_lock_release>
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	61a5      	str	r5, [r4, #24]
 8008cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cf8:	f7fb fd78 	bl	80047ec <memset>
 8008cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d04:	4620      	mov	r0, r4
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	3468      	adds	r4, #104	; 0x68
 8008d0a:	e7d9      	b.n	8008cc0 <__sfp+0x1c>
 8008d0c:	2104      	movs	r1, #4
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f7ff ff62 	bl	8008bd8 <__sfmoreglue>
 8008d14:	4604      	mov	r4, r0
 8008d16:	6030      	str	r0, [r6, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1d5      	bne.n	8008cc8 <__sfp+0x24>
 8008d1c:	f7ff ff78 	bl	8008c10 <__sfp_lock_release>
 8008d20:	230c      	movs	r3, #12
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	e7ee      	b.n	8008d04 <__sfp+0x60>
 8008d26:	bf00      	nop
 8008d28:	08009120 	.word	0x08009120
 8008d2c:	ffff0001 	.word	0xffff0001

08008d30 <_fwalk_reent>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4606      	mov	r6, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	2700      	movs	r7, #0
 8008d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d42:	f1b9 0901 	subs.w	r9, r9, #1
 8008d46:	d505      	bpl.n	8008d54 <_fwalk_reent+0x24>
 8008d48:	6824      	ldr	r4, [r4, #0]
 8008d4a:	2c00      	cmp	r4, #0
 8008d4c:	d1f7      	bne.n	8008d3e <_fwalk_reent+0xe>
 8008d4e:	4638      	mov	r0, r7
 8008d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d54:	89ab      	ldrh	r3, [r5, #12]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d907      	bls.n	8008d6a <_fwalk_reent+0x3a>
 8008d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	d003      	beq.n	8008d6a <_fwalk_reent+0x3a>
 8008d62:	4629      	mov	r1, r5
 8008d64:	4630      	mov	r0, r6
 8008d66:	47c0      	blx	r8
 8008d68:	4307      	orrs	r7, r0
 8008d6a:	3568      	adds	r5, #104	; 0x68
 8008d6c:	e7e9      	b.n	8008d42 <_fwalk_reent+0x12>

08008d6e <__retarget_lock_init_recursive>:
 8008d6e:	4770      	bx	lr

08008d70 <__retarget_lock_acquire_recursive>:
 8008d70:	4770      	bx	lr

08008d72 <__retarget_lock_release_recursive>:
 8008d72:	4770      	bx	lr

08008d74 <__swhatbuf_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	461d      	mov	r5, r3
 8008d82:	b096      	sub	sp, #88	; 0x58
 8008d84:	da08      	bge.n	8008d98 <__swhatbuf_r+0x24>
 8008d86:	2200      	movs	r2, #0
 8008d88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	061a      	lsls	r2, r3, #24
 8008d90:	d410      	bmi.n	8008db4 <__swhatbuf_r+0x40>
 8008d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d96:	e00e      	b.n	8008db6 <__swhatbuf_r+0x42>
 8008d98:	466a      	mov	r2, sp
 8008d9a:	f000 f951 	bl	8009040 <_fstat_r>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	dbf1      	blt.n	8008d86 <__swhatbuf_r+0x12>
 8008da2:	9a01      	ldr	r2, [sp, #4]
 8008da4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008da8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dac:	425a      	negs	r2, r3
 8008dae:	415a      	adcs	r2, r3
 8008db0:	602a      	str	r2, [r5, #0]
 8008db2:	e7ee      	b.n	8008d92 <__swhatbuf_r+0x1e>
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	2000      	movs	r0, #0
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	b016      	add	sp, #88	; 0x58
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dc0 <__smakebuf_r>:
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dc4:	079d      	lsls	r5, r3, #30
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	d507      	bpl.n	8008ddc <__smakebuf_r+0x1c>
 8008dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	6123      	str	r3, [r4, #16]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6163      	str	r3, [r4, #20]
 8008dd8:	b002      	add	sp, #8
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	466a      	mov	r2, sp
 8008dde:	ab01      	add	r3, sp, #4
 8008de0:	f7ff ffc8 	bl	8008d74 <__swhatbuf_r>
 8008de4:	9900      	ldr	r1, [sp, #0]
 8008de6:	4605      	mov	r5, r0
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff f9e5 	bl	80081b8 <_malloc_r>
 8008dee:	b948      	cbnz	r0, 8008e04 <__smakebuf_r+0x44>
 8008df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df4:	059a      	lsls	r2, r3, #22
 8008df6:	d4ef      	bmi.n	8008dd8 <__smakebuf_r+0x18>
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	e7e3      	b.n	8008dcc <__smakebuf_r+0xc>
 8008e04:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <__smakebuf_r+0x7c>)
 8008e06:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	6020      	str	r0, [r4, #0]
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	9b00      	ldr	r3, [sp, #0]
 8008e14:	6120      	str	r0, [r4, #16]
 8008e16:	6163      	str	r3, [r4, #20]
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	b15b      	cbz	r3, 8008e34 <__smakebuf_r+0x74>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e22:	f000 f91f 	bl	8009064 <_isatty_r>
 8008e26:	b128      	cbz	r0, 8008e34 <__smakebuf_r+0x74>
 8008e28:	89a3      	ldrh	r3, [r4, #12]
 8008e2a:	f023 0303 	bic.w	r3, r3, #3
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	89a0      	ldrh	r0, [r4, #12]
 8008e36:	4305      	orrs	r5, r0
 8008e38:	81a5      	strh	r5, [r4, #12]
 8008e3a:	e7cd      	b.n	8008dd8 <__smakebuf_r+0x18>
 8008e3c:	08008bcd 	.word	0x08008bcd

08008e40 <memmove>:
 8008e40:	4288      	cmp	r0, r1
 8008e42:	b510      	push	{r4, lr}
 8008e44:	eb01 0402 	add.w	r4, r1, r2
 8008e48:	d902      	bls.n	8008e50 <memmove+0x10>
 8008e4a:	4284      	cmp	r4, r0
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	d807      	bhi.n	8008e60 <memmove+0x20>
 8008e50:	1e43      	subs	r3, r0, #1
 8008e52:	42a1      	cmp	r1, r4
 8008e54:	d008      	beq.n	8008e68 <memmove+0x28>
 8008e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e5e:	e7f8      	b.n	8008e52 <memmove+0x12>
 8008e60:	4601      	mov	r1, r0
 8008e62:	4402      	add	r2, r0
 8008e64:	428a      	cmp	r2, r1
 8008e66:	d100      	bne.n	8008e6a <memmove+0x2a>
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e72:	e7f7      	b.n	8008e64 <memmove+0x24>

08008e74 <__malloc_lock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__malloc_lock+0x8>)
 8008e76:	f7ff bf7b 	b.w	8008d70 <__retarget_lock_acquire_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	200003ac 	.word	0x200003ac

08008e80 <__malloc_unlock>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__malloc_unlock+0x8>)
 8008e82:	f7ff bf76 	b.w	8008d72 <__retarget_lock_release_recursive>
 8008e86:	bf00      	nop
 8008e88:	200003ac 	.word	0x200003ac

08008e8c <_realloc_r>:
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	4680      	mov	r8, r0
 8008e92:	4614      	mov	r4, r2
 8008e94:	460e      	mov	r6, r1
 8008e96:	b921      	cbnz	r1, 8008ea2 <_realloc_r+0x16>
 8008e98:	4611      	mov	r1, r2
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	f7ff b98b 	b.w	80081b8 <_malloc_r>
 8008ea2:	b92a      	cbnz	r2, 8008eb0 <_realloc_r+0x24>
 8008ea4:	f7ff f920 	bl	80080e8 <_free_r>
 8008ea8:	4625      	mov	r5, r4
 8008eaa:	4628      	mov	r0, r5
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	f000 f8fa 	bl	80090a8 <_malloc_usable_size_r>
 8008eb4:	4284      	cmp	r4, r0
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	d802      	bhi.n	8008ec0 <_realloc_r+0x34>
 8008eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ebe:	d812      	bhi.n	8008ee6 <_realloc_r+0x5a>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	f7ff f978 	bl	80081b8 <_malloc_r>
 8008ec8:	4605      	mov	r5, r0
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d0ed      	beq.n	8008eaa <_realloc_r+0x1e>
 8008ece:	42bc      	cmp	r4, r7
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	bf28      	it	cs
 8008ed6:	463a      	movcs	r2, r7
 8008ed8:	f7fe fc2c 	bl	8007734 <memcpy>
 8008edc:	4631      	mov	r1, r6
 8008ede:	4640      	mov	r0, r8
 8008ee0:	f7ff f902 	bl	80080e8 <_free_r>
 8008ee4:	e7e1      	b.n	8008eaa <_realloc_r+0x1e>
 8008ee6:	4635      	mov	r5, r6
 8008ee8:	e7df      	b.n	8008eaa <_realloc_r+0x1e>

08008eea <_raise_r>:
 8008eea:	291f      	cmp	r1, #31
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	d904      	bls.n	8008efe <_raise_r+0x14>
 8008ef4:	2316      	movs	r3, #22
 8008ef6:	6003      	str	r3, [r0, #0]
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f00:	b112      	cbz	r2, 8008f08 <_raise_r+0x1e>
 8008f02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f06:	b94b      	cbnz	r3, 8008f1c <_raise_r+0x32>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 f831 	bl	8008f70 <_getpid_r>
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4601      	mov	r1, r0
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f18:	f000 b818 	b.w	8008f4c <_kill_r>
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d00a      	beq.n	8008f36 <_raise_r+0x4c>
 8008f20:	1c59      	adds	r1, r3, #1
 8008f22:	d103      	bne.n	8008f2c <_raise_r+0x42>
 8008f24:	2316      	movs	r3, #22
 8008f26:	6003      	str	r3, [r0, #0]
 8008f28:	2001      	movs	r0, #1
 8008f2a:	e7e7      	b.n	8008efc <_raise_r+0x12>
 8008f2c:	2400      	movs	r4, #0
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f34:	4798      	blx	r3
 8008f36:	2000      	movs	r0, #0
 8008f38:	e7e0      	b.n	8008efc <_raise_r+0x12>
	...

08008f3c <raise>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <raise+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f7ff bfd2 	b.w	8008eea <_raise_r>
 8008f46:	bf00      	nop
 8008f48:	20000010 	.word	0x20000010

08008f4c <_kill_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4d06      	ldr	r5, [pc, #24]	; (8008f6c <_kill_r+0x20>)
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	f7f8 fb0c 	bl	8001576 <_kill>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d102      	bne.n	8008f68 <_kill_r+0x1c>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	b103      	cbz	r3, 8008f68 <_kill_r+0x1c>
 8008f66:	6023      	str	r3, [r4, #0]
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200003b0 	.word	0x200003b0

08008f70 <_getpid_r>:
 8008f70:	f7f8 bafa 	b.w	8001568 <_getpid>

08008f74 <__sread>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	460c      	mov	r4, r1
 8008f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7c:	f000 f89c 	bl	80090b8 <_read_r>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	bfab      	itete	ge
 8008f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f86:	89a3      	ldrhlt	r3, [r4, #12]
 8008f88:	181b      	addge	r3, r3, r0
 8008f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f8e:	bfac      	ite	ge
 8008f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f92:	81a3      	strhlt	r3, [r4, #12]
 8008f94:	bd10      	pop	{r4, pc}

08008f96 <__swrite>:
 8008f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	461f      	mov	r7, r3
 8008f9c:	898b      	ldrh	r3, [r1, #12]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	05db      	lsls	r3, r3, #23
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	d505      	bpl.n	8008fb4 <__swrite+0x1e>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	2200      	movs	r2, #0
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	f000 f868 	bl	8009084 <_lseek_r>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	4632      	mov	r2, r6
 8008fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	f000 b817 	b.w	8008ffc <_write_r>

08008fce <__sseek>:
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd6:	f000 f855 	bl	8009084 <_lseek_r>
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	bf15      	itete	ne
 8008fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strheq	r3, [r4, #12]
 8008fec:	bf18      	it	ne
 8008fee:	81a3      	strhne	r3, [r4, #12]
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <__sclose>:
 8008ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff6:	f000 b813 	b.w	8009020 <_close_r>
	...

08008ffc <_write_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	2200      	movs	r2, #0
 8009006:	4d05      	ldr	r5, [pc, #20]	; (800901c <_write_r+0x20>)
 8009008:	602a      	str	r2, [r5, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	f7f8 faea 	bl	80015e4 <_write>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_write_r+0x1e>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_write_r+0x1e>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	200003b0 	.word	0x200003b0

08009020 <_close_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	2300      	movs	r3, #0
 8009024:	4d05      	ldr	r5, [pc, #20]	; (800903c <_close_r+0x1c>)
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	f7f8 faf6 	bl	800161c <_close>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_close_r+0x1a>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_close_r+0x1a>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	200003b0 	.word	0x200003b0

08009040 <_fstat_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	2300      	movs	r3, #0
 8009044:	4d06      	ldr	r5, [pc, #24]	; (8009060 <_fstat_r+0x20>)
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	4611      	mov	r1, r2
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	f7f8 faf0 	bl	8001632 <_fstat>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d102      	bne.n	800905c <_fstat_r+0x1c>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	b103      	cbz	r3, 800905c <_fstat_r+0x1c>
 800905a:	6023      	str	r3, [r4, #0]
 800905c:	bd38      	pop	{r3, r4, r5, pc}
 800905e:	bf00      	nop
 8009060:	200003b0 	.word	0x200003b0

08009064 <_isatty_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	2300      	movs	r3, #0
 8009068:	4d05      	ldr	r5, [pc, #20]	; (8009080 <_isatty_r+0x1c>)
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	f7f8 faee 	bl	8001650 <_isatty>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_isatty_r+0x1a>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_isatty_r+0x1a>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	200003b0 	.word	0x200003b0

08009084 <_lseek_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	2200      	movs	r2, #0
 800908e:	4d05      	ldr	r5, [pc, #20]	; (80090a4 <_lseek_r+0x20>)
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f8 fae6 	bl	8001664 <_lseek>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_lseek_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_lseek_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200003b0 	.word	0x200003b0

080090a8 <_malloc_usable_size_r>:
 80090a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ac:	1f18      	subs	r0, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbc      	itt	lt
 80090b2:	580b      	ldrlt	r3, [r1, r0]
 80090b4:	18c0      	addlt	r0, r0, r3
 80090b6:	4770      	bx	lr

080090b8 <_read_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	4611      	mov	r1, r2
 80090c0:	2200      	movs	r2, #0
 80090c2:	4d05      	ldr	r5, [pc, #20]	; (80090d8 <_read_r+0x20>)
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7f8 fa6f 	bl	80015aa <_read>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_read_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_read_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200003b0 	.word	0x200003b0

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
