
RTC_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08008f98  08008f98  00018f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009478  08009478  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009478  08009478  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009478  08009478  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001e0  08009660  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08009660  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010833  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d0  00000000  00000000  00030a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019690  00000000  00000000  00035540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001372a  00000000  00000000  0004ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090753  00000000  00000000  000622fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2a4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  000f2aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f7c 	.word	0x08008f7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008f7c 	.word	0x08008f7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_f2iz>:
 8000b28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b30:	d30f      	bcc.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_f2iz+0x30>
 8000b3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b48:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4c:	bf18      	it	ne
 8000b4e:	4240      	negne	r0, r0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr
 8000b58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b5c:	d101      	bne.n	8000b62 <__aeabi_f2iz+0x3a>
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	d105      	bne.n	8000b6e <__aeabi_f2iz+0x46>
 8000b62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b66:	bf08      	it	eq
 8000b68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f023 030f 	bic.w	r3, r3, #15
 8000b84:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	f043 030c 	orr.w	r3, r3, #12
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	f043 030c 	orr.w	r3, r3, #12
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bb4:	f107 0208 	add.w	r2, r7, #8
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	214e      	movs	r1, #78	; 0x4e
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <lcd_send_cmd+0x5c>)
 8000bc2:	f002 f8c5 	bl	8002d50 <HAL_I2C_Master_Transmit>
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001fc 	.word	0x200001fc

08000bd4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f023 030f 	bic.w	r3, r3, #15
 8000be4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f043 030d 	orr.w	r3, r3, #13
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f043 0309 	orr.w	r3, r3, #9
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	f043 030d 	orr.w	r3, r3, #13
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	f043 0309 	orr.w	r3, r3, #9
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c14:	f107 0208 	add.w	r2, r7, #8
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	214e      	movs	r1, #78	; 0x4e
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <lcd_send_data+0x5c>)
 8000c22:	f002 f895 	bl	8002d50 <HAL_I2C_Master_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001fc 	.word	0x200001fc

08000c34 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <lcd_put_cur+0x18>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d005      	beq.n	8000c56 <lcd_put_cur+0x22>
 8000c4a:	e009      	b.n	8000c60 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c52:	603b      	str	r3, [r7, #0]
            break;
 8000c54:	e004      	b.n	8000c60 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c5c:	603b      	str	r3, [r7, #0]
            break;
 8000c5e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff85 	bl	8000b74 <lcd_send_cmd>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <lcd_init>:


void lcd_init (void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f001 fa38 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c7c:	2030      	movs	r0, #48	; 0x30
 8000c7e:	f7ff ff79 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c82:	2005      	movs	r0, #5
 8000c84:	f001 fa32 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c88:	2030      	movs	r0, #48	; 0x30
 8000c8a:	f7ff ff73 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f001 fa2c 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c94:	2030      	movs	r0, #48	; 0x30
 8000c96:	f7ff ff6d 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(10);
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f001 fa26 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	f7ff ff67 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 fa20 	bl	80020ec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f7ff ff61 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f001 fa1a 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000cb8:	2008      	movs	r0, #8
 8000cba:	f7ff ff5b 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f001 fa14 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ff55 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f001 fa0e 	bl	80020ec <HAL_Delay>
	HAL_Delay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f001 fa0b 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f7ff ff4c 	bl	8000b74 <lcd_send_cmd>
	HAL_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f001 fa05 	bl	80020ec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ce2:	200c      	movs	r0, #12
 8000ce4:	f7ff ff46 	bl	8000b74 <lcd_send_cmd>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cf4:	e006      	b.n	8000d04 <lcd_send_string+0x18>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff68 	bl	8000bd4 <lcd_send_data>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f4      	bne.n	8000cf6 <lcd_send_string+0xa>
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d20:	1d39      	adds	r1, r7, #4
 8000d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d26:	2201      	movs	r2, #1
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <__io_putchar+0x20>)
 8000d2a:	f004 feaa 	bl	8005a82 <HAL_UART_Transmit>

  return ch;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}//printf를 쓰기위한 함수
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000380 	.word	0x20000380

08000d3c <TIME_LCD>:


void TIME_LCD()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

	sprintf(timer,"Time: %02d : %02d",sTime.Hours,sTime.Minutes);
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <TIME_LCD+0x94>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <TIME_LCD+0x94>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	4922      	ldr	r1, [pc, #136]	; (8000dd4 <TIME_LCD+0x98>)
 8000d4c:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <TIME_LCD+0x9c>)
 8000d4e:	f005 fe97 	bl	8006a80 <siprintf>
	lcd_put_cur(0, 0);
 8000d52:	2100      	movs	r1, #0
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ff6d 	bl	8000c34 <lcd_put_cur>
	lcd_send_string(timer);
 8000d5a:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <TIME_LCD+0x9c>)
 8000d5c:	f7ff ffc6 	bl	8000cec <lcd_send_string>

	printf("%d, %d\n", sTime.Hours, sTime.Minutes);
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <TIME_LCD+0x94>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <TIME_LCD+0x94>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <TIME_LCD+0xa0>)
 8000d6e:	f005 fe31 	bl	80069d4 <iprintf>
	printf(timer);
 8000d72:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <TIME_LCD+0x9c>)
 8000d74:	f005 fe2e 	bl	80069d4 <iprintf>

	if(set_mode == 0){
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <TIME_LCD+0xa4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d110      	bne.n	8000da2 <TIME_LCD+0x66>
		lcd_put_cur(1, 0);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ff56 	bl	8000c34 <lcd_put_cur>
		sprintf(set_time,"Set Time: %02d:%02d ",set_hour,set_minut);
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <TIME_LCD+0xa8>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <TIME_LCD+0xac>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4916      	ldr	r1, [pc, #88]	; (8000dec <TIME_LCD+0xb0>)
 8000d94:	4816      	ldr	r0, [pc, #88]	; (8000df0 <TIME_LCD+0xb4>)
 8000d96:	f005 fe73 	bl	8006a80 <siprintf>
		lcd_send_string(set_time);
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <TIME_LCD+0xb4>)
 8000d9c:	f7ff ffa6 	bl	8000cec <lcd_send_string>
	else if(set_mode == 1){
		lcd_put_cur(1, 0);
		sprintf(set_alarm,"Alarm: %02d:%02d    ",set_alarm_hour,set_alarm_minut);
		lcd_send_string(set_alarm);
	}
}//시간과 알람표현 함수_lcd
 8000da0:	e013      	b.n	8000dca <TIME_LCD+0x8e>
	else if(set_mode == 1){
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <TIME_LCD+0xa4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d10f      	bne.n	8000dca <TIME_LCD+0x8e>
		lcd_put_cur(1, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff41 	bl	8000c34 <lcd_put_cur>
		sprintf(set_alarm,"Alarm: %02d:%02d    ",set_alarm_hour,set_alarm_minut);
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <TIME_LCD+0xb8>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <TIME_LCD+0xbc>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	490f      	ldr	r1, [pc, #60]	; (8000dfc <TIME_LCD+0xc0>)
 8000dbe:	4810      	ldr	r0, [pc, #64]	; (8000e00 <TIME_LCD+0xc4>)
 8000dc0:	f005 fe5e 	bl	8006a80 <siprintf>
		lcd_send_string(set_alarm);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <TIME_LCD+0xc4>)
 8000dc6:	f7ff ff91 	bl	8000cec <lcd_send_string>
}//시간과 알람표현 함수_lcd
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000478 	.word	0x20000478
 8000dd4:	08008f98 	.word	0x08008f98
 8000dd8:	20000408 	.word	0x20000408
 8000ddc:	08008fac 	.word	0x08008fac
 8000de0:	20000470 	.word	0x20000470
 8000de4:	20000471 	.word	0x20000471
 8000de8:	20000472 	.word	0x20000472
 8000dec:	08008fb4 	.word	0x08008fb4
 8000df0:	20000428 	.word	0x20000428
 8000df4:	20000473 	.word	0x20000473
 8000df8:	20000474 	.word	0x20000474
 8000dfc:	08008fcc 	.word	0x08008fcc
 8000e00:	20000448 	.word	0x20000448

08000e04 <delay_us>:

void delay_us(uint16_t delay)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0); //TIM3->CNT = 0;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <delay_us+0x2c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < delay); //while(TIM3->CNT < delay);
 8000e16:	bf00      	nop
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <delay_us+0x2c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3f9      	bcc.n	8000e18 <delay_us+0x14>
}//us단위 delay함수
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	200002f4 	.word	0x200002f4

08000e34 <delay_ms>:
void delay_ms(uint16_t delay)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0); //TIM1->CNT = 0;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <delay_ms+0x2c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay); //while(TIM1->CNT < delay);
 8000e46:	bf00      	nop
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <delay_ms+0x2c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3f9      	bcc.n	8000e48 <delay_ms+0x14>
}//ms단위 delay함수
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	20000264 	.word	0x20000264

08000e64 <Trig>:

void Trig()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trig_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <Trig+0x24>)
 8000e6e:	f001 fde1 	bl	8002a34 <HAL_GPIO_WritePin>
	delay_us(10);
 8000e72:	200a      	movs	r0, #10
 8000e74:	f7ff ffc6 	bl	8000e04 <delay_us>
	HAL_GPIO_WritePin(GPIOA, Trig_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <Trig+0x24>)
 8000e7e:	f001 fdd9 	bl	8002a34 <HAL_GPIO_WritePin>
}//초음파 Trigger함수
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010800 	.word	0x40010800

08000e8c <WayGame>:

void WayGame()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  for(int i = 0; i < 5; i++){
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	e038      	b.n	8000f0a <WayGame+0x7e>
  	num1 = rand() % 4;
 8000e98:	f005 fdb4 	bl	8006a04 <rand>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	425a      	negs	r2, r3
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	f002 0203 	and.w	r2, r2, #3
 8000ea8:	bf58      	it	pl
 8000eaa:	4253      	negpl	r3, r2
 8000eac:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <WayGame+0xd8>)
 8000eae:	6013      	str	r3, [r2, #0]
  	game[i] = num1;
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <WayGame+0xd8>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	492c      	ldr	r1, [pc, #176]	; (8000f68 <WayGame+0xdc>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  	switch(game[i]){
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <WayGame+0xdc>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d012      	beq.n	8000eee <WayGame+0x62>
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	dc16      	bgt.n	8000efa <WayGame+0x6e>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <WayGame+0x4a>
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d006      	beq.n	8000ee2 <WayGame+0x56>
 8000ed4:	e011      	b.n	8000efa <WayGame+0x6e>
  	case 0:
  		way[i] = 'U';
 8000ed6:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <WayGame+0xe0>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	2255      	movs	r2, #85	; 0x55
 8000ede:	701a      	strb	r2, [r3, #0]
  		break;
 8000ee0:	e010      	b.n	8000f04 <WayGame+0x78>
  	case 1:
  	    way[i] = 'D';
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <WayGame+0xe0>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2244      	movs	r2, #68	; 0x44
 8000eea:	701a      	strb	r2, [r3, #0]
  	  	break;
 8000eec:	e00a      	b.n	8000f04 <WayGame+0x78>
  	case 2:
  	    way[i] = 'L';
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <WayGame+0xe0>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	224c      	movs	r2, #76	; 0x4c
 8000ef6:	701a      	strb	r2, [r3, #0]
  	  	break;
 8000ef8:	e004      	b.n	8000f04 <WayGame+0x78>
  	default:
  	    way[i] = 'R';
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <WayGame+0xe0>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	2252      	movs	r2, #82	; 0x52
 8000f02:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 5; i++){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	ddc3      	ble.n	8000e98 <WayGame+0xc>
  	}
  }

  lcd_put_cur(0, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fe8e 	bl	8000c34 <lcd_put_cur>
  lcd_send_string("GAME START!!    ");
 8000f18:	4815      	ldr	r0, [pc, #84]	; (8000f70 <WayGame+0xe4>)
 8000f1a:	f7ff fee7 	bl	8000cec <lcd_send_string>

  lcd_put_cur(1, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fe87 	bl	8000c34 <lcd_put_cur>
  for(int i=0; i<5; i++){
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	e012      	b.n	8000f52 <WayGame+0xc6>
	  lcd_send_data(way[i]);
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <WayGame+0xe0>)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe4d 	bl	8000bd4 <lcd_send_data>
	  lcd_send_string(" ");
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <WayGame+0xe8>)
 8000f3c:	f7ff fed6 	bl	8000cec <lcd_send_string>
	  if(i==4){
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d102      	bne.n	8000f4c <WayGame+0xc0>
		  lcd_send_string("       ");
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <WayGame+0xec>)
 8000f48:	f7ff fed0 	bl	8000cec <lcd_send_string>
  for(int i=0; i<5; i++){
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	dde9      	ble.n	8000f2c <WayGame+0xa0>
	  }
  }
}//Random Game Start
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004a0 	.word	0x200004a0
 8000f68:	200004a4 	.word	0x200004a4
 8000f6c:	200004b8 	.word	0x200004b8
 8000f70:	08008fe4 	.word	0x08008fe4
 8000f74:	08008ff8 	.word	0x08008ff8
 8000f78:	08008ffc 	.word	0x08008ffc

08000f7c <Cleargame>:
void Cleargame()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	int true_num = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]

	lcd_put_cur(1, 0);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff fe51 	bl	8000c34 <lcd_put_cur>
	while(true_num != 5){
 8000f92:	e038      	b.n	8001006 <Cleargame+0x8a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <Cleargame+0xbc>)
 8000f9a:	f001 fd63 	bl	8002a64 <HAL_GPIO_TogglePin>
		delay_ms(500);
 8000f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa2:	f7ff ff47 	bl	8000e34 <delay_ms>

		Trig();
 8000fa6:	f7ff ff5d 	bl	8000e64 <Trig>
		HAL_UART_Transmit(&huart1, &dis_flag[0], 1, 0xFFFF);
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4922      	ldr	r1, [pc, #136]	; (800103c <Cleargame+0xc0>)
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <Cleargame+0xc4>)
 8000fb4:	f004 fd65 	bl	8005a82 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &dis_flag[1], 1, 0xFFFF);
 8000fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4921      	ldr	r1, [pc, #132]	; (8001044 <Cleargame+0xc8>)
 8000fc0:	481f      	ldr	r0, [pc, #124]	; (8001040 <Cleargame+0xc4>)
 8000fc2:	f004 fd5e 	bl	8005a82 <HAL_UART_Transmit>
		HAL_UART_Receive_DMA(&huart1, &Joystick, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	491f      	ldr	r1, [pc, #124]	; (8001048 <Cleargame+0xcc>)
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <Cleargame+0xc4>)
 8000fcc:	f004 fdeb 	bl	8005ba6 <HAL_UART_Receive_DMA>

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); //RTC 시간받기
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	491e      	ldr	r1, [pc, #120]	; (800104c <Cleargame+0xd0>)
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <Cleargame+0xd4>)
 8000fd6:	f003 f88b 	bl	80040f0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //RTC 날짜받기 사용x_Error 방지
 8000fda:	2200      	movs	r2, #0
 8000fdc:	491d      	ldr	r1, [pc, #116]	; (8001054 <Cleargame+0xd8>)
 8000fde:	481c      	ldr	r0, [pc, #112]	; (8001050 <Cleargame+0xd4>)
 8000fe0:	f003 fa14 	bl	800440c <HAL_RTC_GetDate>

		if(game[i] == Joystick){
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <Cleargame+0xdc>)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <Cleargame+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d108      	bne.n	8001006 <Cleargame+0x8a>
			lcd_send_string ("  ");
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <Cleargame+0xe0>)
 8000ff6:	f7ff fe79 	bl	8000cec <lcd_send_string>
			true_num++;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
			i++;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	603b      	str	r3, [r7, #0]
	while(true_num != 5){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d1c3      	bne.n	8000f94 <Cleargame+0x18>
		}
	}
	dis_flag[0] = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Cleargame+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &dis_flag[0], 1, 0xFFFF);
 8001012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001016:	2201      	movs	r2, #1
 8001018:	4908      	ldr	r1, [pc, #32]	; (800103c <Cleargame+0xc0>)
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <Cleargame+0xc4>)
 800101c:	f004 fd31 	bl	8005a82 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <Cleargame+0xbc>)
 8001028:	f001 fd04 	bl	8002a34 <HAL_GPIO_WritePin>
	TIME_LCD();
 800102c:	f7ff fe86 	bl	8000d3c <TIME_LCD>
}//JoyStick값과 비교하여 Game진행 함수
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40011000 	.word	0x40011000
 800103c:	20000498 	.word	0x20000498
 8001040:	2000033c 	.word	0x2000033c
 8001044:	2000049c 	.word	0x2000049c
 8001048:	20000000 	.word	0x20000000
 800104c:	20000478 	.word	0x20000478
 8001050:	20000250 	.word	0x20000250
 8001054:	2000047c 	.word	0x2000047c
 8001058:	200004a4 	.word	0x200004a4
 800105c:	08009004 	.word	0x08009004

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 ffe0 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f848 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f000 fab4 	bl	80015d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001070:	f000 fa6a 	bl	8001548 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001074:	f000 f8ca 	bl	800120c <MX_RTC_Init>
  MX_I2C1_Init();
 8001078:	f000 f89a 	bl	80011b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800107c:	f000 f9ec 	bl	8001458 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001080:	f000 f97a 	bl	8001378 <MX_TIM2_Init>
  MX_DMA_Init();
 8001084:	f000 fa8a 	bl	800159c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001088:	f000 fa34 	bl	80014f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800108c:	f000 f922 	bl	80012d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 8001090:	f7ff fdef 	bl	8000c72 <lcd_init>
  TIME_LCD(); //초기화면
 8001094:	f7ff fe52 	bl	8000d3c <TIME_LCD>
  HAL_TIM_Base_Start(&htim1); //ms_delay
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <main+0x80>)
 800109a:	f003 fddf 	bl	8004c5c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //us_delay
 800109e:	4811      	ldr	r0, [pc, #68]	; (80010e4 <main+0x84>)
 80010a0:	f003 fddc 	bl	8004c5c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//Input 캡쳐
 80010a4:	2100      	movs	r1, #0
 80010a6:	4810      	ldr	r0, [pc, #64]	; (80010e8 <main+0x88>)
 80010a8:	f003 fe7a 	bl	8004da0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); //RTC 시간받기
 80010ac:	2200      	movs	r2, #0
 80010ae:	490f      	ldr	r1, [pc, #60]	; (80010ec <main+0x8c>)
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <main+0x90>)
 80010b2:	f003 f81d 	bl	80040f0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //RTC 날짜받기 사용x_Error 방지
 80010b6:	2200      	movs	r2, #0
 80010b8:	490e      	ldr	r1, [pc, #56]	; (80010f4 <main+0x94>)
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <main+0x90>)
 80010bc:	f003 f9a6 	bl	800440c <HAL_RTC_GetDate>

	  if(dis_flag[0] == 1){
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <main+0x98>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d104      	bne.n	80010d2 <main+0x72>
		  WayGame();
 80010c8:	f7ff fee0 	bl	8000e8c <WayGame>
		  Cleargame();
 80010cc:	f7ff ff56 	bl	8000f7c <Cleargame>
 80010d0:	e7ec      	b.n	80010ac <main+0x4c>
	  }
	  else if(dis_flag[0] == 0){
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <main+0x98>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e8      	bne.n	80010ac <main+0x4c>
		  TIME_LCD();
 80010da:	f7ff fe2f 	bl	8000d3c <TIME_LCD>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); //RTC 시간받기
 80010de:	e7e5      	b.n	80010ac <main+0x4c>
 80010e0:	20000264 	.word	0x20000264
 80010e4:	200002f4 	.word	0x200002f4
 80010e8:	200002ac 	.word	0x200002ac
 80010ec:	20000478 	.word	0x20000478
 80010f0:	20000250 	.word	0x20000250
 80010f4:	2000047c 	.word	0x2000047c
 80010f8:	20000498 	.word	0x20000498

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fffa 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800112c:	2306      	movs	r3, #6
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001144:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f910 	bl	8003374 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800115a:	f000 fc67 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fb7c 	bl	8003878 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001186:	f000 fc51 	bl	8001a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fd06 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011a2:	f000 fc43 	bl	8001a2c <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_I2C1_Init+0x50>)
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_I2C1_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_I2C1_Init+0x50>)
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_I2C1_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ee:	f001 fc6b 	bl	8002ac8 <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 fc18 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001fc 	.word	0x200001fc
 8001204:	40005400 	.word	0x40005400
 8001208:	000186a0 	.word	0x000186a0

0800120c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2100      	movs	r1, #0
 8001218:	460a      	mov	r2, r1
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	460a      	mov	r2, r1
 800121e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <MX_RTC_Init+0xc0>)
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <MX_RTC_Init+0xc4>)
 8001230:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_RTC_Init+0xc0>)
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_RTC_Init+0xc0>)
 800123c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001240:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <MX_RTC_Init+0xc0>)
 8001244:	f002 fe26 	bl	8003e94 <HAL_RTC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 fbed 	bl	8001a2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001252:	2300      	movs	r3, #0
 8001254:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800125a:	2300      	movs	r3, #0
 800125c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <MX_RTC_Init+0xc0>)
 8001268:	f002 feaa 	bl	8003fc0 <HAL_RTC_SetTime>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 fbdb 	bl	8001a2c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001276:	2301      	movs	r3, #1
 8001278:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800127a:	2301      	movs	r3, #1
 800127c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800127e:	2301      	movs	r3, #1
 8001280:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8001282:	2300      	movs	r3, #0
 8001284:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	480f      	ldr	r0, [pc, #60]	; (80012cc <MX_RTC_Init+0xc0>)
 8001290:	f003 f806 	bl	80042a0 <HAL_RTC_SetDate>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800129a:	f000 fbc7 	bl	8001a2c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800129e:	2301      	movs	r3, #1
 80012a0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80012a6:	2330      	movs	r3, #48	; 0x30
 80012a8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_RTC_Init+0xc0>)
 80012b6:	f003 f8fd 	bl	80044b4 <HAL_RTC_SetAlarm_IT>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80012c0:	f000 fbb4 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000250 	.word	0x20000250
 80012d0:	40002800 	.word	0x40002800

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM1_Init+0x9c>)
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <MX_TIM1_Init+0xa0>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM1_Init+0x9c>)
 80012f8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM1_Init+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM1_Init+0x9c>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM1_Init+0x9c>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM1_Init+0x9c>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM1_Init+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM1_Init+0x9c>)
 8001320:	f003 fc4c 	bl	8004bbc <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800132a:	f000 fb7f 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM1_Init+0x9c>)
 800133c:	f003 ffd2 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001346:	f000 fb71 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM1_Init+0x9c>)
 8001358:	f004 fad6 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001362:	f000 fb63 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000264 	.word	0x20000264
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013ac:	223f      	movs	r2, #63	; 0x3f
 80013ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ca:	4822      	ldr	r0, [pc, #136]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013cc:	f003 fbf6 	bl	8004bbc <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013d6:	f000 fb29 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013e8:	f003 ff7c 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013f2:	f000 fb1b 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <MX_TIM2_Init+0xdc>)
 80013f8:	f003 fc7a 	bl	8004cf0 <HAL_TIM_IC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001402:	f000 fb13 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_TIM2_Init+0xdc>)
 8001416:	f004 fa77 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001420:	f000 fb04 	bl	8001a2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0xdc>)
 800143c:	f003 febe 	bl	80051bc <HAL_TIM_IC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001446:	f000 faf1 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002ac 	.word	0x200002ac

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <MX_TIM3_Init+0x94>)
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_TIM3_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_TIM3_Init+0x94>)
 800147c:	223f      	movs	r2, #63	; 0x3f
 800147e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_TIM3_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_TIM3_Init+0x94>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_TIM3_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_TIM3_Init+0x94>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_TIM3_Init+0x94>)
 800149c:	f003 fb8e 	bl	8004bbc <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 fac1 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_TIM3_Init+0x94>)
 80014b8:	f003 ff14 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 fab3 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_TIM3_Init+0x94>)
 80014d4:	f004 fa18 	bl	8005908 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014de:	f000 faa5 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002f4 	.word	0x200002f4
 80014f0:	40000400 	.word	0x40000400

080014f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART1_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800152c:	f004 fa5c 	bl	80059e8 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f000 fa79 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000033c 	.word	0x2000033c
 8001544:	40013800 	.word	0x40013800

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART2_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001580:	f004 fa32 	bl	80059e8 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 fa4f 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000380 	.word	0x20000380
 8001598:	40004400 	.word	0x40004400

0800159c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_DMA_Init+0x38>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <MX_DMA_Init+0x38>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6153      	str	r3, [r2, #20]
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_DMA_Init+0x38>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 fe8f 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015c4:	200f      	movs	r0, #15
 80015c6:	f000 fea8 	bl	800231a <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ec:	4b46      	ldr	r3, [pc, #280]	; (8001708 <MX_GPIO_Init+0x130>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <MX_GPIO_Init+0x130>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <MX_GPIO_Init+0x130>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <MX_GPIO_Init+0x130>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <MX_GPIO_Init+0x130>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <MX_GPIO_Init+0x130>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_GPIO_Init+0x130>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <MX_GPIO_Init+0x130>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <MX_GPIO_Init+0x130>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <MX_GPIO_Init+0x130>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <MX_GPIO_Init+0x130>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <MX_GPIO_Init+0x130>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f240 1101 	movw	r1, #257	; 0x101
 8001652:	482e      	ldr	r0, [pc, #184]	; (800170c <MX_GPIO_Init+0x134>)
 8001654:	f001 f9ee 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2122      	movs	r1, #34	; 0x22
 800165c:	482c      	ldr	r0, [pc, #176]	; (8001710 <MX_GPIO_Init+0x138>)
 800165e:	f001 f9e9 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001662:	f240 1301 	movw	r3, #257	; 0x101
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2302      	movs	r3, #2
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4824      	ldr	r0, [pc, #144]	; (800170c <MX_GPIO_Init+0x134>)
 800167c:	f001 f856 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin|LD2_Pin;
 8001680:	2322      	movs	r3, #34	; 0x22
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	481e      	ldr	r0, [pc, #120]	; (8001710 <MX_GPIO_Init+0x138>)
 8001698:	f001 f848 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800169c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_GPIO_Init+0x13c>)
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4619      	mov	r1, r3
 80016b0:	4819      	ldr	r0, [pc, #100]	; (8001718 <MX_GPIO_Init+0x140>)
 80016b2:	f001 f83b 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_GPIO_Init+0x13c>)
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <MX_GPIO_Init+0x138>)
 80016cc:	f001 f82e 	bl	800272c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	200a      	movs	r0, #10
 80016d6:	f000 fe04 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016da:	200a      	movs	r0, #10
 80016dc:	f000 fe1d 	bl	800231a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2017      	movs	r0, #23
 80016e6:	f000 fdfc 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ea:	2017      	movs	r0, #23
 80016ec:	f000 fe15 	bl	800231a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2028      	movs	r0, #40	; 0x28
 80016f6:	f000 fdf4 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fa:	2028      	movs	r0, #40	; 0x28
 80016fc:	f000 fe0d 	bl	800231a <HAL_NVIC_EnableIRQ>

}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40011000 	.word	0x40011000
 8001710:	40010800 	.word	0x40010800
 8001714:	10110000 	.word	0x10110000
 8001718:	40010c00 	.word	0x40010c00

0800171c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8){
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172c:	d132      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x78>
		cur_time = TIM1->CNT;
 800172e:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	4a66      	ldr	r2, [pc, #408]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001734:	6013      	str	r3, [r2, #0]
		if(cur_time - pre_time >= 500){
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001744:	d326      	bcc.n	8001794 <HAL_GPIO_EXTI_Callback+0x78>
			if(set_mode == 0){
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_GPIO_EXTI_Callback+0x4e>
				set_hour++;
 800174e:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001758:	701a      	strb	r2, [r3, #0]
				if(set_hour == 24){
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b18      	cmp	r3, #24
 8001760:	d114      	bne.n	800178c <HAL_GPIO_EXTI_Callback+0x70>
					set_hour = 0;
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e010      	b.n	800178c <HAL_GPIO_EXTI_Callback+0x70>
				}
			}//
			else if(set_mode == 1){
 800176a:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d10c      	bne.n	800178c <HAL_GPIO_EXTI_Callback+0x70>
				set_alarm_hour++;
 8001772:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1c0>)
 800177c:	701a      	strb	r2, [r3, #0]
				if(set_alarm_hour == 24){
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b18      	cmp	r3, #24
 8001784:	d102      	bne.n	800178c <HAL_GPIO_EXTI_Callback+0x70>
					set_alarm_hour = 0;
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
				}
			}
			pre_time = cur_time;
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001792:	6013      	str	r3, [r2, #0]
	    }
	}//1번째 Switch_시간단위조절
	if(GPIO_Pin == GPIO_PIN_4){
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2b10      	cmp	r3, #16
 8001798:	d132      	bne.n	8001800 <HAL_GPIO_EXTI_Callback+0xe4>
		cur_time = TIM1->CNT;
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80017a0:	6013      	str	r3, [r2, #0]
		if(cur_time - pre_time >= 500){
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b0:	d326      	bcc.n	8001800 <HAL_GPIO_EXTI_Callback+0xe4>
			if(set_mode == 0){
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_GPIO_EXTI_Callback+0xba>
				set_minut++;
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017c4:	701a      	strb	r2, [r3, #0]
				if(set_minut == 60){
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b3c      	cmp	r3, #60	; 0x3c
 80017cc:	d114      	bne.n	80017f8 <HAL_GPIO_EXTI_Callback+0xdc>
					set_minut = 0;
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e010      	b.n	80017f8 <HAL_GPIO_EXTI_Callback+0xdc>
				}
			}
			else if(set_mode == 1){
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10c      	bne.n	80017f8 <HAL_GPIO_EXTI_Callback+0xdc>
				set_alarm_minut++;
 80017de:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80017e8:	701a      	strb	r2, [r3, #0]
				if(set_alarm_minut == 60){
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b3c      	cmp	r3, #60	; 0x3c
 80017f0:	d102      	bne.n	80017f8 <HAL_GPIO_EXTI_Callback+0xdc>
					set_alarm_minut = 0;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
				}
			}
			pre_time = cur_time;
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80017fe:	6013      	str	r3, [r2, #0]
	    }
	}//2번째 Switch_분단위조절
	if(GPIO_Pin == GPIO_PIN_5){
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b20      	cmp	r3, #32
 8001804:	d138      	bne.n	8001878 <HAL_GPIO_EXTI_Callback+0x15c>
		cur_time = TIM1->CNT;
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	4a30      	ldr	r2, [pc, #192]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 800180c:	6013      	str	r3, [r2, #0]
		if(cur_time - pre_time >= 500){
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800181c:	d32c      	bcc.n	8001878 <HAL_GPIO_EXTI_Callback+0x15c>
			if(set_mode == 0){
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d113      	bne.n	800184e <HAL_GPIO_EXTI_Callback+0x132>
				sTime.Minutes = set_minut;
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800182c:	705a      	strb	r2, [r3, #1]
				sTime.Hours = set_hour;
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001834:	701a      	strb	r2, [r3, #0]
				set_hour = 0;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
				set_minut = 0;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001842:	2200      	movs	r2, #0
 8001844:	4928      	ldr	r1, [pc, #160]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001846:	4829      	ldr	r0, [pc, #164]	; (80018ec <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001848:	f002 fbba 	bl	8003fc0 <HAL_RTC_SetTime>
 800184c:	e010      	b.n	8001870 <HAL_GPIO_EXTI_Callback+0x154>
			}
			else if(set_mode == 1){
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10c      	bne.n	8001870 <HAL_GPIO_EXTI_Callback+0x154>
				sAlarm.AlarmTime.Hours = set_alarm_hour;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800185c:	701a      	strb	r2, [r3, #0]
				sAlarm.AlarmTime.Minutes = set_alarm_minut;
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001864:	705a      	strb	r2, [r3, #1]
				HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001866:	2200      	movs	r2, #0
 8001868:	4921      	ldr	r1, [pc, #132]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800186a:	4820      	ldr	r0, [pc, #128]	; (80018ec <HAL_GPIO_EXTI_Callback+0x1d0>)
 800186c:	f002 fe22 	bl	80044b4 <HAL_RTC_SetAlarm_IT>
			}
			pre_time = cur_time;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001876:	6013      	str	r3, [r2, #0]
		}
	}//3번째 Switch_시간 및 알람 Setting
	if(GPIO_Pin == GPIO_PIN_10){
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187e:	d11e      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x1a2>
		cur_time = TIM1->CNT;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001886:	6013      	str	r3, [r2, #0]
		if(cur_time - pre_time >=500){
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001896:	d312      	bcc.n	80018be <HAL_GPIO_EXTI_Callback+0x1a2>
			if(set_mode == 0){
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d103      	bne.n	80018a8 <HAL_GPIO_EXTI_Callback+0x18c>
				set_mode = 1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e006      	b.n	80018b6 <HAL_GPIO_EXTI_Callback+0x19a>
			}
			else if(set_mode ==1){
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_GPIO_EXTI_Callback+0x19a>
				set_mode = 0;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
			}
			pre_time = cur_time;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80018bc:	6013      	str	r3, [r2, #0]
		}
	}//4번째 Switch_설정모드변경
}//Switch 외부인터럽트
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40012c00 	.word	0x40012c00
 80018cc:	2000046c 	.word	0x2000046c
 80018d0:	20000468 	.word	0x20000468
 80018d4:	20000470 	.word	0x20000470
 80018d8:	20000471 	.word	0x20000471
 80018dc:	20000473 	.word	0x20000473
 80018e0:	20000472 	.word	0x20000472
 80018e4:	20000474 	.word	0x20000474
 80018e8:	20000478 	.word	0x20000478
 80018ec:	20000250 	.word	0x20000250
 80018f0:	20000480 	.word	0x20000480

080018f4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  dis_flag[0] = 1;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RTC_AlarmAEventCallback+0x18>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
}//Alarm 인터럽트 발생시 Game mode 전환
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000498 	.word	0x20000498

08001910 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7f1b      	ldrb	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d16f      	bne.n	8001a00 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if (CaptureFlag == 0)
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d118      	bne.n	800195a <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			IC1 = TIM2->CCR1;
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	4a39      	ldr	r2, [pc, #228]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001930:	6013      	str	r3, [r2, #0]
			CaptureFlag = 1;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a1a      	ldr	r2, [r3, #32]
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020a 	bic.w	r2, r2, #10
 8001946:	621a      	str	r2, [r3, #32]
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0202 	orr.w	r2, r2, #2
 8001956:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
			CaptureFlag = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}//초음파 거리 측정
 8001958:	e052      	b.n	8001a00 <HAL_TIM_IC_CaptureCallback+0xf0>
		else if (CaptureFlag == 1)
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x100>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d14e      	bne.n	8001a00 <HAL_TIM_IC_CaptureCallback+0xf0>
			IC2 = TIM2->CCR1;
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800196a:	6013      	str	r3, [r2, #0]
			distance = 340 * (IC2 - IC1) * 0.000001 / 2 * 100;
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd30 	bl	80003e4 <__aeabi_ui2d>
 8001984:	a320      	add	r3, pc, #128	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fda5 	bl	80004d8 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199e:	f7fe fec5 	bl	800072c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x110>)
 80019b0:	f7fe fd92 	bl	80004d8 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f864 	bl	8000a88 <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019c4:	6013      	str	r3, [r2, #0]
			dis_flag[1] = distance;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x114>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f8ac 	bl	8000b28 <__aeabi_f2iz>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_TIM_IC_CaptureCallback+0x118>)
 80019d4:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
			CaptureFlag = 0;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x100>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 020a 	bic.w	r2, r2, #10
 80019f2:	621a      	str	r2, [r3, #32]
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x108>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a12      	ldr	r2, [r2, #32]
 80019fe:	621a      	str	r2, [r3, #32]
}//초음파 거리 측정
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	a0b5ed8d 	.word	0xa0b5ed8d
 8001a0c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001a10:	20000490 	.word	0x20000490
 8001a14:	20000488 	.word	0x20000488
 8001a18:	200002ac 	.word	0x200002ac
 8001a1c:	2000048c 	.word	0x2000048c
 8001a20:	40590000 	.word	0x40590000
 8001a24:	20000494 	.word	0x20000494
 8001a28:	20000498 	.word	0x20000498

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_MspInit+0x60>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_MspInit+0x60>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_I2C_MspInit+0x70>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d123      	bne.n	8001b04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad4:	23c0      	movs	r3, #192	; 0xc0
 8001ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad8:	2312      	movs	r3, #18
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <HAL_I2C_MspInit+0x78>)
 8001ae8:	f000 fe20 	bl	800272c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	61d3      	str	r3, [r2, #28]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_I2C_MspInit+0x74>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010c00 	.word	0x40010c00

08001b18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_RTC_MspInit+0x4c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d118      	bne.n	8001b5c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001b2a:	f001 fc17 	bl	800335c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_RTC_MspInit+0x50>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_RTC_MspInit+0x50>)
 8001b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RTC_MspInit+0x50>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RTC_MspInit+0x54>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2029      	movs	r0, #41	; 0x29
 8001b52:	f000 fbc6 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b56:	2029      	movs	r0, #41	; 0x29
 8001b58:	f000 fbdf 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40002800 	.word	0x40002800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	4242043c 	.word	0x4242043c

08001b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_TIM_Base_MspInit+0xc8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d10c      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001b96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ba8:	e042      	b.n	8001c30 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d12c      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <HAL_TIM_Base_MspInit+0xd0>)
 8001bf8:	f000 fd98 	bl	800272c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	201c      	movs	r0, #28
 8001c02:	f000 fb6e 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c06:	201c      	movs	r0, #28
 8001c08:	f000 fb87 	bl	800231a <HAL_NVIC_EnableIRQ>
}
 8001c0c:	e010      	b.n	8001c30 <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_TIM_Base_MspInit+0xd4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10b      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	61d3      	str	r3, [r2, #28]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_TIM_Base_MspInit+0xcc>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40012c00 	.word	0x40012c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40000400 	.word	0x40000400

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a45      	ldr	r2, [pc, #276]	; (8001d78 <HAL_UART_MspInit+0x130>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d15a      	bne.n	8001d1e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c68:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0318 	add.w	r3, r7, #24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4834      	ldr	r0, [pc, #208]	; (8001d80 <HAL_UART_MspInit+0x138>)
 8001cae:	f000 fd3d 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	482e      	ldr	r0, [pc, #184]	; (8001d80 <HAL_UART_MspInit+0x138>)
 8001cc8:	f000 fd30 	bl	800272c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <HAL_UART_MspInit+0x140>)
 8001cd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d00:	4820      	ldr	r0, [pc, #128]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001d02:	f000 fb25 	bl	8002350 <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001d0c:	f7ff fe8e 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_UART_MspInit+0x13c>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1c:	e028      	b.n	8001d70 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_UART_MspInit+0x144>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d123      	bne.n	8001d70 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d32:	61d3      	str	r3, [r2, #28]
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_UART_MspInit+0x134>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2302      	movs	r3, #2
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_UART_MspInit+0x138>)
 8001d6c:	f000 fcde 	bl	800272c <HAL_GPIO_Init>
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	200003c4 	.word	0x200003c4
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	40004400 	.word	0x40004400

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f96d 	bl	80020b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001de2:	2010      	movs	r0, #16
 8001de4:	f000 fe58 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA1_Channel5_IRQHandler+0x10>)
 8001df2:	f000 fb67 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200003c4 	.word	0x200003c4

08001e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e04:	2020      	movs	r0, #32
 8001e06:	f000 fe47 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e0e:	f000 fe43 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM2_IRQHandler+0x10>)
 8001e1e:	f003 f8c5 	bl	8004fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200002ac 	.word	0x200002ac

08001e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e34:	f000 fe30 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <RTC_Alarm_IRQHandler+0x10>)
 8001e42:	f002 fbef 	bl	8004624 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000250 	.word	0x20000250

08001e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <_kill>:

int _kill(int pid, int sig)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e68:	f004 f922 	bl	80060b0 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2216      	movs	r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
	return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_exit>:

void _exit (int status)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e86:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffe7 	bl	8001e5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e90:	e7fe      	b.n	8001e90 <_exit+0x12>

08001e92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e00a      	b.n	8001eba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	60ba      	str	r2, [r7, #8]
 8001eb0:	b2ca      	uxtb	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbf0      	blt.n	8001ea4 <_read+0x12>
	}

return len;
 8001ec2:	687b      	ldr	r3, [r7, #4]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e009      	b.n	8001ef2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe ff16 	bl	8000d18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf1      	blt.n	8001ede <_write+0x12>
	}
	return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_close>:

int _close(int file)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <_isatty>:

int _isatty(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f004 f88c 	bl	80060b0 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20005000 	.word	0x20005000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	200004c0 	.word	0x200004c0
 8001fcc:	200004d8 	.word	0x200004d8

08001fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002002:	f7ff ffe5 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f004 f859 	bl	80060bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800200a:	f7ff f829 	bl	8001060 <main>
  bx lr
 800200e:	4770      	bx	lr
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002018:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 800201c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002020:	200004d8 	.word	0x200004d8

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_Init+0x28>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_Init+0x28>)
 8002032:	f043 0310 	orr.w	r3, r3, #16
 8002036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002038:	2003      	movs	r0, #3
 800203a:	f000 f947 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f808 	bl	8002054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002044:	f7ff fcf8 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x54>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_InitTick+0x58>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206a:	fbb3 f3f1 	udiv	r3, r3, r1
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f95f 	bl	8002336 <HAL_SYSTICK_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e00e      	b.n	80020a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d80a      	bhi.n	800209e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002088:	2200      	movs	r2, #0
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f000 f927 	bl	80022e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <HAL_InitTick+0x5c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000004 	.word	0x20000004
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	20000008 	.word	0x20000008

080020b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_IncTick+0x20>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a03      	ldr	r2, [pc, #12]	; (80020d4 <HAL_IncTick+0x20>)
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	200004c4 	.word	0x200004c4

080020d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b02      	ldr	r3, [pc, #8]	; (80020e8 <HAL_GetTick+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	200004c4 	.word	0x200004c4

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffe0 	bl	80020d8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <__NVIC_EnableIRQ+0x34>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	210f      	movs	r1, #15
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f7ff ff90 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff2d 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f4:	f7ff ff42 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f7ff ff90 	bl	8002224 <NVIC_EncodePriority>
 8002304:	4602      	mov	r2, r0
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff5f 	bl	80021d0 <__NVIC_SetPriority>
}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff35 	bl	8002198 <__NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffa2 	bl	8002288 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e043      	b.n	80023ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_DMA_Init+0xa8>)
 800236e:	4413      	add	r3, r2
 8002370:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_DMA_Init+0xac>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_DMA_Init+0xb0>)
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800239a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800239e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	bffdfff8 	.word	0xbffdfff8
 80023fc:	cccccccd 	.word	0xcccccccd
 8002400:	40020000 	.word	0x40020000

08002404 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Start_IT+0x20>
 8002420:	2302      	movs	r3, #2
 8002422:	e04a      	b.n	80024ba <HAL_DMA_Start_IT+0xb6>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002432:	2b01      	cmp	r3, #1
 8002434:	d13a      	bne.n	80024ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2202      	movs	r2, #2
 800243a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f938 	bl	80026d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 020e 	orr.w	r2, r2, #14
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e00f      	b.n	800249a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0204 	bic.w	r2, r2, #4
 8002488:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 020a 	orr.w	r2, r2, #10
 8002498:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e005      	b.n	80024b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
 80024b6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d04f      	beq.n	800258c <HAL_DMA_IRQHandler+0xc8>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04a      	beq.n	800258c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d029      	beq.n	8002572 <HAL_DMA_IRQHandler+0xae>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_IRQHandler+0xaa>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a63      	ldr	r2, [pc, #396]	; (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01a      	beq.n	8002568 <HAL_DMA_IRQHandler+0xa4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d012      	beq.n	8002562 <HAL_DMA_IRQHandler+0x9e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <HAL_DMA_IRQHandler+0x200>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00a      	beq.n	800255c <HAL_DMA_IRQHandler+0x98>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5f      	ldr	r2, [pc, #380]	; (80026c8 <HAL_DMA_IRQHandler+0x204>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d102      	bne.n	8002556 <HAL_DMA_IRQHandler+0x92>
 8002550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002554:	e00e      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002556:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800255a:	e00b      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 800255c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002560:	e008      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002566:	e005      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256c:	e002      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	e000      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002572:	2304      	movs	r3, #4
 8002574:	4a55      	ldr	r2, [pc, #340]	; (80026cc <HAL_DMA_IRQHandler+0x208>)
 8002576:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8094 	beq.w	80026aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800258a:	e08e      	b.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2202      	movs	r2, #2
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d056      	beq.n	800264a <HAL_DMA_IRQHandler+0x186>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d051      	beq.n	800264a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 020a 	bic.w	r2, r2, #10
 80025c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d029      	beq.n	800262a <HAL_DMA_IRQHandler+0x166>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a37      	ldr	r2, [pc, #220]	; (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d022      	beq.n	8002626 <HAL_DMA_IRQHandler+0x162>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a35      	ldr	r2, [pc, #212]	; (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x15c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d012      	beq.n	800261a <HAL_DMA_IRQHandler+0x156>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <HAL_DMA_IRQHandler+0x200>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00a      	beq.n	8002614 <HAL_DMA_IRQHandler+0x150>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <HAL_DMA_IRQHandler+0x204>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d102      	bne.n	800260e <HAL_DMA_IRQHandler+0x14a>
 8002608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800260c:	e00e      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	e00b      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	e008      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800261a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261e:	e005      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002624:	e002      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002626:	2320      	movs	r3, #32
 8002628:	e000      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800262a:	2302      	movs	r3, #2
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <HAL_DMA_IRQHandler+0x208>)
 800262e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d034      	beq.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002648:	e02f      	b.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020e 	bic.w	r2, r2, #14
 8002672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
    }
  }
  return;
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
}
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40020008 	.word	0x40020008
 80026b8:	4002001c 	.word	0x4002001c
 80026bc:	40020030 	.word	0x40020030
 80026c0:	40020044 	.word	0x40020044
 80026c4:	40020058 	.word	0x40020058
 80026c8:	4002006c 	.word	0x4002006c
 80026cc:	40020000 	.word	0x40020000

080026d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d108      	bne.n	8002710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800270e:	e007      	b.n	8002720 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273e:	e169      	b.n	8002a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002740:	2201      	movs	r2, #1
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	429a      	cmp	r2, r3
 800275a:	f040 8158 	bne.w	8002a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a9a      	ldr	r2, [pc, #616]	; (80029cc <HAL_GPIO_Init+0x2a0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002768:	4a98      	ldr	r2, [pc, #608]	; (80029cc <HAL_GPIO_Init+0x2a0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d875      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800276e:	4a98      	ldr	r2, [pc, #608]	; (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d058      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002774:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <HAL_GPIO_Init+0x2a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d86f      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800277a:	4a96      	ldr	r2, [pc, #600]	; (80029d4 <HAL_GPIO_Init+0x2a8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d052      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002780:	4a94      	ldr	r2, [pc, #592]	; (80029d4 <HAL_GPIO_Init+0x2a8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d869      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002786:	4a94      	ldr	r2, [pc, #592]	; (80029d8 <HAL_GPIO_Init+0x2ac>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04c      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 800278c:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_GPIO_Init+0x2ac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d863      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 8002792:	4a92      	ldr	r2, [pc, #584]	; (80029dc <HAL_GPIO_Init+0x2b0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d046      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
 8002798:	4a90      	ldr	r2, [pc, #576]	; (80029dc <HAL_GPIO_Init+0x2b0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d85d      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d82a      	bhi.n	80027f8 <HAL_GPIO_Init+0xcc>
 80027a2:	2b12      	cmp	r3, #18
 80027a4:	d859      	bhi.n	800285a <HAL_GPIO_Init+0x12e>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <HAL_GPIO_Init+0x80>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	08002827 	.word	0x08002827
 80027b0:	08002801 	.word	0x08002801
 80027b4:	08002813 	.word	0x08002813
 80027b8:	08002855 	.word	0x08002855
 80027bc:	0800285b 	.word	0x0800285b
 80027c0:	0800285b 	.word	0x0800285b
 80027c4:	0800285b 	.word	0x0800285b
 80027c8:	0800285b 	.word	0x0800285b
 80027cc:	0800285b 	.word	0x0800285b
 80027d0:	0800285b 	.word	0x0800285b
 80027d4:	0800285b 	.word	0x0800285b
 80027d8:	0800285b 	.word	0x0800285b
 80027dc:	0800285b 	.word	0x0800285b
 80027e0:	0800285b 	.word	0x0800285b
 80027e4:	0800285b 	.word	0x0800285b
 80027e8:	0800285b 	.word	0x0800285b
 80027ec:	0800285b 	.word	0x0800285b
 80027f0:	08002809 	.word	0x08002809
 80027f4:	0800281d 	.word	0x0800281d
 80027f8:	4a79      	ldr	r2, [pc, #484]	; (80029e0 <HAL_GPIO_Init+0x2b4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fe:	e02c      	b.n	800285a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e029      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e024      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	3308      	adds	r3, #8
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e01f      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	330c      	adds	r3, #12
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e01a      	b.n	800285c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282e:	2304      	movs	r3, #4
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e013      	b.n	800285c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800283c:	2308      	movs	r3, #8
 800283e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	611a      	str	r2, [r3, #16]
          break;
 8002846:	e009      	b.n	800285c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	615a      	str	r2, [r3, #20]
          break;
 8002852:	e003      	b.n	800285c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x130>
          break;
 800285a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2bff      	cmp	r3, #255	; 0xff
 8002860:	d801      	bhi.n	8002866 <HAL_GPIO_Init+0x13a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	e001      	b.n	800286a <HAL_GPIO_Init+0x13e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2bff      	cmp	r3, #255	; 0xff
 8002870:	d802      	bhi.n	8002878 <HAL_GPIO_Init+0x14c>
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x152>
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3b08      	subs	r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	210f      	movs	r1, #15
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80b1 	beq.w	8002a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ac:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a4c      	ldr	r2, [pc, #304]	; (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_GPIO_Init+0x2b8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c4:	4a48      	ldr	r2, [pc, #288]	; (80029e8 <HAL_GPIO_Init+0x2bc>)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	; (80029ec <HAL_GPIO_Init+0x2c0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_GPIO_Init+0x1ec>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <HAL_GPIO_Init+0x2c4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_GPIO_Init+0x1e8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3e      	ldr	r2, [pc, #248]	; (80029f4 <HAL_GPIO_Init+0x2c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <HAL_GPIO_Init+0x1e4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <HAL_GPIO_Init+0x2cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_GPIO_Init+0x1e0>
 8002908:	2303      	movs	r3, #3
 800290a:	e006      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 800290c:	2304      	movs	r3, #4
 800290e:	e004      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002910:	2302      	movs	r3, #2
 8002912:	e002      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_GPIO_Init+0x1ee>
 8002918:	2300      	movs	r3, #0
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	f002 0203 	and.w	r2, r2, #3
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	4093      	lsls	r3, r2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800292a:	492f      	ldr	r1, [pc, #188]	; (80029e8 <HAL_GPIO_Init+0x2bc>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	492c      	ldr	r1, [pc, #176]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	4928      	ldr	r1, [pc, #160]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296c:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4922      	ldr	r1, [pc, #136]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	491e      	ldr	r1, [pc, #120]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4918      	ldr	r1, [pc, #96]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4914      	ldr	r1, [pc, #80]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d021      	beq.n	8002a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
 80029c8:	e021      	b.n	8002a0e <HAL_GPIO_Init+0x2e2>
 80029ca:	bf00      	nop
 80029cc:	10320000 	.word	0x10320000
 80029d0:	10310000 	.word	0x10310000
 80029d4:	10220000 	.word	0x10220000
 80029d8:	10210000 	.word	0x10210000
 80029dc:	10120000 	.word	0x10120000
 80029e0:	10110000 	.word	0x10110000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40010800 	.word	0x40010800
 80029f0:	40010c00 	.word	0x40010c00
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_GPIO_Init+0x304>)
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4909      	ldr	r1, [pc, #36]	; (8002a30 <HAL_GPIO_Init+0x304>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f47f ae8e 	bne.w	8002740 <HAL_GPIO_Init+0x14>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	372c      	adds	r7, #44	; 0x2c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43d9      	mvns	r1, r3
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	400b      	ands	r3, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	611a      	str	r2, [r3, #16]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fe30 	bl	800171c <HAL_GPIO_EXTI_Callback>
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e12b      	b.n	8002d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe ffd4 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f000 fff6 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a81      	ldr	r2, [pc, #516]	; (8002d3c <HAL_I2C_Init+0x274>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d807      	bhi.n	8002b4c <HAL_I2C_Init+0x84>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <HAL_I2C_Init+0x278>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e006      	b.n	8002b5a <HAL_I2C_Init+0x92>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a7d      	ldr	r2, [pc, #500]	; (8002d44 <HAL_I2C_Init+0x27c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf94      	ite	ls
 8002b54:	2301      	movls	r3, #1
 8002b56:	2300      	movhi	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0e7      	b.n	8002d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a78      	ldr	r2, [pc, #480]	; (8002d48 <HAL_I2C_Init+0x280>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0c9b      	lsrs	r3, r3, #18
 8002b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <HAL_I2C_Init+0x274>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d802      	bhi.n	8002b9c <HAL_I2C_Init+0xd4>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	e009      	b.n	8002bb0 <HAL_I2C_Init+0xe8>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	4a69      	ldr	r2, [pc, #420]	; (8002d4c <HAL_I2C_Init+0x284>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	3301      	adds	r3, #1
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	495c      	ldr	r1, [pc, #368]	; (8002d3c <HAL_I2C_Init+0x274>)
 8002bcc:	428b      	cmp	r3, r1
 8002bce:	d819      	bhi.n	8002c04 <HAL_I2C_Init+0x13c>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e59      	subs	r1, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bde:	1c59      	adds	r1, r3, #1
 8002be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002be4:	400b      	ands	r3, r1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_I2C_Init+0x138>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e59      	subs	r1, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfe:	e051      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c00:	2304      	movs	r3, #4
 8002c02:	e04f      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d111      	bne.n	8002c30 <HAL_I2C_Init+0x168>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e012      	b.n	8002c56 <HAL_I2C_Init+0x18e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x196>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e022      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10e      	bne.n	8002c84 <HAL_I2C_Init+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e58      	subs	r0, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	440b      	add	r3, r1
 8002c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c82:	e00f      	b.n	8002ca4 <HAL_I2C_Init+0x1dc>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6809      	ldr	r1, [r1, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6911      	ldr	r1, [r2, #16]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	4311      	orrs	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	000186a0 	.word	0x000186a0
 8002d40:	001e847f 	.word	0x001e847f
 8002d44:	003d08ff 	.word	0x003d08ff
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
 8002d60:	4613      	mov	r3, r2
 8002d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff f9b8 	bl	80020d8 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 80e0 	bne.w	8002f38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2319      	movs	r3, #25
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4970      	ldr	r1, [pc, #448]	; (8002f44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f964 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0d3      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2C_Master_Transmit+0x50>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0cc      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d007      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2210      	movs	r2, #16
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	893a      	ldrh	r2, [r7, #8]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a3a      	ldr	r2, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f89c 	bl	8002f4c <I2C_MasterRequestWrite>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08d      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e34:	e066      	b.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9de 	bl	80031fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9ce 	bl	800327e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d107      	bne.n	8002f00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01a      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d194      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d006      	beq.n	8002f76 <I2C_MasterRequestWrite+0x2a>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d003      	beq.n	8002f76 <I2C_MasterRequestWrite+0x2a>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f74:	d108      	bne.n	8002f88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e00b      	b.n	8002fa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d107      	bne.n	8002fa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f84f 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc6:	d103      	bne.n	8002fd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e035      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fdc:	d108      	bne.n	8002ff0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	e01b      	b.n	8003028 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ff0:	897b      	ldrh	r3, [r7, #10]
 8002ff2:	11db      	asrs	r3, r3, #7
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0306 	and.w	r3, r3, #6
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f063 030f 	orn	r3, r3, #15
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	490e      	ldr	r1, [pc, #56]	; (8003048 <I2C_MasterRequestWrite+0xfc>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f875 	bl	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e010      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301e:	897b      	ldrh	r3, [r7, #10]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <I2C_MasterRequestWrite+0x100>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f865 	bl	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	00010008 	.word	0x00010008
 800304c:	00010002 	.word	0x00010002

08003050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003060:	e025      	b.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d021      	beq.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7ff f835 	bl	80020d8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d116      	bne.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e023      	b.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	e00c      	b.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d0b6      	beq.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310c:	e051      	b.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d123      	bne.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003136:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e046      	b.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d021      	beq.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe ffb3 	bl	80020d8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d116      	bne.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e020      	b.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10c      	bne.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e00b      	b.n	80031ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d18d      	bne.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003208:	e02d      	b.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f878 	bl	8003300 <I2C_IsAcknowledgeFailed>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e02d      	b.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d021      	beq.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe ff59 	bl	80020d8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d1ca      	bne.n	800320a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800328a:	e02d      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f837 	bl	8003300 <I2C_IsAcknowledgeFailed>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e02d      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d021      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe ff18 	bl	80020d8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d1ca      	bne.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003316:	d11b      	bne.n	8003350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	420e0020 	.word	0x420e0020

08003374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e272      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8087 	beq.w	80034a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003394:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b04      	cmp	r3, #4
 800339e:	d00c      	beq.n	80033ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033a0:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d112      	bne.n	80033d2 <HAL_RCC_OscConfig+0x5e>
 80033ac:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ba:	4b89      	ldr	r3, [pc, #548]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d06c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x12c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d168      	bne.n	80034a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e24c      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x76>
 80033dc:	4b80      	ldr	r3, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7f      	ldr	r2, [pc, #508]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e02e      	b.n	8003448 <HAL_RCC_OscConfig+0xd4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a77      	ldr	r2, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xd4>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0xbc>
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xd4>
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6a      	ldr	r2, [pc, #424]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a67      	ldr	r2, [pc, #412]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fe42 	bl	80020d8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fe3e 	bl	80020d8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e200      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xe4>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fe2e 	bl	80020d8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe fe2a 	bl	80020d8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1ec      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x10c>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d063      	beq.n	8003576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ae:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034ba:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x18c>
 80034c6:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x176>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1c0      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4939      	ldr	r1, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe fde3 	bl	80020d8 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe fddf 	bl	80020d8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1a1      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4927      	ldr	r1, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_RCC_OscConfig+0x270>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fdc2 	bl	80020d8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe fdbe 	bl	80020d8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e180      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03a      	beq.n	80035f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d019      	beq.n	80035be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_RCC_OscConfig+0x274>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe fda2 	bl	80020d8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe fd9e 	bl	80020d8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e160      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035b6:	2001      	movs	r0, #1
 80035b8:	f000 fad8 	bl	8003b6c <RCC_Delay>
 80035bc:	e01c      	b.n	80035f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_OscConfig+0x274>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fe fd88 	bl	80020d8 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ca:	e00f      	b.n	80035ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe fd84 	bl	80020d8 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d908      	bls.n	80035ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e146      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	42420000 	.word	0x42420000
 80035e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	4b92      	ldr	r3, [pc, #584]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e9      	bne.n	80035cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a6 	beq.w	8003752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a87      	ldr	r2, [pc, #540]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003620:	61d3      	str	r3, [r2, #28]
 8003622:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	4b82      	ldr	r3, [pc, #520]	; (800383c <HAL_RCC_OscConfig+0x4c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d118      	bne.n	8003670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363e:	4b7f      	ldr	r3, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x4c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7e      	ldr	r2, [pc, #504]	; (800383c <HAL_RCC_OscConfig+0x4c8>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364a:	f7fe fd45 	bl	80020d8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003652:	f7fe fd41 	bl	80020d8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b64      	cmp	r3, #100	; 0x64
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e103      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4c8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d106      	bne.n	8003686 <HAL_RCC_OscConfig+0x312>
 8003678:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a6e      	ldr	r2, [pc, #440]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	e02d      	b.n	80036e2 <HAL_RCC_OscConfig+0x36e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x334>
 800368e:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a66      	ldr	r2, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	6213      	str	r3, [r2, #32]
 80036a6:	e01c      	b.n	80036e2 <HAL_RCC_OscConfig+0x36e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0x356>
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4a60      	ldr	r2, [pc, #384]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6213      	str	r3, [r2, #32]
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a5d      	ldr	r2, [pc, #372]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0x36e>
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a5a      	ldr	r2, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	4b58      	ldr	r3, [pc, #352]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4a57      	ldr	r2, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7fe fcf5 	bl	80020d8 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe fcf1 	bl	80020d8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0b1      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCC_OscConfig+0x37e>
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fcdf 	bl	80020d8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fcdb 	bl	80020d8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e09b      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4a3b      	ldr	r2, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8087 	beq.w	800386a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d061      	beq.n	800382c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d146      	bne.n	80037fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fcaf 	bl	80020d8 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fcab 	bl	80020d8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e06d      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d108      	bne.n	80037b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4921      	ldr	r1, [pc, #132]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a19      	ldr	r1, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	430b      	orrs	r3, r1
 80037ca:	491b      	ldr	r1, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe fc7f 	bl	80020d8 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe fc7b 	bl	80020d8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x46a>
 80037fc:	e035      	b.n	800386a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe fc68 	bl	80020d8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fe fc64 	bl	80020d8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e026      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x498>
 800382a:	e01e      	b.n	800386a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e019      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
 8003840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_OscConfig+0x500>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	429a      	cmp	r2, r3
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d0      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d910      	bls.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4965      	ldr	r1, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d040      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e073      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4936      	ldr	r1, [pc, #216]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fe fbb6 	bl	80020d8 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fe fbb2 	bl	80020d8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e053      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d210      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	490a      	ldr	r1, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1cc>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fb14 	bl	8002054 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08009028 	.word	0x08009028
 8003a44:	20000004 	.word	0x20000004
 8003a48:	20000008 	.word	0x20000008

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b490      	push	{r4, r7}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a54:	1d3c      	adds	r4, r7, #4
 8003a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a5c:	f240 2301 	movw	r3, #513	; 0x201
 8003a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x46>
 8003a8a:	e02b      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a8e:	623b      	str	r3, [r7, #32]
      break;
 8003a90:	e02b      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3328      	adds	r3, #40	; 0x28
 8003a9c:	443b      	add	r3, r7
 8003a9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003aa2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0c5b      	lsrs	r3, r3, #17
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	3328      	adds	r3, #40	; 0x28
 8003aba:	443b      	add	r3, r7
 8003abc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ac0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ac6:	fb03 f202 	mul.w	r2, r3, r2
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	e004      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	623b      	str	r3, [r7, #32]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ae6:	623b      	str	r3, [r7, #32]
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc90      	pop	{r4, r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	08009008 	.word	0x08009008
 8003afc:	40021000 	.word	0x40021000
 8003b00:	007a1200 	.word	0x007a1200
 8003b04:	003d0900 	.word	0x003d0900

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	20000004 	.word	0x20000004

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff2 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08009038 	.word	0x08009038

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffde 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0adb      	lsrs	r3, r3, #11
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08009038 	.word	0x08009038

08003b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <RCC_Delay+0x34>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <RCC_Delay+0x38>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0a5b      	lsrs	r3, r3, #9
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b88:	bf00      	nop
  }
  while (Delay --);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e5a      	subs	r2, r3, #1
 8003b8e:	60fa      	str	r2, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f9      	bne.n	8003b88 <RCC_Delay+0x1c>
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	20000004 	.word	0x20000004
 8003ba4:	10624dd3 	.word	0x10624dd3

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d07d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
 8003be0:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b46      	ldr	r3, [pc, #280]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d118      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfc:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a42      	ldr	r2, [pc, #264]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c08:	f7fe fa66 	bl	80020d8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fe fa62 	bl	80020d8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e06d      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b3a      	ldr	r3, [pc, #232]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c2e:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02e      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d027      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe fa31 	bl	80020d8 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe fa2d 	bl	80020d8 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e036      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ee      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4917      	ldr	r1, [pc, #92]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4904      	ldr	r1, [pc, #16]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42420440 	.word	0x42420440

08003d14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b08d      	sub	sp, #52	; 0x34
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003d1e:	f107 040c 	add.w	r4, r7, #12
 8003d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d28:	f240 2301 	movw	r3, #513	; 0x201
 8003d2c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	f200 808e 	bhi.w	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d049      	beq.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d079      	beq.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d5c:	e086      	b.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003d5e:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07f      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	3330      	adds	r3, #48	; 0x30
 8003d7a:	443b      	add	r3, r7
 8003d7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d80:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c5b      	lsrs	r3, r3, #17
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	3330      	adds	r3, #48	; 0x30
 8003d98:	443b      	add	r3, r7
 8003d9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003daa:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	4a33      	ldr	r2, [pc, #204]	; (8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd2:	d102      	bne.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dd8:	e04a      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003de8:	e042      	b.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfa:	d108      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0c:	e01f      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d109      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003e26:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2c:	e00f      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003e46:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e4c:	e012      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e50:	f7ff fe78 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0b9b      	lsrs	r3, r3, #14
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	3301      	adds	r3, #1
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003e74:	bf00      	nop
    }
  }
  return (frequency);
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3734      	adds	r7, #52	; 0x34
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	08009018 	.word	0x08009018
 8003e84:	40021000 	.word	0x40021000
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	003d0900 	.word	0x003d0900
 8003e90:	aaaaaaab 	.word	0xaaaaaaab

08003e94 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e084      	b.n	8003fb4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7c5b      	ldrb	r3, [r3, #17]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fe2c 	bl	8001b18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fbd6 	bl	8004678 <HAL_RTC_WaitForSynchro>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e06b      	b.n	8003fb4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fc8f 	bl	8004800 <RTC_EnterInitMode>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e060      	b.n	8003fb4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0207 	bic.w	r2, r2, #7
 8003f00:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003f0a:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <HAL_RTC_Init+0x128>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_RTC_Init+0x128>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_RTC_Init+0x128>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4926      	ldr	r1, [pc, #152]	; (8003fbc <HAL_RTC_Init+0x128>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d003      	beq.n	8003f3a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e00e      	b.n	8003f58 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7ff feea 	bl	8003d14 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f40:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e030      	b.n	8003fb4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 010f 	bic.w	r1, r3, #15
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	0c1a      	lsrs	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	b291      	uxth	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fc63 	bl	8004850 <RTC_ExitInitMode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2204      	movs	r2, #4
 8003f94:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00c      	b.n	8003fb4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40006c00 	.word	0x40006c00

08003fc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RTC_SetTime+0x20>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e080      	b.n	80040e6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	7c1b      	ldrb	r3, [r3, #16]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_RTC_SetTime+0x30>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e07a      	b.n	80040e6 <HAL_RTC_SetTime+0x126>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800400c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	4619      	mov	r1, r3
 8004016:	460b      	mov	r3, r1
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a5b      	subs	r3, r3, r1
 800401c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800401e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e01e      	b.n	8004068 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fc53 	bl	80048da <RTC_Bcd2ToByte>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800403c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fc48 	bl	80048da <RTC_Bcd2ToByte>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004056:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	789b      	ldrb	r3, [r3, #2]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fc3c 	bl	80048da <RTC_Bcd2ToByte>
 8004062:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004064:	4423      	add	r3, r4
 8004066:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004068:	6979      	ldr	r1, [r7, #20]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fb61 	bl	8004732 <RTC_WriteTimeCounter>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2204      	movs	r2, #4
 800407a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02f      	b.n	80040e6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0205 	bic.w	r2, r2, #5
 8004094:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fb72 	bl	8004780 <RTC_ReadAlarmCounter>
 800409c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d018      	beq.n	80040d8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d214      	bcs.n	80040d8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040b8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fb78 	bl	80047b2 <RTC_WriteAlarmCounter>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2204      	movs	r2, #4
 80040cc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e006      	b.n	80040e6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
	...

080040f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_RTC_GetTime+0x28>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b5      	b.n	8004288 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0ac      	b.n	8004288 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 facf 	bl	80046d2 <RTC_ReadTimeCounter>
 8004134:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4a55      	ldr	r2, [pc, #340]	; (8004290 <HAL_RTC_GetTime+0x1a0>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0adb      	lsrs	r3, r3, #11
 8004140:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_RTC_GetTime+0x1a0>)
 8004146:	fba3 1302 	umull	r1, r3, r3, r2
 800414a:	0adb      	lsrs	r3, r3, #11
 800414c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	4a4f      	ldr	r2, [pc, #316]	; (8004294 <HAL_RTC_GetTime+0x1a4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <HAL_RTC_GetTime+0x1a0>)
 8004168:	fba2 1203 	umull	r1, r2, r2, r3
 800416c:	0ad2      	lsrs	r2, r2, #11
 800416e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004172:	fb01 f202 	mul.w	r2, r1, r2
 8004176:	1a9a      	subs	r2, r3, r2
 8004178:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_RTC_GetTime+0x1a4>)
 800417a:	fba3 1302 	umull	r1, r3, r3, r2
 800417e:	0959      	lsrs	r1, r3, #5
 8004180:	460b      	mov	r3, r1
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a5b      	subs	r3, r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	1ad1      	subs	r1, r2, r3
 800418a:	b2ca      	uxtb	r2, r1
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b17      	cmp	r3, #23
 8004194:	d955      	bls.n	8004242 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <HAL_RTC_GetTime+0x1a8>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	4b3c      	ldr	r3, [pc, #240]	; (8004298 <HAL_RTC_GetTime+0x1a8>)
 80041a6:	fba3 2301 	umull	r2, r3, r3, r1
 80041aa:	091a      	lsrs	r2, r3, #4
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1aca      	subs	r2, r1, r3
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fadf 	bl	8004780 <RTC_ReadAlarmCounter>
 80041c2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d008      	beq.n	80041de <HAL_RTC_GetTime+0xee>
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d904      	bls.n	80041de <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e002      	b.n	80041e4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_RTC_GetTime+0x1ac>)
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041f2:	69b9      	ldr	r1, [r7, #24]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa9c 	bl	8004732 <RTC_WriteTimeCounter>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e041      	b.n	8004288 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d00c      	beq.n	8004226 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 facb 	bl	80047b2 <RTC_WriteAlarmCounter>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e030      	b.n	8004288 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fac2 	bl	80047b2 <RTC_WriteAlarmCounter>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e027      	b.n	8004288 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004238:	6979      	ldr	r1, [r7, #20]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fb6a 	bl	8004914 <RTC_DateUpdate>
 8004240:	e003      	b.n	800424a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01a      	beq.n	8004286 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fb23 	bl	80048a0 <RTC_ByteToBcd2>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb1a 	bl	80048a0 <RTC_ByteToBcd2>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	789b      	ldrb	r3, [r3, #2]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fb11 	bl	80048a0 <RTC_ByteToBcd2>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	91a2b3c5 	.word	0x91a2b3c5
 8004294:	88888889 	.word	0x88888889
 8004298:	aaaaaaab 	.word	0xaaaaaaab
 800429c:	00015180 	.word	0x00015180

080042a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RTC_SetDate+0x24>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e097      	b.n	80043f8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	7c1b      	ldrb	r3, [r3, #16]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_RTC_SetDate+0x34>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e091      	b.n	80043f8 <HAL_RTC_SetDate+0x158>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10c      	bne.n	8004300 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	78da      	ldrb	r2, [r3, #3]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	785a      	ldrb	r2, [r3, #1]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	789a      	ldrb	r2, [r3, #2]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	739a      	strb	r2, [r3, #14]
 80042fe:	e01a      	b.n	8004336 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	78db      	ldrb	r3, [r3, #3]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fae8 	bl	80048da <RTC_Bcd2ToByte>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fadf 	bl	80048da <RTC_Bcd2ToByte>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	789b      	ldrb	r3, [r3, #2]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fad6 	bl	80048da <RTC_Bcd2ToByte>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	7bdb      	ldrb	r3, [r3, #15]
 800433a:	4618      	mov	r0, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	7b59      	ldrb	r1, [r3, #13]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	7b9b      	ldrb	r3, [r3, #14]
 8004344:	461a      	mov	r2, r3
 8004346:	f000 fbc1 	bl	8004acc <RTC_WeekDayNum>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	7b1a      	ldrb	r2, [r3, #12]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f9b9 	bl	80046d2 <RTC_ReadTimeCounter>
 8004360:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <HAL_RTC_SetDate+0x160>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0adb      	lsrs	r3, r3, #11
 800436c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b18      	cmp	r3, #24
 8004372:	d93a      	bls.n	80043ea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_RTC_SetDate+0x164>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	4a22      	ldr	r2, [pc, #136]	; (8004408 <HAL_RTC_SetDate+0x168>)
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800438a:	69f9      	ldr	r1, [r7, #28]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f9d0 	bl	8004732 <RTC_WriteTimeCounter>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2204      	movs	r2, #4
 800439c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e027      	b.n	80043f8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f9e9 	bl	8004780 <RTC_ReadAlarmCounter>
 80043ae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d018      	beq.n	80043ea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d214      	bcs.n	80043ea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80043c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043ca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f9ef 	bl	80047b2 <RTC_WriteAlarmCounter>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2204      	movs	r2, #4
 80043de:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e006      	b.n	80043f8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	91a2b3c5 	.word	0x91a2b3c5
 8004404:	aaaaaaab 	.word	0xaaaaaaab
 8004408:	00015180 	.word	0x00015180

0800440c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	2100      	movs	r1, #0
 800441e:	460a      	mov	r2, r1
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	460a      	mov	r2, r1
 8004424:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_RTC_GetDate+0x26>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e03a      	b.n	80044ac <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	2200      	movs	r2, #0
 800443c:	4619      	mov	r1, r3
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff fe56 	bl	80040f0 <HAL_RTC_GetTime>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e02e      	b.n	80044ac <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	7b1a      	ldrb	r2, [r3, #12]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	7bda      	ldrb	r2, [r3, #15]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	7b5a      	ldrb	r2, [r3, #13]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	7b9a      	ldrb	r2, [r3, #14]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	78db      	ldrb	r3, [r3, #3]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa11 	bl	80048a0 <RTC_ByteToBcd2>
 800447e:	4603      	mov	r3, r0
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa08 	bl	80048a0 <RTC_ByteToBcd2>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	789b      	ldrb	r3, [r3, #2]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f9ff 	bl	80048a0 <RTC_ByteToBcd2>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	2100      	movs	r1, #0
 80044ca:	460a      	mov	r2, r1
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	460a      	mov	r2, r1
 80044d0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_RTC_SetAlarm_IT+0x2a>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e099      	b.n	8004616 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	7c1b      	ldrb	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_RTC_SetAlarm_IT+0x3a>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e093      	b.n	8004616 <HAL_RTC_SetAlarm_IT+0x162>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2202      	movs	r2, #2
 80044f8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	2200      	movs	r2, #0
 8004500:	4619      	mov	r1, r3
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff fdf4 	bl	80040f0 <HAL_RTC_GetTime>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e081      	b.n	8004616 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004512:	7d3b      	ldrb	r3, [r7, #20]
 8004514:	461a      	mov	r2, r3
 8004516:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800451a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800451e:	7d7b      	ldrb	r3, [r7, #21]
 8004520:	4619      	mov	r1, r3
 8004522:	460b      	mov	r3, r1
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a5b      	subs	r3, r3, r1
 8004528:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800452a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800452c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800452e:	4413      	add	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004542:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	4619      	mov	r1, r3
 800454c:	460b      	mov	r3, r1
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a5b      	subs	r3, r3, r1
 8004552:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004554:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800455a:	4413      	add	r3, r2
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e01e      	b.n	800459e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f9b8 	bl	80048da <RTC_Bcd2ToByte>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004572:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f9ad 	bl	80048da <RTC_Bcd2ToByte>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800458c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	789b      	ldrb	r3, [r3, #2]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f9a1 	bl	80048da <RTC_Bcd2ToByte>
 8004598:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800459a:	4423      	add	r3, r4
 800459c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d205      	bcs.n	80045b2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80045ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80045b0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f8fc 	bl	80047b2 <RTC_WriteAlarmCounter>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2204      	movs	r2, #4
 80045c4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e022      	b.n	8004616 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0202 	bic.w	r2, r2, #2
 80045de:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0202 	orr.w	r2, r2, #2
 80045ee:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RTC_SetAlarm_IT+0x16c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_RTC_SetAlarm_IT+0x16c>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RTC_SetAlarm_IT+0x16c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004606:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}
 800461e:	bf00      	nop
 8004620:	40010400 	.word	0x40010400

08004624 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fd f953 	bl	80018f4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0202 	bic.w	r2, r2, #2
 800465c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004660:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004664:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	745a      	strb	r2, [r3, #17]
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e01d      	b.n	80046ca <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0208 	bic.w	r2, r2, #8
 800469c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800469e:	f7fd fd1b 	bl	80020d8 <HAL_GetTick>
 80046a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046a4:	e009      	b.n	80046ba <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046a6:	f7fd fd17 	bl	80020d8 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b4:	d901      	bls.n	80046ba <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e007      	b.n	80046ca <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ee      	beq.n	80046a6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	827b      	strh	r3, [r7, #18]
 80046de:	2300      	movs	r3, #0
 80046e0:	823b      	strh	r3, [r7, #16]
 80046e2:	2300      	movs	r3, #0
 80046e4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004702:	8a7a      	ldrh	r2, [r7, #18]
 8004704:	8a3b      	ldrh	r3, [r7, #16]
 8004706:	429a      	cmp	r2, r3
 8004708:	d008      	beq.n	800471c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800470a:	8a3b      	ldrh	r3, [r7, #16]
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e004      	b.n	8004726 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800471c:	8a7b      	ldrh	r3, [r7, #18]
 800471e:	041a      	lsls	r2, r3, #16
 8004720:	89fb      	ldrh	r3, [r7, #14]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004726:	697b      	ldr	r3, [r7, #20]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f85d 	bl	8004800 <RTC_EnterInitMode>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e011      	b.n	8004776 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	0c12      	lsrs	r2, r2, #16
 800475a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	b292      	uxth	r2, r2
 8004764:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f872 	bl	8004850 <RTC_ExitInitMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	81fb      	strh	r3, [r7, #14]
 800478c:	2300      	movs	r3, #0
 800478e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	041a      	lsls	r2, r3, #16
 80047a4:	89bb      	ldrh	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f81d 	bl	8004800 <RTC_EnterInitMode>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	e011      	b.n	80047f6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	0c12      	lsrs	r2, r2, #16
 80047da:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b292      	uxth	r2, r2
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f832 	bl	8004850 <RTC_ExitInitMode>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800480c:	f7fd fc64 	bl	80020d8 <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004812:	e009      	b.n	8004828 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004814:	f7fd fc60 	bl	80020d8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004822:	d901      	bls.n	8004828 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e00f      	b.n	8004848 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0210 	orr.w	r2, r2, #16
 8004844:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0210 	bic.w	r2, r2, #16
 800486a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800486c:	f7fd fc34 	bl	80020d8 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004872:	e009      	b.n	8004888 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004874:	f7fd fc30 	bl	80020d8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004882:	d901      	bls.n	8004888 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e007      	b.n	8004898 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0ee      	beq.n	8004874 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80048ae:	e005      	b.n	80048bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	3b0a      	subs	r3, #10
 80048ba:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	2b09      	cmp	r3, #9
 80048c0:	d8f6      	bhi.n	80048b0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	b2db      	uxtb	r3, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4413      	add	r3, r2
 8004908:	b2db      	uxtb	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	7bdb      	ldrb	r3, [r3, #15]
 8004932:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7b5b      	ldrb	r3, [r3, #13]
 8004938:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7b9b      	ldrb	r3, [r3, #14]
 800493e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e06f      	b.n	8004a26 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d011      	beq.n	8004970 <RTC_DateUpdate+0x5c>
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d00e      	beq.n	8004970 <RTC_DateUpdate+0x5c>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b05      	cmp	r3, #5
 8004956:	d00b      	beq.n	8004970 <RTC_DateUpdate+0x5c>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b07      	cmp	r3, #7
 800495c:	d008      	beq.n	8004970 <RTC_DateUpdate+0x5c>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d005      	beq.n	8004970 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b0a      	cmp	r3, #10
 8004968:	d002      	beq.n	8004970 <RTC_DateUpdate+0x5c>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d117      	bne.n	80049a0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b1e      	cmp	r3, #30
 8004974:	d803      	bhi.n	800497e <RTC_DateUpdate+0x6a>
      {
        day++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800497c:	e050      	b.n	8004a20 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d005      	beq.n	8004990 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3301      	adds	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
          day = 1U;
 800498a:	2301      	movs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800498e:	e047      	b.n	8004a20 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004994:	2301      	movs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
          year++;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3301      	adds	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800499e:	e03f      	b.n	8004a20 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d008      	beq.n	80049b8 <RTC_DateUpdate+0xa4>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d005      	beq.n	80049b8 <RTC_DateUpdate+0xa4>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b09      	cmp	r3, #9
 80049b0:	d002      	beq.n	80049b8 <RTC_DateUpdate+0xa4>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b0b      	cmp	r3, #11
 80049b6:	d10c      	bne.n	80049d2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b1d      	cmp	r3, #29
 80049bc:	d803      	bhi.n	80049c6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80049c4:	e02c      	b.n	8004a20 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3301      	adds	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
        day = 1U;
 80049cc:	2301      	movs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80049d0:	e026      	b.n	8004a20 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d123      	bne.n	8004a20 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b1b      	cmp	r3, #27
 80049dc:	d803      	bhi.n	80049e6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e01c      	b.n	8004a20 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b1c      	cmp	r3, #28
 80049ea:	d111      	bne.n	8004a10 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f839 	bl	8004a68 <RTC_IsLeapYear>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <RTC_DateUpdate+0xf0>
        {
          day++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e00d      	b.n	8004a20 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e007      	b.n	8004a20 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b1d      	cmp	r3, #29
 8004a14:	d104      	bne.n	8004a20 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d38b      	bcc.n	8004946 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6978      	ldr	r0, [r7, #20]
 8004a52:	f000 f83b 	bl	8004acc <RTC_WeekDayNum>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	731a      	strb	r2, [r3, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e01d      	b.n	8004abe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <RTC_IsLeapYear+0x60>)
 8004a86:	fba2 1203 	umull	r1, r2, r2, r3
 8004a8a:	0952      	lsrs	r2, r2, #5
 8004a8c:	2164      	movs	r1, #100	; 0x64
 8004a8e:	fb01 f202 	mul.w	r2, r1, r2
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00f      	b.n	8004abe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <RTC_IsLeapYear+0x60>)
 8004aa2:	fba2 1203 	umull	r1, r2, r2, r3
 8004aa6:	09d2      	lsrs	r2, r2, #7
 8004aa8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004aac:	fb01 f202 	mul.w	r2, r1, r2
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004abc:	2300      	movs	r3, #0
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004aea:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d82d      	bhi.n	8004b4e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <RTC_WeekDayNum+0xe4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	085a      	lsrs	r2, r3, #1
 8004b06:	78bb      	ldrb	r3, [r7, #2]
 8004b08:	441a      	add	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	4926      	ldr	r1, [pc, #152]	; (8004bb4 <RTC_WeekDayNum+0xe8>)
 8004b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	4922      	ldr	r1, [pc, #136]	; (8004bb4 <RTC_WeekDayNum+0xe8>)
 8004b2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b2e:	09db      	lsrs	r3, r3, #7
 8004b30:	4413      	add	r3, r2
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <RTC_WeekDayNum+0xec>)
 8004b36:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3a:	1ad1      	subs	r1, r2, r3
 8004b3c:	0849      	lsrs	r1, r1, #1
 8004b3e:	440b      	add	r3, r1
 8004b40:	0899      	lsrs	r1, r3, #2
 8004b42:	460b      	mov	r3, r1
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	1a5b      	subs	r3, r3, r1
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e029      	b.n	8004ba2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <RTC_WeekDayNum+0xe4>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	085a      	lsrs	r2, r3, #1
 8004b62:	78bb      	ldrb	r3, [r7, #2]
 8004b64:	441a      	add	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	441a      	add	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4910      	ldr	r1, [pc, #64]	; (8004bb4 <RTC_WeekDayNum+0xe8>)
 8004b74:	fba1 1303 	umull	r1, r3, r1, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	490d      	ldr	r1, [pc, #52]	; (8004bb4 <RTC_WeekDayNum+0xe8>)
 8004b80:	fba1 1303 	umull	r1, r3, r1, r3
 8004b84:	09db      	lsrs	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <RTC_WeekDayNum+0xec>)
 8004b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b90:	1ad1      	subs	r1, r2, r3
 8004b92:	0849      	lsrs	r1, r1, #1
 8004b94:	440b      	add	r3, r1
 8004b96:	0899      	lsrs	r1, r3, #2
 8004b98:	460b      	mov	r3, r1
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a5b      	subs	r3, r3, r1
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	b2db      	uxtb	r3, r3
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	38e38e39 	.word	0x38e38e39
 8004bb4:	51eb851f 	.word	0x51eb851f
 8004bb8:	24924925 	.word	0x24924925

08004bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e041      	b.n	8004c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc ffc4 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 fc5a 	bl	80054b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e032      	b.n	8004cda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_Base_Start+0x88>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x48>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d009      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x48>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <HAL_TIM_Base_Start+0x8c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x48>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a13      	ldr	r2, [pc, #76]	; (8004cec <HAL_TIM_Base_Start+0x90>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d111      	bne.n	8004cc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d010      	beq.n	8004cd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	e007      	b.n	8004cd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800

08004cf0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e041      	b.n	8004d86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f839 	bl	8004d8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fbc0 	bl	80054b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_IT+0x1a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x42>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_IC_Start_IT+0x2a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x42>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_IC_Start_IT+0x3a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x42>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_IC_Start_IT+0x54>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e013      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0x7c>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_IC_Start_IT+0x64>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e00b      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0x7c>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_IC_Start_IT+0x74>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e003      	b.n	8004e1c <HAL_TIM_IC_Start_IT+0x7c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d102      	bne.n	8004e2a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e24:	7bbb      	ldrb	r3, [r7, #14]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0b3      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_IC_Start_IT+0x9e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_IC_Start_IT+0xc6>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_IC_Start_IT+0xae>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_IC_Start_IT+0xc6>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_IC_Start_IT+0xbe>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_IC_Start_IT+0xc6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_IC_Start_IT+0xd6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e74:	e013      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0xfe>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_IC_Start_IT+0xe6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0xfe>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_IC_Start_IT+0xf6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0xfe>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d841      	bhi.n	8004f28 <HAL_TIM_IC_Start_IT+0x188>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_IC_Start_IT+0x10c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f29 	.word	0x08004f29
 8004eb4:	08004f29 	.word	0x08004f29
 8004eb8:	08004f29 	.word	0x08004f29
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f17 	.word	0x08004f17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0202 	orr.w	r2, r2, #2
 8004eee:	60da      	str	r2, [r3, #12]
      break;
 8004ef0:	e01b      	b.n	8004f2a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0204 	orr.w	r2, r2, #4
 8004f00:	60da      	str	r2, [r3, #12]
      break;
 8004f02:	e012      	b.n	8004f2a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	60da      	str	r2, [r3, #12]
      break;
 8004f14:	e009      	b.n	8004f2a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0210 	orr.w	r2, r2, #16
 8004f24:	60da      	str	r2, [r3, #12]
      break;
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004f28:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fcc3 	bl	80058be <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIM_IC_Start_IT+0x200>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_TIM_IC_Start_IT+0x1c0>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4a:	d009      	beq.n	8004f60 <HAL_TIM_IC_Start_IT+0x1c0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <HAL_TIM_IC_Start_IT+0x204>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIM_IC_Start_IT+0x1c0>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <HAL_TIM_IC_Start_IT+0x208>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d111      	bne.n	8004f84 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d010      	beq.n	8004f94 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	e007      	b.n	8004f94 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d122      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0202 	mvn.w	r2, #2
 8004fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc fc8e 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa41 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa47 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b04      	cmp	r3, #4
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0204 	mvn.w	r2, #4
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fc64 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa17 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa1d 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0208 	mvn.w	r2, #8
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2204      	movs	r2, #4
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fc3a 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9ed 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f9f3 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0210 	mvn.w	r2, #16
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2208      	movs	r2, #8
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc fc10 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9c3 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9c9 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0201 	mvn.w	r2, #1
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f99e 	bl	800546c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fc3d 	bl	80059d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d10e      	bne.n	8005188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d107      	bne.n	8005188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f98d 	bl	80054a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b20      	cmp	r3, #32
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d107      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0220 	mvn.w	r2, #32
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fc08 	bl	80059c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e082      	b.n	80052dc <HAL_TIM_IC_ConfigChannel+0x120>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6819      	ldr	r1, [r3, #0]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f000 f9c0 	bl	8005578 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 020c 	bic.w	r2, r2, #12
 8005206:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6999      	ldr	r1, [r3, #24]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	619a      	str	r2, [r3, #24]
 800521a:	e05a      	b.n	80052d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d11c      	bne.n	800525c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f000 fa29 	bl	8005688 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005244:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6999      	ldr	r1, [r3, #24]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	021a      	lsls	r2, r3, #8
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	e03a      	b.n	80052d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b08      	cmp	r3, #8
 8005260:	d11b      	bne.n	800529a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6819      	ldr	r1, [r3, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f000 fa74 	bl	800575e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 020c 	bic.w	r2, r2, #12
 8005284:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	61da      	str	r2, [r3, #28]
 8005298:	e01b      	b.n	80052d2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 fa93 	bl	80057d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_ConfigClockSource+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e0b3      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x180>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800531a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005334:	d03e      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0xd0>
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	f200 8087 	bhi.w	800544c <HAL_TIM_ConfigClockSource+0x168>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	f000 8085 	beq.w	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d87f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d01a      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xa2>
 8005350:	2b70      	cmp	r3, #112	; 0x70
 8005352:	d87b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d050      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x116>
 8005358:	2b60      	cmp	r3, #96	; 0x60
 800535a:	d877      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d03c      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xf6>
 8005360:	2b50      	cmp	r3, #80	; 0x50
 8005362:	d873      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d058      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x136>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d86f      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d064      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x156>
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d86b      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d060      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x156>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d867      	bhi.n	800544c <HAL_TIM_ConfigClockSource+0x168>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d05c      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x156>
 8005380:	2b10      	cmp	r3, #16
 8005382:	d05a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005384:	e062      	b.n	800544c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f000 fa73 	bl	8005880 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	609a      	str	r2, [r3, #8]
      break;
 80053b2:	e04e      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6899      	ldr	r1, [r3, #8]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f000 fa5c 	bl	8005880 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d6:	609a      	str	r2, [r3, #8]
      break;
 80053d8:	e03b      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 f920 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2150      	movs	r1, #80	; 0x50
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fa2a 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 80053f8:	e02b      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	461a      	mov	r2, r3
 8005408:	f000 f97a 	bl	8005700 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2160      	movs	r1, #96	; 0x60
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fa1a 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 8005418:	e01b      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	461a      	mov	r2, r3
 8005428:	f000 f900 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2140      	movs	r1, #64	; 0x40
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fa0a 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 8005438:	e00b      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 fa01 	bl	800584c <TIM_ITRx_SetConfig>
        break;
 800544a:	e002      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a29      	ldr	r2, [pc, #164]	; (800556c <TIM_Base_SetConfig+0xb8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <TIM_Base_SetConfig+0x30>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0x30>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <TIM_Base_SetConfig+0xbc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0x30>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <TIM_Base_SetConfig+0xc0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1c      	ldr	r2, [pc, #112]	; (800556c <TIM_Base_SetConfig+0xb8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_Base_SetConfig+0x62>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005504:	d007      	beq.n	8005516 <TIM_Base_SetConfig+0x62>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <TIM_Base_SetConfig+0xbc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_Base_SetConfig+0x62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <TIM_Base_SetConfig+0xc0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d108      	bne.n	8005528 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <TIM_Base_SetConfig+0xb8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d103      	bne.n	800555c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	615a      	str	r2, [r3, #20]
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800

08005578 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <TIM_TI1_SetConfig+0xa8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_TI1_SetConfig+0x46>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d007      	beq.n	80055be <TIM_TI1_SetConfig+0x46>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_TI1_SetConfig+0xac>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_TI1_SetConfig+0x46>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <TIM_TI1_SetConfig+0xb0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <TIM_TI1_SetConfig+0x4a>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <TIM_TI1_SetConfig+0x4c>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e003      	b.n	80055e2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 030a 	and.w	r3, r3, #10
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800

0800562c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0210 	bic.w	r2, r3, #16
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	031b      	lsls	r3, r3, #12
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f023 0210 	bic.w	r2, r3, #16
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800572a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	031b      	lsls	r3, r3, #12
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800573c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005800:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005812:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	031b      	lsls	r3, r3, #12
 8005818:	b29b      	uxth	r3, r3
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005826:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	031b      	lsls	r3, r3, #12
 800582c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	f043 0307 	orr.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	609a      	str	r2, [r3, #8]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	021a      	lsls	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058be:	b480      	push	{r7}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2201      	movs	r2, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	43db      	mvns	r3, r3
 80058e0:	401a      	ands	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
	...

08005908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e046      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a12      	ldr	r2, [pc, #72]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800

080059c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e03f      	b.n	8005a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc f91a 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fab1 	bl	8005f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b08a      	sub	sp, #40	; 0x28
 8005a86:	af02      	add	r7, sp, #8
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d17c      	bne.n	8005b9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_Transmit+0x2c>
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e075      	b.n	8005b9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Transmit+0x3e>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e06e      	b.n	8005b9e <HAL_UART_Transmit+0x11c>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad6:	f7fc faff 	bl	80020d8 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d108      	bne.n	8005b04 <HAL_UART_Transmit+0x82>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	e003      	b.n	8005b0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b14:	e02a      	b.n	8005b6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f946 	bl	8005db2 <UART_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e036      	b.n	8005b9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e007      	b.n	8005b5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1cf      	bne.n	8005b16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2140      	movs	r1, #64	; 0x40
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f916 	bl	8005db2 <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d11d      	bne.n	8005bfc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_UART_Receive_DMA+0x26>
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e016      	b.n	8005bfe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Receive_DMA+0x38>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e00f      	b.n	8005bfe <HAL_UART_Receive_DMA+0x58>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f928 	bl	8005e48 <UART_Start_Receive_DMA>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	e000      	b.n	8005bfe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12a      	bne.n	8005cc4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c82:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0210 	bic.w	r2, r2, #16
 8005cc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d106      	bne.n	8005cda <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff ffb2 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cd8:	e002      	b.n	8005ce0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff93 	bl	8005c06 <HAL_UART_RxCpltCallback>
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d108      	bne.n	8005d10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ff97 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d0e:	e002      	b.n	8005d16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff ff81 	bl	8005c18 <HAL_UART_RxHalfCpltCallback>
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf14      	ite	ne
 8005d3e:	2301      	movne	r3, #1
 8005d40:	2300      	moveq	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b21      	cmp	r3, #33	; 0x21
 8005d50:	d108      	bne.n	8005d64 <UART_DMAError+0x46>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f000 f8d6 	bl	8005f10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	2300      	moveq	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b22      	cmp	r3, #34	; 0x22
 8005d84:	d108      	bne.n	8005d98 <UART_DMAError+0x7a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d92:	68b8      	ldr	r0, [r7, #8]
 8005d94:	f000 f8d1 	bl	8005f3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0210 	orr.w	r2, r3, #16
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da4:	68b8      	ldr	r0, [r7, #8]
 8005da6:	f7ff ff40 	bl	8005c2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	603b      	str	r3, [r7, #0]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc2:	e02c      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d028      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd2:	f7fc f981 	bl	80020d8 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d21d      	bcs.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005df0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e00f      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d0c3      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2222      	movs	r2, #34	; 0x22
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <UART_Start_Receive_DMA+0xbc>)
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <UART_Start_Receive_DMA+0xc0>)
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <UART_Start_Receive_DMA+0xc4>)
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	f7fc faac 	bl	8002404 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08005c53 	.word	0x08005c53
 8005f08:	08005ce9 	.word	0x08005ce9
 8005f0c:	08005d1f 	.word	0x08005d1f

08005f10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f26:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr

08005f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d107      	bne.n	8005f7a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0210 	bic.w	r2, r2, #16
 8005f78:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
	...

08005f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fce:	f023 030c 	bic.w	r3, r3, #12
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <UART_SetConfig+0x114>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d103      	bne.n	8006004 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ffc:	f7fd fda2 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	e002      	b.n	800600a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fd fd8a 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8006008:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009a      	lsls	r2, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	4a22      	ldr	r2, [pc, #136]	; (80060ac <UART_SetConfig+0x118>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	0119      	lsls	r1, r3, #4
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009a      	lsls	r2, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006040:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <UART_SetConfig+0x118>)
 8006042:	fba3 0302 	umull	r0, r3, r3, r2
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	2064      	movs	r0, #100	; 0x64
 800604a:	fb00 f303 	mul.w	r3, r0, r3
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	3332      	adds	r3, #50	; 0x32
 8006054:	4a15      	ldr	r2, [pc, #84]	; (80060ac <UART_SetConfig+0x118>)
 8006056:	fba2 2303 	umull	r2, r3, r2, r3
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006060:	4419      	add	r1, r3
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009a      	lsls	r2, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	fbb2 f2f3 	udiv	r2, r2, r3
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <UART_SetConfig+0x118>)
 800607a:	fba3 0302 	umull	r0, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2064      	movs	r0, #100	; 0x64
 8006082:	fb00 f303 	mul.w	r3, r0, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	3332      	adds	r3, #50	; 0x32
 800608c:	4a07      	ldr	r2, [pc, #28]	; (80060ac <UART_SetConfig+0x118>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	440a      	add	r2, r1
 800609e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40013800 	.word	0x40013800
 80060ac:	51eb851f 	.word	0x51eb851f

080060b0 <__errno>:
 80060b0:	4b01      	ldr	r3, [pc, #4]	; (80060b8 <__errno+0x8>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000010 	.word	0x20000010

080060bc <__libc_init_array>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	2600      	movs	r6, #0
 80060c0:	4d0c      	ldr	r5, [pc, #48]	; (80060f4 <__libc_init_array+0x38>)
 80060c2:	4c0d      	ldr	r4, [pc, #52]	; (80060f8 <__libc_init_array+0x3c>)
 80060c4:	1b64      	subs	r4, r4, r5
 80060c6:	10a4      	asrs	r4, r4, #2
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	d109      	bne.n	80060e0 <__libc_init_array+0x24>
 80060cc:	f002 ff56 	bl	8008f7c <_init>
 80060d0:	2600      	movs	r6, #0
 80060d2:	4d0a      	ldr	r5, [pc, #40]	; (80060fc <__libc_init_array+0x40>)
 80060d4:	4c0a      	ldr	r4, [pc, #40]	; (8006100 <__libc_init_array+0x44>)
 80060d6:	1b64      	subs	r4, r4, r5
 80060d8:	10a4      	asrs	r4, r4, #2
 80060da:	42a6      	cmp	r6, r4
 80060dc:	d105      	bne.n	80060ea <__libc_init_array+0x2e>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e4:	4798      	blx	r3
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7ee      	b.n	80060c8 <__libc_init_array+0xc>
 80060ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ee:	4798      	blx	r3
 80060f0:	3601      	adds	r6, #1
 80060f2:	e7f2      	b.n	80060da <__libc_init_array+0x1e>
 80060f4:	08009478 	.word	0x08009478
 80060f8:	08009478 	.word	0x08009478
 80060fc:	08009478 	.word	0x08009478
 8006100:	0800947c 	.word	0x0800947c

08006104 <memset>:
 8006104:	4603      	mov	r3, r0
 8006106:	4402      	add	r2, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__cvt>:
 8006114:	2b00      	cmp	r3, #0
 8006116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	bfbb      	ittet	lt
 800611e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006122:	461f      	movlt	r7, r3
 8006124:	2300      	movge	r3, #0
 8006126:	232d      	movlt	r3, #45	; 0x2d
 8006128:	b088      	sub	sp, #32
 800612a:	4614      	mov	r4, r2
 800612c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800612e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006130:	7013      	strb	r3, [r2, #0]
 8006132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006134:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006138:	f023 0820 	bic.w	r8, r3, #32
 800613c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006140:	d005      	beq.n	800614e <__cvt+0x3a>
 8006142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006146:	d100      	bne.n	800614a <__cvt+0x36>
 8006148:	3501      	adds	r5, #1
 800614a:	2302      	movs	r3, #2
 800614c:	e000      	b.n	8006150 <__cvt+0x3c>
 800614e:	2303      	movs	r3, #3
 8006150:	aa07      	add	r2, sp, #28
 8006152:	9204      	str	r2, [sp, #16]
 8006154:	aa06      	add	r2, sp, #24
 8006156:	e9cd a202 	strd	sl, r2, [sp, #8]
 800615a:	e9cd 3500 	strd	r3, r5, [sp]
 800615e:	4622      	mov	r2, r4
 8006160:	463b      	mov	r3, r7
 8006162:	f000 fd59 	bl	8006c18 <_dtoa_r>
 8006166:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800616a:	4606      	mov	r6, r0
 800616c:	d102      	bne.n	8006174 <__cvt+0x60>
 800616e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006170:	07db      	lsls	r3, r3, #31
 8006172:	d522      	bpl.n	80061ba <__cvt+0xa6>
 8006174:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006178:	eb06 0905 	add.w	r9, r6, r5
 800617c:	d110      	bne.n	80061a0 <__cvt+0x8c>
 800617e:	7833      	ldrb	r3, [r6, #0]
 8006180:	2b30      	cmp	r3, #48	; 0x30
 8006182:	d10a      	bne.n	800619a <__cvt+0x86>
 8006184:	2200      	movs	r2, #0
 8006186:	2300      	movs	r3, #0
 8006188:	4620      	mov	r0, r4
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006190:	b918      	cbnz	r0, 800619a <__cvt+0x86>
 8006192:	f1c5 0501 	rsb	r5, r5, #1
 8006196:	f8ca 5000 	str.w	r5, [sl]
 800619a:	f8da 3000 	ldr.w	r3, [sl]
 800619e:	4499      	add	r9, r3
 80061a0:	2200      	movs	r2, #0
 80061a2:	2300      	movs	r3, #0
 80061a4:	4620      	mov	r0, r4
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7fa fbfe 	bl	80009a8 <__aeabi_dcmpeq>
 80061ac:	b108      	cbz	r0, 80061b2 <__cvt+0x9e>
 80061ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80061b2:	2230      	movs	r2, #48	; 0x30
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	454b      	cmp	r3, r9
 80061b8:	d307      	bcc.n	80061ca <__cvt+0xb6>
 80061ba:	4630      	mov	r0, r6
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061c0:	1b9b      	subs	r3, r3, r6
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	b008      	add	sp, #32
 80061c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	9107      	str	r1, [sp, #28]
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e7f0      	b.n	80061b4 <__cvt+0xa0>

080061d2 <__exponent>:
 80061d2:	4603      	mov	r3, r0
 80061d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d6:	2900      	cmp	r1, #0
 80061d8:	f803 2b02 	strb.w	r2, [r3], #2
 80061dc:	bfb6      	itet	lt
 80061de:	222d      	movlt	r2, #45	; 0x2d
 80061e0:	222b      	movge	r2, #43	; 0x2b
 80061e2:	4249      	neglt	r1, r1
 80061e4:	2909      	cmp	r1, #9
 80061e6:	7042      	strb	r2, [r0, #1]
 80061e8:	dd2b      	ble.n	8006242 <__exponent+0x70>
 80061ea:	f10d 0407 	add.w	r4, sp, #7
 80061ee:	46a4      	mov	ip, r4
 80061f0:	270a      	movs	r7, #10
 80061f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80061f6:	460a      	mov	r2, r1
 80061f8:	46a6      	mov	lr, r4
 80061fa:	fb07 1516 	mls	r5, r7, r6, r1
 80061fe:	2a63      	cmp	r2, #99	; 0x63
 8006200:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006204:	4631      	mov	r1, r6
 8006206:	f104 34ff 	add.w	r4, r4, #4294967295
 800620a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800620e:	dcf0      	bgt.n	80061f2 <__exponent+0x20>
 8006210:	3130      	adds	r1, #48	; 0x30
 8006212:	f1ae 0502 	sub.w	r5, lr, #2
 8006216:	f804 1c01 	strb.w	r1, [r4, #-1]
 800621a:	4629      	mov	r1, r5
 800621c:	1c44      	adds	r4, r0, #1
 800621e:	4561      	cmp	r1, ip
 8006220:	d30a      	bcc.n	8006238 <__exponent+0x66>
 8006222:	f10d 0209 	add.w	r2, sp, #9
 8006226:	eba2 020e 	sub.w	r2, r2, lr
 800622a:	4565      	cmp	r5, ip
 800622c:	bf88      	it	hi
 800622e:	2200      	movhi	r2, #0
 8006230:	4413      	add	r3, r2
 8006232:	1a18      	subs	r0, r3, r0
 8006234:	b003      	add	sp, #12
 8006236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006238:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006240:	e7ed      	b.n	800621e <__exponent+0x4c>
 8006242:	2330      	movs	r3, #48	; 0x30
 8006244:	3130      	adds	r1, #48	; 0x30
 8006246:	7083      	strb	r3, [r0, #2]
 8006248:	70c1      	strb	r1, [r0, #3]
 800624a:	1d03      	adds	r3, r0, #4
 800624c:	e7f1      	b.n	8006232 <__exponent+0x60>
	...

08006250 <_printf_float>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	b091      	sub	sp, #68	; 0x44
 8006256:	460c      	mov	r4, r1
 8006258:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800625c:	4616      	mov	r6, r2
 800625e:	461f      	mov	r7, r3
 8006260:	4605      	mov	r5, r0
 8006262:	f001 fbcf 	bl	8007a04 <_localeconv_r>
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	9309      	str	r3, [sp, #36]	; 0x24
 800626c:	f7f9 ff70 	bl	8000150 <strlen>
 8006270:	2300      	movs	r3, #0
 8006272:	930e      	str	r3, [sp, #56]	; 0x38
 8006274:	f8d8 3000 	ldr.w	r3, [r8]
 8006278:	900a      	str	r0, [sp, #40]	; 0x28
 800627a:	3307      	adds	r3, #7
 800627c:	f023 0307 	bic.w	r3, r3, #7
 8006280:	f103 0208 	add.w	r2, r3, #8
 8006284:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006288:	f8d4 b000 	ldr.w	fp, [r4]
 800628c:	f8c8 2000 	str.w	r2, [r8]
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006298:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800629c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80062a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	4640      	mov	r0, r8
 80062a8:	4b9c      	ldr	r3, [pc, #624]	; (800651c <_printf_float+0x2cc>)
 80062aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ac:	f7fa fbae 	bl	8000a0c <__aeabi_dcmpun>
 80062b0:	bb70      	cbnz	r0, 8006310 <_printf_float+0xc0>
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	4640      	mov	r0, r8
 80062b8:	4b98      	ldr	r3, [pc, #608]	; (800651c <_printf_float+0x2cc>)
 80062ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062bc:	f7fa fb88 	bl	80009d0 <__aeabi_dcmple>
 80062c0:	bb30      	cbnz	r0, 8006310 <_printf_float+0xc0>
 80062c2:	2200      	movs	r2, #0
 80062c4:	2300      	movs	r3, #0
 80062c6:	4640      	mov	r0, r8
 80062c8:	4651      	mov	r1, sl
 80062ca:	f7fa fb77 	bl	80009bc <__aeabi_dcmplt>
 80062ce:	b110      	cbz	r0, 80062d6 <_printf_float+0x86>
 80062d0:	232d      	movs	r3, #45	; 0x2d
 80062d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d6:	4b92      	ldr	r3, [pc, #584]	; (8006520 <_printf_float+0x2d0>)
 80062d8:	4892      	ldr	r0, [pc, #584]	; (8006524 <_printf_float+0x2d4>)
 80062da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062de:	bf94      	ite	ls
 80062e0:	4698      	movls	r8, r3
 80062e2:	4680      	movhi	r8, r0
 80062e4:	2303      	movs	r3, #3
 80062e6:	f04f 0a00 	mov.w	sl, #0
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	f02b 0304 	bic.w	r3, fp, #4
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	4633      	mov	r3, r6
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	9700      	str	r7, [sp, #0]
 80062fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80062fc:	f000 f9d4 	bl	80066a8 <_printf_common>
 8006300:	3001      	adds	r0, #1
 8006302:	f040 8090 	bne.w	8006426 <_printf_float+0x1d6>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	b011      	add	sp, #68	; 0x44
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	4642      	mov	r2, r8
 8006312:	4653      	mov	r3, sl
 8006314:	4640      	mov	r0, r8
 8006316:	4651      	mov	r1, sl
 8006318:	f7fa fb78 	bl	8000a0c <__aeabi_dcmpun>
 800631c:	b148      	cbz	r0, 8006332 <_printf_float+0xe2>
 800631e:	f1ba 0f00 	cmp.w	sl, #0
 8006322:	bfb8      	it	lt
 8006324:	232d      	movlt	r3, #45	; 0x2d
 8006326:	4880      	ldr	r0, [pc, #512]	; (8006528 <_printf_float+0x2d8>)
 8006328:	bfb8      	it	lt
 800632a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800632e:	4b7f      	ldr	r3, [pc, #508]	; (800652c <_printf_float+0x2dc>)
 8006330:	e7d3      	b.n	80062da <_printf_float+0x8a>
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	d142      	bne.n	80063c2 <_printf_float+0x172>
 800633c:	2306      	movs	r3, #6
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	9206      	str	r2, [sp, #24]
 8006344:	aa0e      	add	r2, sp, #56	; 0x38
 8006346:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800634a:	aa0d      	add	r2, sp, #52	; 0x34
 800634c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006350:	9203      	str	r2, [sp, #12]
 8006352:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006356:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	4642      	mov	r2, r8
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4628      	mov	r0, r5
 8006364:	4653      	mov	r3, sl
 8006366:	910b      	str	r1, [sp, #44]	; 0x2c
 8006368:	f7ff fed4 	bl	8006114 <__cvt>
 800636c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800636e:	4680      	mov	r8, r0
 8006370:	2947      	cmp	r1, #71	; 0x47
 8006372:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006374:	d108      	bne.n	8006388 <_printf_float+0x138>
 8006376:	1cc8      	adds	r0, r1, #3
 8006378:	db02      	blt.n	8006380 <_printf_float+0x130>
 800637a:	6863      	ldr	r3, [r4, #4]
 800637c:	4299      	cmp	r1, r3
 800637e:	dd40      	ble.n	8006402 <_printf_float+0x1b2>
 8006380:	f1a9 0902 	sub.w	r9, r9, #2
 8006384:	fa5f f989 	uxtb.w	r9, r9
 8006388:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800638c:	d81f      	bhi.n	80063ce <_printf_float+0x17e>
 800638e:	464a      	mov	r2, r9
 8006390:	3901      	subs	r1, #1
 8006392:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006396:	910d      	str	r1, [sp, #52]	; 0x34
 8006398:	f7ff ff1b 	bl	80061d2 <__exponent>
 800639c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800639e:	4682      	mov	sl, r0
 80063a0:	1813      	adds	r3, r2, r0
 80063a2:	2a01      	cmp	r2, #1
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	dc02      	bgt.n	80063ae <_printf_float+0x15e>
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	07d2      	lsls	r2, r2, #31
 80063ac:	d501      	bpl.n	80063b2 <_printf_float+0x162>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d09b      	beq.n	80062f2 <_printf_float+0xa2>
 80063ba:	232d      	movs	r3, #45	; 0x2d
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c0:	e797      	b.n	80062f2 <_printf_float+0xa2>
 80063c2:	2947      	cmp	r1, #71	; 0x47
 80063c4:	d1bc      	bne.n	8006340 <_printf_float+0xf0>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ba      	bne.n	8006340 <_printf_float+0xf0>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e7b7      	b.n	800633e <_printf_float+0xee>
 80063ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063d2:	d118      	bne.n	8006406 <_printf_float+0x1b6>
 80063d4:	2900      	cmp	r1, #0
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	dd0b      	ble.n	80063f2 <_printf_float+0x1a2>
 80063da:	6121      	str	r1, [r4, #16]
 80063dc:	b913      	cbnz	r3, 80063e4 <_printf_float+0x194>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	07d0      	lsls	r0, r2, #31
 80063e2:	d502      	bpl.n	80063ea <_printf_float+0x19a>
 80063e4:	3301      	adds	r3, #1
 80063e6:	440b      	add	r3, r1
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	f04f 0a00 	mov.w	sl, #0
 80063ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80063f0:	e7df      	b.n	80063b2 <_printf_float+0x162>
 80063f2:	b913      	cbnz	r3, 80063fa <_printf_float+0x1aa>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	07d2      	lsls	r2, r2, #31
 80063f8:	d501      	bpl.n	80063fe <_printf_float+0x1ae>
 80063fa:	3302      	adds	r3, #2
 80063fc:	e7f4      	b.n	80063e8 <_printf_float+0x198>
 80063fe:	2301      	movs	r3, #1
 8006400:	e7f2      	b.n	80063e8 <_printf_float+0x198>
 8006402:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006408:	4299      	cmp	r1, r3
 800640a:	db05      	blt.n	8006418 <_printf_float+0x1c8>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	6121      	str	r1, [r4, #16]
 8006410:	07d8      	lsls	r0, r3, #31
 8006412:	d5ea      	bpl.n	80063ea <_printf_float+0x19a>
 8006414:	1c4b      	adds	r3, r1, #1
 8006416:	e7e7      	b.n	80063e8 <_printf_float+0x198>
 8006418:	2900      	cmp	r1, #0
 800641a:	bfcc      	ite	gt
 800641c:	2201      	movgt	r2, #1
 800641e:	f1c1 0202 	rsble	r2, r1, #2
 8006422:	4413      	add	r3, r2
 8006424:	e7e0      	b.n	80063e8 <_printf_float+0x198>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	055a      	lsls	r2, r3, #21
 800642a:	d407      	bmi.n	800643c <_printf_float+0x1ec>
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	4642      	mov	r2, r8
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	d12b      	bne.n	8006492 <_printf_float+0x242>
 800643a:	e764      	b.n	8006306 <_printf_float+0xb6>
 800643c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006440:	f240 80dd 	bls.w	80065fe <_printf_float+0x3ae>
 8006444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	f7fa faac 	bl	80009a8 <__aeabi_dcmpeq>
 8006450:	2800      	cmp	r0, #0
 8006452:	d033      	beq.n	80064bc <_printf_float+0x26c>
 8006454:	2301      	movs	r3, #1
 8006456:	4631      	mov	r1, r6
 8006458:	4628      	mov	r0, r5
 800645a:	4a35      	ldr	r2, [pc, #212]	; (8006530 <_printf_float+0x2e0>)
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f af51 	beq.w	8006306 <_printf_float+0xb6>
 8006464:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006468:	429a      	cmp	r2, r3
 800646a:	db02      	blt.n	8006472 <_printf_float+0x222>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07d8      	lsls	r0, r3, #31
 8006470:	d50f      	bpl.n	8006492 <_printf_float+0x242>
 8006472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f af42 	beq.w	8006306 <_printf_float+0xb6>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	f104 091a 	add.w	r9, r4, #26
 800648a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648c:	3b01      	subs	r3, #1
 800648e:	4543      	cmp	r3, r8
 8006490:	dc09      	bgt.n	80064a6 <_printf_float+0x256>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	079b      	lsls	r3, r3, #30
 8006496:	f100 8102 	bmi.w	800669e <_printf_float+0x44e>
 800649a:	68e0      	ldr	r0, [r4, #12]
 800649c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800649e:	4298      	cmp	r0, r3
 80064a0:	bfb8      	it	lt
 80064a2:	4618      	movlt	r0, r3
 80064a4:	e731      	b.n	800630a <_printf_float+0xba>
 80064a6:	2301      	movs	r3, #1
 80064a8:	464a      	mov	r2, r9
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f af28 	beq.w	8006306 <_printf_float+0xb6>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	e7e6      	b.n	800648a <_printf_float+0x23a>
 80064bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dc38      	bgt.n	8006534 <_printf_float+0x2e4>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	4a19      	ldr	r2, [pc, #100]	; (8006530 <_printf_float+0x2e0>)
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f af1a 	beq.w	8006306 <_printf_float+0xb6>
 80064d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064d6:	4313      	orrs	r3, r2
 80064d8:	d102      	bne.n	80064e0 <_printf_float+0x290>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	07d9      	lsls	r1, r3, #31
 80064de:	d5d8      	bpl.n	8006492 <_printf_float+0x242>
 80064e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e4:	4631      	mov	r1, r6
 80064e6:	4628      	mov	r0, r5
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af0b 	beq.w	8006306 <_printf_float+0xb6>
 80064f0:	f04f 0900 	mov.w	r9, #0
 80064f4:	f104 0a1a 	add.w	sl, r4, #26
 80064f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064fa:	425b      	negs	r3, r3
 80064fc:	454b      	cmp	r3, r9
 80064fe:	dc01      	bgt.n	8006504 <_printf_float+0x2b4>
 8006500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006502:	e794      	b.n	800642e <_printf_float+0x1de>
 8006504:	2301      	movs	r3, #1
 8006506:	4652      	mov	r2, sl
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f aef9 	beq.w	8006306 <_printf_float+0xb6>
 8006514:	f109 0901 	add.w	r9, r9, #1
 8006518:	e7ee      	b.n	80064f8 <_printf_float+0x2a8>
 800651a:	bf00      	nop
 800651c:	7fefffff 	.word	0x7fefffff
 8006520:	08009044 	.word	0x08009044
 8006524:	08009048 	.word	0x08009048
 8006528:	08009050 	.word	0x08009050
 800652c:	0800904c 	.word	0x0800904c
 8006530:	08009054 	.word	0x08009054
 8006534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006538:	429a      	cmp	r2, r3
 800653a:	bfa8      	it	ge
 800653c:	461a      	movge	r2, r3
 800653e:	2a00      	cmp	r2, #0
 8006540:	4691      	mov	r9, r2
 8006542:	dc37      	bgt.n	80065b4 <_printf_float+0x364>
 8006544:	f04f 0b00 	mov.w	fp, #0
 8006548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654c:	f104 021a 	add.w	r2, r4, #26
 8006550:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006554:	ebaa 0309 	sub.w	r3, sl, r9
 8006558:	455b      	cmp	r3, fp
 800655a:	dc33      	bgt.n	80065c4 <_printf_float+0x374>
 800655c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006560:	429a      	cmp	r2, r3
 8006562:	db3b      	blt.n	80065dc <_printf_float+0x38c>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07da      	lsls	r2, r3, #31
 8006568:	d438      	bmi.n	80065dc <_printf_float+0x38c>
 800656a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800656c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800656e:	eba3 020a 	sub.w	r2, r3, sl
 8006572:	eba3 0901 	sub.w	r9, r3, r1
 8006576:	4591      	cmp	r9, r2
 8006578:	bfa8      	it	ge
 800657a:	4691      	movge	r9, r2
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	dc34      	bgt.n	80065ec <_printf_float+0x39c>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658a:	f104 0a1a 	add.w	sl, r4, #26
 800658e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	eba3 0309 	sub.w	r3, r3, r9
 8006598:	4543      	cmp	r3, r8
 800659a:	f77f af7a 	ble.w	8006492 <_printf_float+0x242>
 800659e:	2301      	movs	r3, #1
 80065a0:	4652      	mov	r2, sl
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	f43f aeac 	beq.w	8006306 <_printf_float+0xb6>
 80065ae:	f108 0801 	add.w	r8, r8, #1
 80065b2:	e7ec      	b.n	800658e <_printf_float+0x33e>
 80065b4:	4613      	mov	r3, r2
 80065b6:	4631      	mov	r1, r6
 80065b8:	4642      	mov	r2, r8
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	d1c0      	bne.n	8006544 <_printf_float+0x2f4>
 80065c2:	e6a0      	b.n	8006306 <_printf_float+0xb6>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f ae99 	beq.w	8006306 <_printf_float+0xb6>
 80065d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065d6:	f10b 0b01 	add.w	fp, fp, #1
 80065da:	e7b9      	b.n	8006550 <_printf_float+0x300>
 80065dc:	4631      	mov	r1, r6
 80065de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	d1bf      	bne.n	800656a <_printf_float+0x31a>
 80065ea:	e68c      	b.n	8006306 <_printf_float+0xb6>
 80065ec:	464b      	mov	r3, r9
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	eb08 020a 	add.w	r2, r8, sl
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	d1c2      	bne.n	8006582 <_printf_float+0x332>
 80065fc:	e683      	b.n	8006306 <_printf_float+0xb6>
 80065fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006600:	2a01      	cmp	r2, #1
 8006602:	dc01      	bgt.n	8006608 <_printf_float+0x3b8>
 8006604:	07db      	lsls	r3, r3, #31
 8006606:	d537      	bpl.n	8006678 <_printf_float+0x428>
 8006608:	2301      	movs	r3, #1
 800660a:	4642      	mov	r2, r8
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f ae77 	beq.w	8006306 <_printf_float+0xb6>
 8006618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f ae6f 	beq.w	8006306 <_printf_float+0xb6>
 8006628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	f7fa f9ba 	bl	80009a8 <__aeabi_dcmpeq>
 8006634:	b9d8      	cbnz	r0, 800666e <_printf_float+0x41e>
 8006636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006638:	f108 0201 	add.w	r2, r8, #1
 800663c:	3b01      	subs	r3, #1
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	d10e      	bne.n	8006666 <_printf_float+0x416>
 8006648:	e65d      	b.n	8006306 <_printf_float+0xb6>
 800664a:	2301      	movs	r3, #1
 800664c:	464a      	mov	r2, r9
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f ae56 	beq.w	8006306 <_printf_float+0xb6>
 800665a:	f108 0801 	add.w	r8, r8, #1
 800665e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006660:	3b01      	subs	r3, #1
 8006662:	4543      	cmp	r3, r8
 8006664:	dcf1      	bgt.n	800664a <_printf_float+0x3fa>
 8006666:	4653      	mov	r3, sl
 8006668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800666c:	e6e0      	b.n	8006430 <_printf_float+0x1e0>
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	f104 091a 	add.w	r9, r4, #26
 8006676:	e7f2      	b.n	800665e <_printf_float+0x40e>
 8006678:	2301      	movs	r3, #1
 800667a:	4642      	mov	r2, r8
 800667c:	e7df      	b.n	800663e <_printf_float+0x3ee>
 800667e:	2301      	movs	r3, #1
 8006680:	464a      	mov	r2, r9
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	f43f ae3c 	beq.w	8006306 <_printf_float+0xb6>
 800668e:	f108 0801 	add.w	r8, r8, #1
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006696:	1a5b      	subs	r3, r3, r1
 8006698:	4543      	cmp	r3, r8
 800669a:	dcf0      	bgt.n	800667e <_printf_float+0x42e>
 800669c:	e6fd      	b.n	800649a <_printf_float+0x24a>
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f104 0919 	add.w	r9, r4, #25
 80066a6:	e7f4      	b.n	8006692 <_printf_float+0x442>

080066a8 <_printf_common>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4616      	mov	r6, r2
 80066ae:	4699      	mov	r9, r3
 80066b0:	688a      	ldr	r2, [r1, #8]
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	4607      	mov	r7, r0
 80066b6:	4293      	cmp	r3, r2
 80066b8:	bfb8      	it	lt
 80066ba:	4613      	movlt	r3, r2
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c2:	460c      	mov	r4, r1
 80066c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c8:	b10a      	cbz	r2, 80066ce <_printf_common+0x26>
 80066ca:	3301      	adds	r3, #1
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	0699      	lsls	r1, r3, #26
 80066d2:	bf42      	ittt	mi
 80066d4:	6833      	ldrmi	r3, [r6, #0]
 80066d6:	3302      	addmi	r3, #2
 80066d8:	6033      	strmi	r3, [r6, #0]
 80066da:	6825      	ldr	r5, [r4, #0]
 80066dc:	f015 0506 	ands.w	r5, r5, #6
 80066e0:	d106      	bne.n	80066f0 <_printf_common+0x48>
 80066e2:	f104 0a19 	add.w	sl, r4, #25
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	6832      	ldr	r2, [r6, #0]
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dc28      	bgt.n	8006742 <_printf_common+0x9a>
 80066f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f4:	1e13      	subs	r3, r2, #0
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	bf18      	it	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	0692      	lsls	r2, r2, #26
 80066fe:	d42d      	bmi.n	800675c <_printf_common+0xb4>
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d020      	beq.n	8006750 <_printf_common+0xa8>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	68e5      	ldr	r5, [r4, #12]
 8006712:	f003 0306 	and.w	r3, r3, #6
 8006716:	2b04      	cmp	r3, #4
 8006718:	bf18      	it	ne
 800671a:	2500      	movne	r5, #0
 800671c:	6832      	ldr	r2, [r6, #0]
 800671e:	f04f 0600 	mov.w	r6, #0
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	bf08      	it	eq
 8006726:	1aad      	subeq	r5, r5, r2
 8006728:	6922      	ldr	r2, [r4, #16]
 800672a:	bf08      	it	eq
 800672c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006730:	4293      	cmp	r3, r2
 8006732:	bfc4      	itt	gt
 8006734:	1a9b      	subgt	r3, r3, r2
 8006736:	18ed      	addgt	r5, r5, r3
 8006738:	341a      	adds	r4, #26
 800673a:	42b5      	cmp	r5, r6
 800673c:	d11a      	bne.n	8006774 <_printf_common+0xcc>
 800673e:	2000      	movs	r0, #0
 8006740:	e008      	b.n	8006754 <_printf_common+0xac>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4649      	mov	r1, r9
 8006748:	4638      	mov	r0, r7
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d103      	bne.n	8006758 <_printf_common+0xb0>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	3501      	adds	r5, #1
 800675a:	e7c4      	b.n	80066e6 <_printf_common+0x3e>
 800675c:	2030      	movs	r0, #48	; 0x30
 800675e:	18e1      	adds	r1, r4, r3
 8006760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676a:	4422      	add	r2, r4
 800676c:	3302      	adds	r3, #2
 800676e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006772:	e7c5      	b.n	8006700 <_printf_common+0x58>
 8006774:	2301      	movs	r3, #1
 8006776:	4622      	mov	r2, r4
 8006778:	4649      	mov	r1, r9
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d0e6      	beq.n	8006750 <_printf_common+0xa8>
 8006782:	3601      	adds	r6, #1
 8006784:	e7d9      	b.n	800673a <_printf_common+0x92>
	...

08006788 <_printf_i>:
 8006788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	7e0f      	ldrb	r7, [r1, #24]
 800678e:	4691      	mov	r9, r2
 8006790:	2f78      	cmp	r7, #120	; 0x78
 8006792:	4680      	mov	r8, r0
 8006794:	460c      	mov	r4, r1
 8006796:	469a      	mov	sl, r3
 8006798:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800679a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679e:	d807      	bhi.n	80067b0 <_printf_i+0x28>
 80067a0:	2f62      	cmp	r7, #98	; 0x62
 80067a2:	d80a      	bhi.n	80067ba <_printf_i+0x32>
 80067a4:	2f00      	cmp	r7, #0
 80067a6:	f000 80d9 	beq.w	800695c <_printf_i+0x1d4>
 80067aa:	2f58      	cmp	r7, #88	; 0x58
 80067ac:	f000 80a4 	beq.w	80068f8 <_printf_i+0x170>
 80067b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b8:	e03a      	b.n	8006830 <_printf_i+0xa8>
 80067ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067be:	2b15      	cmp	r3, #21
 80067c0:	d8f6      	bhi.n	80067b0 <_printf_i+0x28>
 80067c2:	a101      	add	r1, pc, #4	; (adr r1, 80067c8 <_printf_i+0x40>)
 80067c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c8:	08006821 	.word	0x08006821
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080067b1 	.word	0x080067b1
 80067d4:	080067b1 	.word	0x080067b1
 80067d8:	080067b1 	.word	0x080067b1
 80067dc:	080067b1 	.word	0x080067b1
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080067b1 	.word	0x080067b1
 80067e8:	080067b1 	.word	0x080067b1
 80067ec:	080067b1 	.word	0x080067b1
 80067f0:	080067b1 	.word	0x080067b1
 80067f4:	08006943 	.word	0x08006943
 80067f8:	08006865 	.word	0x08006865
 80067fc:	08006925 	.word	0x08006925
 8006800:	080067b1 	.word	0x080067b1
 8006804:	080067b1 	.word	0x080067b1
 8006808:	08006965 	.word	0x08006965
 800680c:	080067b1 	.word	0x080067b1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067b1 	.word	0x080067b1
 8006818:	080067b1 	.word	0x080067b1
 800681c:	0800692d 	.word	0x0800692d
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	1d1a      	adds	r2, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006830:	2301      	movs	r3, #1
 8006832:	e0a4      	b.n	800697e <_printf_i+0x1f6>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	6829      	ldr	r1, [r5, #0]
 8006838:	0606      	lsls	r6, r0, #24
 800683a:	f101 0304 	add.w	r3, r1, #4
 800683e:	d50a      	bpl.n	8006856 <_printf_i+0xce>
 8006840:	680e      	ldr	r6, [r1, #0]
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	2e00      	cmp	r6, #0
 8006846:	da03      	bge.n	8006850 <_printf_i+0xc8>
 8006848:	232d      	movs	r3, #45	; 0x2d
 800684a:	4276      	negs	r6, r6
 800684c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006850:	230a      	movs	r3, #10
 8006852:	485e      	ldr	r0, [pc, #376]	; (80069cc <_printf_i+0x244>)
 8006854:	e019      	b.n	800688a <_printf_i+0x102>
 8006856:	680e      	ldr	r6, [r1, #0]
 8006858:	f010 0f40 	tst.w	r0, #64	; 0x40
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	bf18      	it	ne
 8006860:	b236      	sxthne	r6, r6
 8006862:	e7ef      	b.n	8006844 <_printf_i+0xbc>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6029      	str	r1, [r5, #0]
 800686c:	0601      	lsls	r1, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xec>
 8006870:	681e      	ldr	r6, [r3, #0]
 8006872:	e002      	b.n	800687a <_printf_i+0xf2>
 8006874:	0646      	lsls	r6, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xe8>
 8006878:	881e      	ldrh	r6, [r3, #0]
 800687a:	2f6f      	cmp	r7, #111	; 0x6f
 800687c:	bf0c      	ite	eq
 800687e:	2308      	moveq	r3, #8
 8006880:	230a      	movne	r3, #10
 8006882:	4852      	ldr	r0, [pc, #328]	; (80069cc <_printf_i+0x244>)
 8006884:	2100      	movs	r1, #0
 8006886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688a:	6865      	ldr	r5, [r4, #4]
 800688c:	2d00      	cmp	r5, #0
 800688e:	bfa8      	it	ge
 8006890:	6821      	ldrge	r1, [r4, #0]
 8006892:	60a5      	str	r5, [r4, #8]
 8006894:	bfa4      	itt	ge
 8006896:	f021 0104 	bicge.w	r1, r1, #4
 800689a:	6021      	strge	r1, [r4, #0]
 800689c:	b90e      	cbnz	r6, 80068a2 <_printf_i+0x11a>
 800689e:	2d00      	cmp	r5, #0
 80068a0:	d04d      	beq.n	800693e <_printf_i+0x1b6>
 80068a2:	4615      	mov	r5, r2
 80068a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a8:	fb03 6711 	mls	r7, r3, r1, r6
 80068ac:	5dc7      	ldrb	r7, [r0, r7]
 80068ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b2:	4637      	mov	r7, r6
 80068b4:	42bb      	cmp	r3, r7
 80068b6:	460e      	mov	r6, r1
 80068b8:	d9f4      	bls.n	80068a4 <_printf_i+0x11c>
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d10b      	bne.n	80068d6 <_printf_i+0x14e>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	07de      	lsls	r6, r3, #31
 80068c2:	d508      	bpl.n	80068d6 <_printf_i+0x14e>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	6861      	ldr	r1, [r4, #4]
 80068c8:	4299      	cmp	r1, r3
 80068ca:	bfde      	ittt	le
 80068cc:	2330      	movle	r3, #48	; 0x30
 80068ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d6:	1b52      	subs	r2, r2, r5
 80068d8:	6122      	str	r2, [r4, #16]
 80068da:	464b      	mov	r3, r9
 80068dc:	4621      	mov	r1, r4
 80068de:	4640      	mov	r0, r8
 80068e0:	f8cd a000 	str.w	sl, [sp]
 80068e4:	aa03      	add	r2, sp, #12
 80068e6:	f7ff fedf 	bl	80066a8 <_printf_common>
 80068ea:	3001      	adds	r0, #1
 80068ec:	d14c      	bne.n	8006988 <_printf_i+0x200>
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	b004      	add	sp, #16
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	4834      	ldr	r0, [pc, #208]	; (80069cc <_printf_i+0x244>)
 80068fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068fe:	6829      	ldr	r1, [r5, #0]
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	f851 6b04 	ldr.w	r6, [r1], #4
 8006906:	6029      	str	r1, [r5, #0]
 8006908:	061d      	lsls	r5, r3, #24
 800690a:	d514      	bpl.n	8006936 <_printf_i+0x1ae>
 800690c:	07df      	lsls	r7, r3, #31
 800690e:	bf44      	itt	mi
 8006910:	f043 0320 	orrmi.w	r3, r3, #32
 8006914:	6023      	strmi	r3, [r4, #0]
 8006916:	b91e      	cbnz	r6, 8006920 <_printf_i+0x198>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	f023 0320 	bic.w	r3, r3, #32
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	2310      	movs	r3, #16
 8006922:	e7af      	b.n	8006884 <_printf_i+0xfc>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	f043 0320 	orr.w	r3, r3, #32
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	2378      	movs	r3, #120	; 0x78
 800692e:	4828      	ldr	r0, [pc, #160]	; (80069d0 <_printf_i+0x248>)
 8006930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006934:	e7e3      	b.n	80068fe <_printf_i+0x176>
 8006936:	0659      	lsls	r1, r3, #25
 8006938:	bf48      	it	mi
 800693a:	b2b6      	uxthmi	r6, r6
 800693c:	e7e6      	b.n	800690c <_printf_i+0x184>
 800693e:	4615      	mov	r5, r2
 8006940:	e7bb      	b.n	80068ba <_printf_i+0x132>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	6826      	ldr	r6, [r4, #0]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6961      	ldr	r1, [r4, #20]
 800694a:	6028      	str	r0, [r5, #0]
 800694c:	0635      	lsls	r5, r6, #24
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	d501      	bpl.n	8006956 <_printf_i+0x1ce>
 8006952:	6019      	str	r1, [r3, #0]
 8006954:	e002      	b.n	800695c <_printf_i+0x1d4>
 8006956:	0670      	lsls	r0, r6, #25
 8006958:	d5fb      	bpl.n	8006952 <_printf_i+0x1ca>
 800695a:	8019      	strh	r1, [r3, #0]
 800695c:	2300      	movs	r3, #0
 800695e:	4615      	mov	r5, r2
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	e7ba      	b.n	80068da <_printf_i+0x152>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2100      	movs	r1, #0
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	602a      	str	r2, [r5, #0]
 800696c:	681d      	ldr	r5, [r3, #0]
 800696e:	6862      	ldr	r2, [r4, #4]
 8006970:	4628      	mov	r0, r5
 8006972:	f001 f857 	bl	8007a24 <memchr>
 8006976:	b108      	cbz	r0, 800697c <_printf_i+0x1f4>
 8006978:	1b40      	subs	r0, r0, r5
 800697a:	6060      	str	r0, [r4, #4]
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	2300      	movs	r3, #0
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	e7a8      	b.n	80068da <_printf_i+0x152>
 8006988:	462a      	mov	r2, r5
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	47d0      	blx	sl
 8006992:	3001      	adds	r0, #1
 8006994:	d0ab      	beq.n	80068ee <_printf_i+0x166>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	079b      	lsls	r3, r3, #30
 800699a:	d413      	bmi.n	80069c4 <_printf_i+0x23c>
 800699c:	68e0      	ldr	r0, [r4, #12]
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	4298      	cmp	r0, r3
 80069a2:	bfb8      	it	lt
 80069a4:	4618      	movlt	r0, r3
 80069a6:	e7a4      	b.n	80068f2 <_printf_i+0x16a>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4632      	mov	r2, r6
 80069ac:	4649      	mov	r1, r9
 80069ae:	4640      	mov	r0, r8
 80069b0:	47d0      	blx	sl
 80069b2:	3001      	adds	r0, #1
 80069b4:	d09b      	beq.n	80068ee <_printf_i+0x166>
 80069b6:	3501      	adds	r5, #1
 80069b8:	68e3      	ldr	r3, [r4, #12]
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	1a5b      	subs	r3, r3, r1
 80069be:	42ab      	cmp	r3, r5
 80069c0:	dcf2      	bgt.n	80069a8 <_printf_i+0x220>
 80069c2:	e7eb      	b.n	800699c <_printf_i+0x214>
 80069c4:	2500      	movs	r5, #0
 80069c6:	f104 0619 	add.w	r6, r4, #25
 80069ca:	e7f5      	b.n	80069b8 <_printf_i+0x230>
 80069cc:	08009056 	.word	0x08009056
 80069d0:	08009067 	.word	0x08009067

080069d4 <iprintf>:
 80069d4:	b40f      	push	{r0, r1, r2, r3}
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <iprintf+0x2c>)
 80069d8:	b513      	push	{r0, r1, r4, lr}
 80069da:	681c      	ldr	r4, [r3, #0]
 80069dc:	b124      	cbz	r4, 80069e8 <iprintf+0x14>
 80069de:	69a3      	ldr	r3, [r4, #24]
 80069e0:	b913      	cbnz	r3, 80069e8 <iprintf+0x14>
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 ff5e 	bl	80078a4 <__sinit>
 80069e8:	ab05      	add	r3, sp, #20
 80069ea:	4620      	mov	r0, r4
 80069ec:	9a04      	ldr	r2, [sp, #16]
 80069ee:	68a1      	ldr	r1, [r4, #8]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f001 fe29 	bl	8008648 <_vfiprintf_r>
 80069f6:	b002      	add	sp, #8
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	b004      	add	sp, #16
 80069fe:	4770      	bx	lr
 8006a00:	20000010 	.word	0x20000010

08006a04 <rand>:
 8006a04:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <rand+0x5c>)
 8006a06:	b510      	push	{r4, lr}
 8006a08:	681c      	ldr	r4, [r3, #0]
 8006a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a0c:	b9b3      	cbnz	r3, 8006a3c <rand+0x38>
 8006a0e:	2018      	movs	r0, #24
 8006a10:	f001 f800 	bl	8007a14 <malloc>
 8006a14:	4602      	mov	r2, r0
 8006a16:	63a0      	str	r0, [r4, #56]	; 0x38
 8006a18:	b920      	cbnz	r0, 8006a24 <rand+0x20>
 8006a1a:	214e      	movs	r1, #78	; 0x4e
 8006a1c:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <rand+0x60>)
 8006a1e:	4812      	ldr	r0, [pc, #72]	; (8006a68 <rand+0x64>)
 8006a20:	f000 f84e 	bl	8006ac0 <__assert_func>
 8006a24:	4911      	ldr	r1, [pc, #68]	; (8006a6c <rand+0x68>)
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <rand+0x6c>)
 8006a28:	e9c0 1300 	strd	r1, r3, [r0]
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <rand+0x70>)
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6083      	str	r3, [r0, #8]
 8006a32:	230b      	movs	r3, #11
 8006a34:	8183      	strh	r3, [r0, #12]
 8006a36:	2001      	movs	r0, #1
 8006a38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006a3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006a3e:	4a0e      	ldr	r2, [pc, #56]	; (8006a78 <rand+0x74>)
 8006a40:	6920      	ldr	r0, [r4, #16]
 8006a42:	6963      	ldr	r3, [r4, #20]
 8006a44:	4342      	muls	r2, r0
 8006a46:	490d      	ldr	r1, [pc, #52]	; (8006a7c <rand+0x78>)
 8006a48:	fb01 2203 	mla	r2, r1, r3, r2
 8006a4c:	fba0 0101 	umull	r0, r1, r0, r1
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	eb42 0001 	adc.w	r0, r2, r1
 8006a56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006a5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006a5e:	bd10      	pop	{r4, pc}
 8006a60:	20000010 	.word	0x20000010
 8006a64:	08009078 	.word	0x08009078
 8006a68:	0800908f 	.word	0x0800908f
 8006a6c:	abcd330e 	.word	0xabcd330e
 8006a70:	e66d1234 	.word	0xe66d1234
 8006a74:	0005deec 	.word	0x0005deec
 8006a78:	5851f42d 	.word	0x5851f42d
 8006a7c:	4c957f2d 	.word	0x4c957f2d

08006a80 <siprintf>:
 8006a80:	b40e      	push	{r1, r2, r3}
 8006a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a86:	b500      	push	{lr}
 8006a88:	b09c      	sub	sp, #112	; 0x70
 8006a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a8c:	9002      	str	r0, [sp, #8]
 8006a8e:	9006      	str	r0, [sp, #24]
 8006a90:	9107      	str	r1, [sp, #28]
 8006a92:	9104      	str	r1, [sp, #16]
 8006a94:	4808      	ldr	r0, [pc, #32]	; (8006ab8 <siprintf+0x38>)
 8006a96:	4909      	ldr	r1, [pc, #36]	; (8006abc <siprintf+0x3c>)
 8006a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9c:	9105      	str	r1, [sp, #20]
 8006a9e:	6800      	ldr	r0, [r0, #0]
 8006aa0:	a902      	add	r1, sp, #8
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	f001 fca8 	bl	80083f8 <_svfiprintf_r>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	9b02      	ldr	r3, [sp, #8]
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	b01c      	add	sp, #112	; 0x70
 8006ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab4:	b003      	add	sp, #12
 8006ab6:	4770      	bx	lr
 8006ab8:	20000010 	.word	0x20000010
 8006abc:	ffff0208 	.word	0xffff0208

08006ac0 <__assert_func>:
 8006ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <__assert_func+0x2c>)
 8006ac8:	4605      	mov	r5, r0
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68d8      	ldr	r0, [r3, #12]
 8006ace:	b14c      	cbz	r4, 8006ae4 <__assert_func+0x24>
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <__assert_func+0x30>)
 8006ad2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ad6:	9100      	str	r1, [sp, #0]
 8006ad8:	462b      	mov	r3, r5
 8006ada:	4906      	ldr	r1, [pc, #24]	; (8006af4 <__assert_func+0x34>)
 8006adc:	f000 ff60 	bl	80079a0 <fiprintf>
 8006ae0:	f002 f808 	bl	8008af4 <abort>
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <__assert_func+0x38>)
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	e7f3      	b.n	8006ad2 <__assert_func+0x12>
 8006aea:	bf00      	nop
 8006aec:	20000010 	.word	0x20000010
 8006af0:	080090ea 	.word	0x080090ea
 8006af4:	080090f7 	.word	0x080090f7
 8006af8:	08009125 	.word	0x08009125

08006afc <quorem>:
 8006afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	6903      	ldr	r3, [r0, #16]
 8006b02:	690c      	ldr	r4, [r1, #16]
 8006b04:	4607      	mov	r7, r0
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	f2c0 8082 	blt.w	8006c10 <quorem+0x114>
 8006b0c:	3c01      	subs	r4, #1
 8006b0e:	f100 0514 	add.w	r5, r0, #20
 8006b12:	f101 0814 	add.w	r8, r1, #20
 8006b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b24:	3301      	adds	r3, #1
 8006b26:	429a      	cmp	r2, r3
 8006b28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b34:	d331      	bcc.n	8006b9a <quorem+0x9e>
 8006b36:	f04f 0e00 	mov.w	lr, #0
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	46ac      	mov	ip, r5
 8006b3e:	46f2      	mov	sl, lr
 8006b40:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b44:	b293      	uxth	r3, r2
 8006b46:	fb06 e303 	mla	r3, r6, r3, lr
 8006b4a:	0c12      	lsrs	r2, r2, #16
 8006b4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	fb06 e202 	mla	r2, r6, r2, lr
 8006b56:	ebaa 0303 	sub.w	r3, sl, r3
 8006b5a:	f8dc a000 	ldr.w	sl, [ip]
 8006b5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b62:	fa1f fa8a 	uxth.w	sl, sl
 8006b66:	4453      	add	r3, sl
 8006b68:	f8dc a000 	ldr.w	sl, [ip]
 8006b6c:	b292      	uxth	r2, r2
 8006b6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b7c:	4581      	cmp	r9, r0
 8006b7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b82:	f84c 3b04 	str.w	r3, [ip], #4
 8006b86:	d2db      	bcs.n	8006b40 <quorem+0x44>
 8006b88:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b8c:	b92b      	cbnz	r3, 8006b9a <quorem+0x9e>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	429d      	cmp	r5, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	d32f      	bcc.n	8006bf8 <quorem+0xfc>
 8006b98:	613c      	str	r4, [r7, #16]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f001 f9dc 	bl	8007f58 <__mcmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	db25      	blt.n	8006bf0 <quorem+0xf4>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f04f 0c00 	mov.w	ip, #0
 8006baa:	3601      	adds	r6, #1
 8006bac:	f858 1b04 	ldr.w	r1, [r8], #4
 8006bb0:	f8d0 e000 	ldr.w	lr, [r0]
 8006bb4:	b28b      	uxth	r3, r1
 8006bb6:	ebac 0303 	sub.w	r3, ip, r3
 8006bba:	fa1f f28e 	uxth.w	r2, lr
 8006bbe:	4413      	add	r3, r2
 8006bc0:	0c0a      	lsrs	r2, r1, #16
 8006bc2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bd0:	45c1      	cmp	r9, r8
 8006bd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bd6:	f840 3b04 	str.w	r3, [r0], #4
 8006bda:	d2e7      	bcs.n	8006bac <quorem+0xb0>
 8006bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006be0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006be4:	b922      	cbnz	r2, 8006bf0 <quorem+0xf4>
 8006be6:	3b04      	subs	r3, #4
 8006be8:	429d      	cmp	r5, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	d30a      	bcc.n	8006c04 <quorem+0x108>
 8006bee:	613c      	str	r4, [r7, #16]
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	b003      	add	sp, #12
 8006bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	3b04      	subs	r3, #4
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	d1cb      	bne.n	8006b98 <quorem+0x9c>
 8006c00:	3c01      	subs	r4, #1
 8006c02:	e7c6      	b.n	8006b92 <quorem+0x96>
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	3b04      	subs	r3, #4
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	d1f0      	bne.n	8006bee <quorem+0xf2>
 8006c0c:	3c01      	subs	r4, #1
 8006c0e:	e7eb      	b.n	8006be8 <quorem+0xec>
 8006c10:	2000      	movs	r0, #0
 8006c12:	e7ee      	b.n	8006bf2 <quorem+0xf6>
 8006c14:	0000      	movs	r0, r0
	...

08006c18 <_dtoa_r>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	461f      	mov	r7, r3
 8006c20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c22:	b099      	sub	sp, #100	; 0x64
 8006c24:	4605      	mov	r5, r0
 8006c26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c2e:	b974      	cbnz	r4, 8006c4e <_dtoa_r+0x36>
 8006c30:	2010      	movs	r0, #16
 8006c32:	f000 feef 	bl	8007a14 <malloc>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6268      	str	r0, [r5, #36]	; 0x24
 8006c3a:	b920      	cbnz	r0, 8006c46 <_dtoa_r+0x2e>
 8006c3c:	21ea      	movs	r1, #234	; 0xea
 8006c3e:	4ba8      	ldr	r3, [pc, #672]	; (8006ee0 <_dtoa_r+0x2c8>)
 8006c40:	48a8      	ldr	r0, [pc, #672]	; (8006ee4 <_dtoa_r+0x2cc>)
 8006c42:	f7ff ff3d 	bl	8006ac0 <__assert_func>
 8006c46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c4a:	6004      	str	r4, [r0, #0]
 8006c4c:	60c4      	str	r4, [r0, #12]
 8006c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	b151      	cbz	r1, 8006c6a <_dtoa_r+0x52>
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	2301      	movs	r3, #1
 8006c58:	4093      	lsls	r3, r2
 8006c5a:	604a      	str	r2, [r1, #4]
 8006c5c:	608b      	str	r3, [r1, #8]
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 ff3c 	bl	8007adc <_Bfree>
 8006c64:	2200      	movs	r2, #0
 8006c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	1e3b      	subs	r3, r7, #0
 8006c6c:	bfaf      	iteee	ge
 8006c6e:	2300      	movge	r3, #0
 8006c70:	2201      	movlt	r2, #1
 8006c72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c76:	9305      	strlt	r3, [sp, #20]
 8006c78:	bfa8      	it	ge
 8006c7a:	f8c8 3000 	strge.w	r3, [r8]
 8006c7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c82:	4b99      	ldr	r3, [pc, #612]	; (8006ee8 <_dtoa_r+0x2d0>)
 8006c84:	bfb8      	it	lt
 8006c86:	f8c8 2000 	strlt.w	r2, [r8]
 8006c8a:	ea33 0309 	bics.w	r3, r3, r9
 8006c8e:	d119      	bne.n	8006cc4 <_dtoa_r+0xac>
 8006c90:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c9c:	4333      	orrs	r3, r6
 8006c9e:	f000 857f 	beq.w	80077a0 <_dtoa_r+0xb88>
 8006ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ca4:	b953      	cbnz	r3, 8006cbc <_dtoa_r+0xa4>
 8006ca6:	4b91      	ldr	r3, [pc, #580]	; (8006eec <_dtoa_r+0x2d4>)
 8006ca8:	e022      	b.n	8006cf0 <_dtoa_r+0xd8>
 8006caa:	4b91      	ldr	r3, [pc, #580]	; (8006ef0 <_dtoa_r+0x2d8>)
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	9803      	ldr	r0, [sp, #12]
 8006cb6:	b019      	add	sp, #100	; 0x64
 8006cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	4b8b      	ldr	r3, [pc, #556]	; (8006eec <_dtoa_r+0x2d4>)
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	3303      	adds	r3, #3
 8006cc2:	e7f5      	b.n	8006cb0 <_dtoa_r+0x98>
 8006cc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006ccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f7f9 fe68 	bl	80009a8 <__aeabi_dcmpeq>
 8006cd8:	4680      	mov	r8, r0
 8006cda:	b158      	cbz	r0, 8006cf4 <_dtoa_r+0xdc>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8558 	beq.w	800779a <_dtoa_r+0xb82>
 8006cea:	4882      	ldr	r0, [pc, #520]	; (8006ef4 <_dtoa_r+0x2dc>)
 8006cec:	6018      	str	r0, [r3, #0]
 8006cee:	1e43      	subs	r3, r0, #1
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	e7df      	b.n	8006cb4 <_dtoa_r+0x9c>
 8006cf4:	ab16      	add	r3, sp, #88	; 0x58
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	ab17      	add	r3, sp, #92	; 0x5c
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d02:	f001 f9d1 	bl	80080a8 <__d2b>
 8006d06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d0a:	4683      	mov	fp, r0
 8006d0c:	2c00      	cmp	r4, #0
 8006d0e:	d07f      	beq.n	8006e10 <_dtoa_r+0x1f8>
 8006d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006d22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4b72      	ldr	r3, [pc, #456]	; (8006ef8 <_dtoa_r+0x2e0>)
 8006d2e:	f7f9 fa1b 	bl	8000168 <__aeabi_dsub>
 8006d32:	a365      	add	r3, pc, #404	; (adr r3, 8006ec8 <_dtoa_r+0x2b0>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fbce 	bl	80004d8 <__aeabi_dmul>
 8006d3c:	a364      	add	r3, pc, #400	; (adr r3, 8006ed0 <_dtoa_r+0x2b8>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fa13 	bl	800016c <__adddf3>
 8006d46:	4606      	mov	r6, r0
 8006d48:	4620      	mov	r0, r4
 8006d4a:	460f      	mov	r7, r1
 8006d4c:	f7f9 fb5a 	bl	8000404 <__aeabi_i2d>
 8006d50:	a361      	add	r3, pc, #388	; (adr r3, 8006ed8 <_dtoa_r+0x2c0>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fbbf 	bl	80004d8 <__aeabi_dmul>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4630      	mov	r0, r6
 8006d60:	4639      	mov	r1, r7
 8006d62:	f7f9 fa03 	bl	800016c <__adddf3>
 8006d66:	4606      	mov	r6, r0
 8006d68:	460f      	mov	r7, r1
 8006d6a:	f7f9 fe65 	bl	8000a38 <__aeabi_d2iz>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4682      	mov	sl, r0
 8006d72:	2300      	movs	r3, #0
 8006d74:	4630      	mov	r0, r6
 8006d76:	4639      	mov	r1, r7
 8006d78:	f7f9 fe20 	bl	80009bc <__aeabi_dcmplt>
 8006d7c:	b148      	cbz	r0, 8006d92 <_dtoa_r+0x17a>
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f7f9 fb40 	bl	8000404 <__aeabi_i2d>
 8006d84:	4632      	mov	r2, r6
 8006d86:	463b      	mov	r3, r7
 8006d88:	f7f9 fe0e 	bl	80009a8 <__aeabi_dcmpeq>
 8006d8c:	b908      	cbnz	r0, 8006d92 <_dtoa_r+0x17a>
 8006d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d92:	f1ba 0f16 	cmp.w	sl, #22
 8006d96:	d858      	bhi.n	8006e4a <_dtoa_r+0x232>
 8006d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <_dtoa_r+0x2e4>)
 8006d9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f7f9 fe09 	bl	80009bc <__aeabi_dcmplt>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d04f      	beq.n	8006e4e <_dtoa_r+0x236>
 8006dae:	2300      	movs	r3, #0
 8006db0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006db6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006db8:	1b1c      	subs	r4, r3, r4
 8006dba:	1e63      	subs	r3, r4, #1
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	bf49      	itett	mi
 8006dc0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006dc4:	2300      	movpl	r3, #0
 8006dc6:	9306      	strmi	r3, [sp, #24]
 8006dc8:	2300      	movmi	r3, #0
 8006dca:	bf54      	ite	pl
 8006dcc:	9306      	strpl	r3, [sp, #24]
 8006dce:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006dd0:	f1ba 0f00 	cmp.w	sl, #0
 8006dd4:	db3d      	blt.n	8006e52 <_dtoa_r+0x23a>
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006ddc:	4453      	add	r3, sl
 8006dde:	9309      	str	r3, [sp, #36]	; 0x24
 8006de0:	2300      	movs	r3, #0
 8006de2:	930a      	str	r3, [sp, #40]	; 0x28
 8006de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de6:	2b09      	cmp	r3, #9
 8006de8:	f200 808c 	bhi.w	8006f04 <_dtoa_r+0x2ec>
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	bfc4      	itt	gt
 8006df0:	3b04      	subgt	r3, #4
 8006df2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006df6:	bfc8      	it	gt
 8006df8:	2400      	movgt	r4, #0
 8006dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8006dfe:	bfd8      	it	le
 8006e00:	2401      	movle	r4, #1
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	f200 808a 	bhi.w	8006f1c <_dtoa_r+0x304>
 8006e08:	e8df f003 	tbb	[pc, r3]
 8006e0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006e10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e14:	441c      	add	r4, r3
 8006e16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	bfc3      	ittte	gt
 8006e1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006e26:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e2a:	f1c3 0320 	rsble	r3, r3, #32
 8006e2e:	bfc6      	itte	gt
 8006e30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e34:	4318      	orrgt	r0, r3
 8006e36:	fa06 f003 	lslle.w	r0, r6, r3
 8006e3a:	f7f9 fad3 	bl	80003e4 <__aeabi_ui2d>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e44:	3c01      	subs	r4, #1
 8006e46:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e48:	e76f      	b.n	8006d2a <_dtoa_r+0x112>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e7b2      	b.n	8006db4 <_dtoa_r+0x19c>
 8006e4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e50:	e7b1      	b.n	8006db6 <_dtoa_r+0x19e>
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	eba3 030a 	sub.w	r3, r3, sl
 8006e58:	9306      	str	r3, [sp, #24]
 8006e5a:	f1ca 0300 	rsb	r3, sl, #0
 8006e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e60:	2300      	movs	r3, #0
 8006e62:	930e      	str	r3, [sp, #56]	; 0x38
 8006e64:	e7be      	b.n	8006de4 <_dtoa_r+0x1cc>
 8006e66:	2300      	movs	r3, #0
 8006e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc58      	bgt.n	8006f22 <_dtoa_r+0x30a>
 8006e70:	f04f 0901 	mov.w	r9, #1
 8006e74:	464b      	mov	r3, r9
 8006e76:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006e7e:	2200      	movs	r2, #0
 8006e80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e82:	6042      	str	r2, [r0, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	f102 0614 	add.w	r6, r2, #20
 8006e8a:	429e      	cmp	r6, r3
 8006e8c:	6841      	ldr	r1, [r0, #4]
 8006e8e:	d94e      	bls.n	8006f2e <_dtoa_r+0x316>
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 fde3 	bl	8007a5c <_Balloc>
 8006e96:	9003      	str	r0, [sp, #12]
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d14c      	bne.n	8006f36 <_dtoa_r+0x31e>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ea2:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <_dtoa_r+0x2e8>)
 8006ea4:	e6cc      	b.n	8006c40 <_dtoa_r+0x28>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e7de      	b.n	8006e68 <_dtoa_r+0x250>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eb0:	eb0a 0903 	add.w	r9, sl, r3
 8006eb4:	f109 0301 	add.w	r3, r9, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	9308      	str	r3, [sp, #32]
 8006ebc:	bfb8      	it	lt
 8006ebe:	2301      	movlt	r3, #1
 8006ec0:	e7dd      	b.n	8006e7e <_dtoa_r+0x266>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e7f2      	b.n	8006eac <_dtoa_r+0x294>
 8006ec6:	bf00      	nop
 8006ec8:	636f4361 	.word	0x636f4361
 8006ecc:	3fd287a7 	.word	0x3fd287a7
 8006ed0:	8b60c8b3 	.word	0x8b60c8b3
 8006ed4:	3fc68a28 	.word	0x3fc68a28
 8006ed8:	509f79fb 	.word	0x509f79fb
 8006edc:	3fd34413 	.word	0x3fd34413
 8006ee0:	08009078 	.word	0x08009078
 8006ee4:	08009133 	.word	0x08009133
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	0800912f 	.word	0x0800912f
 8006ef0:	08009126 	.word	0x08009126
 8006ef4:	08009055 	.word	0x08009055
 8006ef8:	3ff80000 	.word	0x3ff80000
 8006efc:	08009288 	.word	0x08009288
 8006f00:	0800918e 	.word	0x0800918e
 8006f04:	2401      	movs	r4, #1
 8006f06:	2300      	movs	r3, #0
 8006f08:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f0a:	9322      	str	r3, [sp, #136]	; 0x88
 8006f0c:	f04f 39ff 	mov.w	r9, #4294967295
 8006f10:	2200      	movs	r2, #0
 8006f12:	2312      	movs	r3, #18
 8006f14:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f18:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f1a:	e7b0      	b.n	8006e7e <_dtoa_r+0x266>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f20:	e7f4      	b.n	8006f0c <_dtoa_r+0x2f4>
 8006f22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006f26:	464b      	mov	r3, r9
 8006f28:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f2c:	e7a7      	b.n	8006e7e <_dtoa_r+0x266>
 8006f2e:	3101      	adds	r1, #1
 8006f30:	6041      	str	r1, [r0, #4]
 8006f32:	0052      	lsls	r2, r2, #1
 8006f34:	e7a7      	b.n	8006e86 <_dtoa_r+0x26e>
 8006f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f38:	9a03      	ldr	r2, [sp, #12]
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	2b0e      	cmp	r3, #14
 8006f40:	f200 80a8 	bhi.w	8007094 <_dtoa_r+0x47c>
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	f000 80a5 	beq.w	8007094 <_dtoa_r+0x47c>
 8006f4a:	f1ba 0f00 	cmp.w	sl, #0
 8006f4e:	dd34      	ble.n	8006fba <_dtoa_r+0x3a2>
 8006f50:	4a9a      	ldr	r2, [pc, #616]	; (80071bc <_dtoa_r+0x5a4>)
 8006f52:	f00a 030f 	and.w	r3, sl, #15
 8006f56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f66:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006f6a:	d016      	beq.n	8006f9a <_dtoa_r+0x382>
 8006f6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f70:	4b93      	ldr	r3, [pc, #588]	; (80071c0 <_dtoa_r+0x5a8>)
 8006f72:	2703      	movs	r7, #3
 8006f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f78:	f7f9 fbd8 	bl	800072c <__aeabi_ddiv>
 8006f7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f80:	f004 040f 	and.w	r4, r4, #15
 8006f84:	4e8e      	ldr	r6, [pc, #568]	; (80071c0 <_dtoa_r+0x5a8>)
 8006f86:	b954      	cbnz	r4, 8006f9e <_dtoa_r+0x386>
 8006f88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f90:	f7f9 fbcc 	bl	800072c <__aeabi_ddiv>
 8006f94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f98:	e029      	b.n	8006fee <_dtoa_r+0x3d6>
 8006f9a:	2702      	movs	r7, #2
 8006f9c:	e7f2      	b.n	8006f84 <_dtoa_r+0x36c>
 8006f9e:	07e1      	lsls	r1, r4, #31
 8006fa0:	d508      	bpl.n	8006fb4 <_dtoa_r+0x39c>
 8006fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006faa:	f7f9 fa95 	bl	80004d8 <__aeabi_dmul>
 8006fae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fb2:	3701      	adds	r7, #1
 8006fb4:	1064      	asrs	r4, r4, #1
 8006fb6:	3608      	adds	r6, #8
 8006fb8:	e7e5      	b.n	8006f86 <_dtoa_r+0x36e>
 8006fba:	f000 80a5 	beq.w	8007108 <_dtoa_r+0x4f0>
 8006fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fc2:	f1ca 0400 	rsb	r4, sl, #0
 8006fc6:	4b7d      	ldr	r3, [pc, #500]	; (80071bc <_dtoa_r+0x5a4>)
 8006fc8:	f004 020f 	and.w	r2, r4, #15
 8006fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 fa80 	bl	80004d8 <__aeabi_dmul>
 8006fd8:	2702      	movs	r7, #2
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fe0:	4e77      	ldr	r6, [pc, #476]	; (80071c0 <_dtoa_r+0x5a8>)
 8006fe2:	1124      	asrs	r4, r4, #4
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	f040 8084 	bne.w	80070f2 <_dtoa_r+0x4da>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d2      	bne.n	8006f94 <_dtoa_r+0x37c>
 8006fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 808b 	beq.w	800710c <_dtoa_r+0x4f4>
 8006ff6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ffa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ffe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007002:	2200      	movs	r2, #0
 8007004:	4b6f      	ldr	r3, [pc, #444]	; (80071c4 <_dtoa_r+0x5ac>)
 8007006:	f7f9 fcd9 	bl	80009bc <__aeabi_dcmplt>
 800700a:	2800      	cmp	r0, #0
 800700c:	d07e      	beq.n	800710c <_dtoa_r+0x4f4>
 800700e:	9b08      	ldr	r3, [sp, #32]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d07b      	beq.n	800710c <_dtoa_r+0x4f4>
 8007014:	f1b9 0f00 	cmp.w	r9, #0
 8007018:	dd38      	ble.n	800708c <_dtoa_r+0x474>
 800701a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800701e:	2200      	movs	r2, #0
 8007020:	4b69      	ldr	r3, [pc, #420]	; (80071c8 <_dtoa_r+0x5b0>)
 8007022:	f7f9 fa59 	bl	80004d8 <__aeabi_dmul>
 8007026:	464c      	mov	r4, r9
 8007028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800702c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007030:	3701      	adds	r7, #1
 8007032:	4638      	mov	r0, r7
 8007034:	f7f9 f9e6 	bl	8000404 <__aeabi_i2d>
 8007038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	2200      	movs	r2, #0
 8007042:	4b62      	ldr	r3, [pc, #392]	; (80071cc <_dtoa_r+0x5b4>)
 8007044:	f7f9 f892 	bl	800016c <__adddf3>
 8007048:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800704c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007050:	9611      	str	r6, [sp, #68]	; 0x44
 8007052:	2c00      	cmp	r4, #0
 8007054:	d15d      	bne.n	8007112 <_dtoa_r+0x4fa>
 8007056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800705a:	2200      	movs	r2, #0
 800705c:	4b5c      	ldr	r3, [pc, #368]	; (80071d0 <_dtoa_r+0x5b8>)
 800705e:	f7f9 f883 	bl	8000168 <__aeabi_dsub>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800706a:	4633      	mov	r3, r6
 800706c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800706e:	f7f9 fcc3 	bl	80009f8 <__aeabi_dcmpgt>
 8007072:	2800      	cmp	r0, #0
 8007074:	f040 829c 	bne.w	80075b0 <_dtoa_r+0x998>
 8007078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800707c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800707e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007082:	f7f9 fc9b 	bl	80009bc <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	f040 8290 	bne.w	80075ac <_dtoa_r+0x994>
 800708c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007090:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007096:	2b00      	cmp	r3, #0
 8007098:	f2c0 8152 	blt.w	8007340 <_dtoa_r+0x728>
 800709c:	f1ba 0f0e 	cmp.w	sl, #14
 80070a0:	f300 814e 	bgt.w	8007340 <_dtoa_r+0x728>
 80070a4:	4b45      	ldr	r3, [pc, #276]	; (80071bc <_dtoa_r+0x5a4>)
 80070a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f280 80db 	bge.w	8007270 <_dtoa_r+0x658>
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f300 80d7 	bgt.w	8007270 <_dtoa_r+0x658>
 80070c2:	f040 8272 	bne.w	80075aa <_dtoa_r+0x992>
 80070c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ca:	2200      	movs	r2, #0
 80070cc:	4b40      	ldr	r3, [pc, #256]	; (80071d0 <_dtoa_r+0x5b8>)
 80070ce:	f7f9 fa03 	bl	80004d8 <__aeabi_dmul>
 80070d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d6:	f7f9 fc85 	bl	80009e4 <__aeabi_dcmpge>
 80070da:	9c08      	ldr	r4, [sp, #32]
 80070dc:	4626      	mov	r6, r4
 80070de:	2800      	cmp	r0, #0
 80070e0:	f040 8248 	bne.w	8007574 <_dtoa_r+0x95c>
 80070e4:	2331      	movs	r3, #49	; 0x31
 80070e6:	9f03      	ldr	r7, [sp, #12]
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	f807 3b01 	strb.w	r3, [r7], #1
 80070f0:	e244      	b.n	800757c <_dtoa_r+0x964>
 80070f2:	07e2      	lsls	r2, r4, #31
 80070f4:	d505      	bpl.n	8007102 <_dtoa_r+0x4ea>
 80070f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	2301      	movs	r3, #1
 8007100:	3701      	adds	r7, #1
 8007102:	1064      	asrs	r4, r4, #1
 8007104:	3608      	adds	r6, #8
 8007106:	e76d      	b.n	8006fe4 <_dtoa_r+0x3cc>
 8007108:	2702      	movs	r7, #2
 800710a:	e770      	b.n	8006fee <_dtoa_r+0x3d6>
 800710c:	46d0      	mov	r8, sl
 800710e:	9c08      	ldr	r4, [sp, #32]
 8007110:	e78f      	b.n	8007032 <_dtoa_r+0x41a>
 8007112:	9903      	ldr	r1, [sp, #12]
 8007114:	4b29      	ldr	r3, [pc, #164]	; (80071bc <_dtoa_r+0x5a4>)
 8007116:	4421      	add	r1, r4
 8007118:	9112      	str	r1, [sp, #72]	; 0x48
 800711a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800711c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007120:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007124:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007128:	2900      	cmp	r1, #0
 800712a:	d055      	beq.n	80071d8 <_dtoa_r+0x5c0>
 800712c:	2000      	movs	r0, #0
 800712e:	4929      	ldr	r1, [pc, #164]	; (80071d4 <_dtoa_r+0x5bc>)
 8007130:	f7f9 fafc 	bl	800072c <__aeabi_ddiv>
 8007134:	463b      	mov	r3, r7
 8007136:	4632      	mov	r2, r6
 8007138:	f7f9 f816 	bl	8000168 <__aeabi_dsub>
 800713c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007140:	9f03      	ldr	r7, [sp, #12]
 8007142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007146:	f7f9 fc77 	bl	8000a38 <__aeabi_d2iz>
 800714a:	4604      	mov	r4, r0
 800714c:	f7f9 f95a 	bl	8000404 <__aeabi_i2d>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007158:	f7f9 f806 	bl	8000168 <__aeabi_dsub>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	3430      	adds	r4, #48	; 0x30
 8007162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800716a:	f807 4b01 	strb.w	r4, [r7], #1
 800716e:	f7f9 fc25 	bl	80009bc <__aeabi_dcmplt>
 8007172:	2800      	cmp	r0, #0
 8007174:	d174      	bne.n	8007260 <_dtoa_r+0x648>
 8007176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800717a:	2000      	movs	r0, #0
 800717c:	4911      	ldr	r1, [pc, #68]	; (80071c4 <_dtoa_r+0x5ac>)
 800717e:	f7f8 fff3 	bl	8000168 <__aeabi_dsub>
 8007182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007186:	f7f9 fc19 	bl	80009bc <__aeabi_dcmplt>
 800718a:	2800      	cmp	r0, #0
 800718c:	f040 80b7 	bne.w	80072fe <_dtoa_r+0x6e6>
 8007190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007192:	429f      	cmp	r7, r3
 8007194:	f43f af7a 	beq.w	800708c <_dtoa_r+0x474>
 8007198:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800719c:	2200      	movs	r2, #0
 800719e:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <_dtoa_r+0x5b0>)
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	2200      	movs	r2, #0
 80071a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ae:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <_dtoa_r+0x5b0>)
 80071b0:	f7f9 f992 	bl	80004d8 <__aeabi_dmul>
 80071b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b8:	e7c3      	b.n	8007142 <_dtoa_r+0x52a>
 80071ba:	bf00      	nop
 80071bc:	08009288 	.word	0x08009288
 80071c0:	08009260 	.word	0x08009260
 80071c4:	3ff00000 	.word	0x3ff00000
 80071c8:	40240000 	.word	0x40240000
 80071cc:	401c0000 	.word	0x401c0000
 80071d0:	40140000 	.word	0x40140000
 80071d4:	3fe00000 	.word	0x3fe00000
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071e6:	9c03      	ldr	r4, [sp, #12]
 80071e8:	9314      	str	r3, [sp, #80]	; 0x50
 80071ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ee:	f7f9 fc23 	bl	8000a38 <__aeabi_d2iz>
 80071f2:	9015      	str	r0, [sp, #84]	; 0x54
 80071f4:	f7f9 f906 	bl	8000404 <__aeabi_i2d>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007200:	f7f8 ffb2 	bl	8000168 <__aeabi_dsub>
 8007204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007206:	4606      	mov	r6, r0
 8007208:	3330      	adds	r3, #48	; 0x30
 800720a:	f804 3b01 	strb.w	r3, [r4], #1
 800720e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007210:	460f      	mov	r7, r1
 8007212:	429c      	cmp	r4, r3
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	d124      	bne.n	8007264 <_dtoa_r+0x64c>
 800721a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800721e:	4bb0      	ldr	r3, [pc, #704]	; (80074e0 <_dtoa_r+0x8c8>)
 8007220:	f7f8 ffa4 	bl	800016c <__adddf3>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fbe4 	bl	80009f8 <__aeabi_dcmpgt>
 8007230:	2800      	cmp	r0, #0
 8007232:	d163      	bne.n	80072fc <_dtoa_r+0x6e4>
 8007234:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007238:	2000      	movs	r0, #0
 800723a:	49a9      	ldr	r1, [pc, #676]	; (80074e0 <_dtoa_r+0x8c8>)
 800723c:	f7f8 ff94 	bl	8000168 <__aeabi_dsub>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4630      	mov	r0, r6
 8007246:	4639      	mov	r1, r7
 8007248:	f7f9 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800724c:	2800      	cmp	r0, #0
 800724e:	f43f af1d 	beq.w	800708c <_dtoa_r+0x474>
 8007252:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007254:	1e7b      	subs	r3, r7, #1
 8007256:	9314      	str	r3, [sp, #80]	; 0x50
 8007258:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800725c:	2b30      	cmp	r3, #48	; 0x30
 800725e:	d0f8      	beq.n	8007252 <_dtoa_r+0x63a>
 8007260:	46c2      	mov	sl, r8
 8007262:	e03b      	b.n	80072dc <_dtoa_r+0x6c4>
 8007264:	4b9f      	ldr	r3, [pc, #636]	; (80074e4 <_dtoa_r+0x8cc>)
 8007266:	f7f9 f937 	bl	80004d8 <__aeabi_dmul>
 800726a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800726e:	e7bc      	b.n	80071ea <_dtoa_r+0x5d2>
 8007270:	9f03      	ldr	r7, [sp, #12]
 8007272:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 fa55 	bl	800072c <__aeabi_ddiv>
 8007282:	f7f9 fbd9 	bl	8000a38 <__aeabi_d2iz>
 8007286:	4604      	mov	r4, r0
 8007288:	f7f9 f8bc 	bl	8000404 <__aeabi_i2d>
 800728c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007290:	f7f9 f922 	bl	80004d8 <__aeabi_dmul>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4640      	mov	r0, r8
 800729a:	4649      	mov	r1, r9
 800729c:	f7f8 ff64 	bl	8000168 <__aeabi_dsub>
 80072a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80072a4:	f807 6b01 	strb.w	r6, [r7], #1
 80072a8:	9e03      	ldr	r6, [sp, #12]
 80072aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80072ae:	1bbe      	subs	r6, r7, r6
 80072b0:	45b4      	cmp	ip, r6
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	d136      	bne.n	8007326 <_dtoa_r+0x70e>
 80072b8:	f7f8 ff58 	bl	800016c <__adddf3>
 80072bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072c0:	4680      	mov	r8, r0
 80072c2:	4689      	mov	r9, r1
 80072c4:	f7f9 fb98 	bl	80009f8 <__aeabi_dcmpgt>
 80072c8:	bb58      	cbnz	r0, 8007322 <_dtoa_r+0x70a>
 80072ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f9 fb69 	bl	80009a8 <__aeabi_dcmpeq>
 80072d6:	b108      	cbz	r0, 80072dc <_dtoa_r+0x6c4>
 80072d8:	07e1      	lsls	r1, r4, #31
 80072da:	d422      	bmi.n	8007322 <_dtoa_r+0x70a>
 80072dc:	4628      	mov	r0, r5
 80072de:	4659      	mov	r1, fp
 80072e0:	f000 fbfc 	bl	8007adc <_Bfree>
 80072e4:	2300      	movs	r3, #0
 80072e6:	703b      	strb	r3, [r7, #0]
 80072e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072ea:	f10a 0001 	add.w	r0, sl, #1
 80072ee:	6018      	str	r0, [r3, #0]
 80072f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f43f acde 	beq.w	8006cb4 <_dtoa_r+0x9c>
 80072f8:	601f      	str	r7, [r3, #0]
 80072fa:	e4db      	b.n	8006cb4 <_dtoa_r+0x9c>
 80072fc:	4627      	mov	r7, r4
 80072fe:	463b      	mov	r3, r7
 8007300:	461f      	mov	r7, r3
 8007302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007306:	2a39      	cmp	r2, #57	; 0x39
 8007308:	d107      	bne.n	800731a <_dtoa_r+0x702>
 800730a:	9a03      	ldr	r2, [sp, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d1f7      	bne.n	8007300 <_dtoa_r+0x6e8>
 8007310:	2230      	movs	r2, #48	; 0x30
 8007312:	9903      	ldr	r1, [sp, #12]
 8007314:	f108 0801 	add.w	r8, r8, #1
 8007318:	700a      	strb	r2, [r1, #0]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	3201      	adds	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e79e      	b.n	8007260 <_dtoa_r+0x648>
 8007322:	46d0      	mov	r8, sl
 8007324:	e7eb      	b.n	80072fe <_dtoa_r+0x6e6>
 8007326:	2200      	movs	r2, #0
 8007328:	4b6e      	ldr	r3, [pc, #440]	; (80074e4 <_dtoa_r+0x8cc>)
 800732a:	f7f9 f8d5 	bl	80004d8 <__aeabi_dmul>
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	4680      	mov	r8, r0
 8007334:	4689      	mov	r9, r1
 8007336:	f7f9 fb37 	bl	80009a8 <__aeabi_dcmpeq>
 800733a:	2800      	cmp	r0, #0
 800733c:	d09b      	beq.n	8007276 <_dtoa_r+0x65e>
 800733e:	e7cd      	b.n	80072dc <_dtoa_r+0x6c4>
 8007340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007342:	2a00      	cmp	r2, #0
 8007344:	f000 80d0 	beq.w	80074e8 <_dtoa_r+0x8d0>
 8007348:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800734a:	2a01      	cmp	r2, #1
 800734c:	f300 80ae 	bgt.w	80074ac <_dtoa_r+0x894>
 8007350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007352:	2a00      	cmp	r2, #0
 8007354:	f000 80a6 	beq.w	80074a4 <_dtoa_r+0x88c>
 8007358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800735c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800735e:	9f06      	ldr	r7, [sp, #24]
 8007360:	9a06      	ldr	r2, [sp, #24]
 8007362:	2101      	movs	r1, #1
 8007364:	441a      	add	r2, r3
 8007366:	9206      	str	r2, [sp, #24]
 8007368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800736a:	4628      	mov	r0, r5
 800736c:	441a      	add	r2, r3
 800736e:	9209      	str	r2, [sp, #36]	; 0x24
 8007370:	f000 fc6a 	bl	8007c48 <__i2b>
 8007374:	4606      	mov	r6, r0
 8007376:	2f00      	cmp	r7, #0
 8007378:	dd0c      	ble.n	8007394 <_dtoa_r+0x77c>
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	dd09      	ble.n	8007394 <_dtoa_r+0x77c>
 8007380:	42bb      	cmp	r3, r7
 8007382:	bfa8      	it	ge
 8007384:	463b      	movge	r3, r7
 8007386:	9a06      	ldr	r2, [sp, #24]
 8007388:	1aff      	subs	r7, r7, r3
 800738a:	1ad2      	subs	r2, r2, r3
 800738c:	9206      	str	r2, [sp, #24]
 800738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	9309      	str	r3, [sp, #36]	; 0x24
 8007394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007396:	b1f3      	cbz	r3, 80073d6 <_dtoa_r+0x7be>
 8007398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a8 	beq.w	80074f0 <_dtoa_r+0x8d8>
 80073a0:	2c00      	cmp	r4, #0
 80073a2:	dd10      	ble.n	80073c6 <_dtoa_r+0x7ae>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4622      	mov	r2, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 fd0b 	bl	8007dc4 <__pow5mult>
 80073ae:	465a      	mov	r2, fp
 80073b0:	4601      	mov	r1, r0
 80073b2:	4606      	mov	r6, r0
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 fc5d 	bl	8007c74 <__multiply>
 80073ba:	4680      	mov	r8, r0
 80073bc:	4659      	mov	r1, fp
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fb8c 	bl	8007adc <_Bfree>
 80073c4:	46c3      	mov	fp, r8
 80073c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c8:	1b1a      	subs	r2, r3, r4
 80073ca:	d004      	beq.n	80073d6 <_dtoa_r+0x7be>
 80073cc:	4659      	mov	r1, fp
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fcf8 	bl	8007dc4 <__pow5mult>
 80073d4:	4683      	mov	fp, r0
 80073d6:	2101      	movs	r1, #1
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 fc35 	bl	8007c48 <__i2b>
 80073de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073e0:	4604      	mov	r4, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f340 8086 	ble.w	80074f4 <_dtoa_r+0x8dc>
 80073e8:	461a      	mov	r2, r3
 80073ea:	4601      	mov	r1, r0
 80073ec:	4628      	mov	r0, r5
 80073ee:	f000 fce9 	bl	8007dc4 <__pow5mult>
 80073f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f4:	4604      	mov	r4, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	dd7f      	ble.n	80074fa <_dtoa_r+0x8e2>
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007404:	6918      	ldr	r0, [r3, #16]
 8007406:	f000 fbd1 	bl	8007bac <__hi0bits>
 800740a:	f1c0 0020 	rsb	r0, r0, #32
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	4418      	add	r0, r3
 8007412:	f010 001f 	ands.w	r0, r0, #31
 8007416:	f000 8092 	beq.w	800753e <_dtoa_r+0x926>
 800741a:	f1c0 0320 	rsb	r3, r0, #32
 800741e:	2b04      	cmp	r3, #4
 8007420:	f340 808a 	ble.w	8007538 <_dtoa_r+0x920>
 8007424:	f1c0 001c 	rsb	r0, r0, #28
 8007428:	9b06      	ldr	r3, [sp, #24]
 800742a:	4407      	add	r7, r0
 800742c:	4403      	add	r3, r0
 800742e:	9306      	str	r3, [sp, #24]
 8007430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007432:	4403      	add	r3, r0
 8007434:	9309      	str	r3, [sp, #36]	; 0x24
 8007436:	9b06      	ldr	r3, [sp, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dd05      	ble.n	8007448 <_dtoa_r+0x830>
 800743c:	4659      	mov	r1, fp
 800743e:	461a      	mov	r2, r3
 8007440:	4628      	mov	r0, r5
 8007442:	f000 fd19 	bl	8007e78 <__lshift>
 8007446:	4683      	mov	fp, r0
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd05      	ble.n	800745a <_dtoa_r+0x842>
 800744e:	4621      	mov	r1, r4
 8007450:	461a      	mov	r2, r3
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fd10 	bl	8007e78 <__lshift>
 8007458:	4604      	mov	r4, r0
 800745a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d070      	beq.n	8007542 <_dtoa_r+0x92a>
 8007460:	4621      	mov	r1, r4
 8007462:	4658      	mov	r0, fp
 8007464:	f000 fd78 	bl	8007f58 <__mcmp>
 8007468:	2800      	cmp	r0, #0
 800746a:	da6a      	bge.n	8007542 <_dtoa_r+0x92a>
 800746c:	2300      	movs	r3, #0
 800746e:	4659      	mov	r1, fp
 8007470:	220a      	movs	r2, #10
 8007472:	4628      	mov	r0, r5
 8007474:	f000 fb54 	bl	8007b20 <__multadd>
 8007478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747a:	4683      	mov	fp, r0
 800747c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8194 	beq.w	80077ae <_dtoa_r+0xb96>
 8007486:	4631      	mov	r1, r6
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fb47 	bl	8007b20 <__multadd>
 8007492:	f1b9 0f00 	cmp.w	r9, #0
 8007496:	4606      	mov	r6, r0
 8007498:	f300 8093 	bgt.w	80075c2 <_dtoa_r+0x9aa>
 800749c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800749e:	2b02      	cmp	r3, #2
 80074a0:	dc57      	bgt.n	8007552 <_dtoa_r+0x93a>
 80074a2:	e08e      	b.n	80075c2 <_dtoa_r+0x9aa>
 80074a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074aa:	e757      	b.n	800735c <_dtoa_r+0x744>
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	1e5c      	subs	r4, r3, #1
 80074b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	bfb7      	itett	lt
 80074b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074b8:	1b1c      	subge	r4, r3, r4
 80074ba:	1ae2      	sublt	r2, r4, r3
 80074bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80074be:	bfbe      	ittt	lt
 80074c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074c2:	189b      	addlt	r3, r3, r2
 80074c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80074c6:	9b08      	ldr	r3, [sp, #32]
 80074c8:	bfb8      	it	lt
 80074ca:	2400      	movlt	r4, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bfbb      	ittet	lt
 80074d0:	9b06      	ldrlt	r3, [sp, #24]
 80074d2:	9a08      	ldrlt	r2, [sp, #32]
 80074d4:	9f06      	ldrge	r7, [sp, #24]
 80074d6:	1a9f      	sublt	r7, r3, r2
 80074d8:	bfac      	ite	ge
 80074da:	9b08      	ldrge	r3, [sp, #32]
 80074dc:	2300      	movlt	r3, #0
 80074de:	e73f      	b.n	8007360 <_dtoa_r+0x748>
 80074e0:	3fe00000 	.word	0x3fe00000
 80074e4:	40240000 	.word	0x40240000
 80074e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ea:	9f06      	ldr	r7, [sp, #24]
 80074ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074ee:	e742      	b.n	8007376 <_dtoa_r+0x75e>
 80074f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f2:	e76b      	b.n	80073cc <_dtoa_r+0x7b4>
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	dc19      	bgt.n	800752e <_dtoa_r+0x916>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	b9bb      	cbnz	r3, 800752e <_dtoa_r+0x916>
 80074fe:	9b05      	ldr	r3, [sp, #20]
 8007500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007504:	b99b      	cbnz	r3, 800752e <_dtoa_r+0x916>
 8007506:	9b05      	ldr	r3, [sp, #20]
 8007508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800750c:	0d1b      	lsrs	r3, r3, #20
 800750e:	051b      	lsls	r3, r3, #20
 8007510:	b183      	cbz	r3, 8007534 <_dtoa_r+0x91c>
 8007512:	f04f 0801 	mov.w	r8, #1
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	3301      	adds	r3, #1
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	3301      	adds	r3, #1
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f af6a 	bne.w	80073fe <_dtoa_r+0x7e6>
 800752a:	2001      	movs	r0, #1
 800752c:	e76f      	b.n	800740e <_dtoa_r+0x7f6>
 800752e:	f04f 0800 	mov.w	r8, #0
 8007532:	e7f6      	b.n	8007522 <_dtoa_r+0x90a>
 8007534:	4698      	mov	r8, r3
 8007536:	e7f4      	b.n	8007522 <_dtoa_r+0x90a>
 8007538:	f43f af7d 	beq.w	8007436 <_dtoa_r+0x81e>
 800753c:	4618      	mov	r0, r3
 800753e:	301c      	adds	r0, #28
 8007540:	e772      	b.n	8007428 <_dtoa_r+0x810>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dc36      	bgt.n	80075b6 <_dtoa_r+0x99e>
 8007548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754a:	2b02      	cmp	r3, #2
 800754c:	dd33      	ble.n	80075b6 <_dtoa_r+0x99e>
 800754e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007552:	f1b9 0f00 	cmp.w	r9, #0
 8007556:	d10d      	bne.n	8007574 <_dtoa_r+0x95c>
 8007558:	4621      	mov	r1, r4
 800755a:	464b      	mov	r3, r9
 800755c:	2205      	movs	r2, #5
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fade 	bl	8007b20 <__multadd>
 8007564:	4601      	mov	r1, r0
 8007566:	4604      	mov	r4, r0
 8007568:	4658      	mov	r0, fp
 800756a:	f000 fcf5 	bl	8007f58 <__mcmp>
 800756e:	2800      	cmp	r0, #0
 8007570:	f73f adb8 	bgt.w	80070e4 <_dtoa_r+0x4cc>
 8007574:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007576:	9f03      	ldr	r7, [sp, #12]
 8007578:	ea6f 0a03 	mvn.w	sl, r3
 800757c:	f04f 0800 	mov.w	r8, #0
 8007580:	4621      	mov	r1, r4
 8007582:	4628      	mov	r0, r5
 8007584:	f000 faaa 	bl	8007adc <_Bfree>
 8007588:	2e00      	cmp	r6, #0
 800758a:	f43f aea7 	beq.w	80072dc <_dtoa_r+0x6c4>
 800758e:	f1b8 0f00 	cmp.w	r8, #0
 8007592:	d005      	beq.n	80075a0 <_dtoa_r+0x988>
 8007594:	45b0      	cmp	r8, r6
 8007596:	d003      	beq.n	80075a0 <_dtoa_r+0x988>
 8007598:	4641      	mov	r1, r8
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fa9e 	bl	8007adc <_Bfree>
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 fa9a 	bl	8007adc <_Bfree>
 80075a8:	e698      	b.n	80072dc <_dtoa_r+0x6c4>
 80075aa:	2400      	movs	r4, #0
 80075ac:	4626      	mov	r6, r4
 80075ae:	e7e1      	b.n	8007574 <_dtoa_r+0x95c>
 80075b0:	46c2      	mov	sl, r8
 80075b2:	4626      	mov	r6, r4
 80075b4:	e596      	b.n	80070e4 <_dtoa_r+0x4cc>
 80075b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80fd 	beq.w	80077bc <_dtoa_r+0xba4>
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	dd05      	ble.n	80075d2 <_dtoa_r+0x9ba>
 80075c6:	4631      	mov	r1, r6
 80075c8:	463a      	mov	r2, r7
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 fc54 	bl	8007e78 <__lshift>
 80075d0:	4606      	mov	r6, r0
 80075d2:	f1b8 0f00 	cmp.w	r8, #0
 80075d6:	d05c      	beq.n	8007692 <_dtoa_r+0xa7a>
 80075d8:	4628      	mov	r0, r5
 80075da:	6871      	ldr	r1, [r6, #4]
 80075dc:	f000 fa3e 	bl	8007a5c <_Balloc>
 80075e0:	4607      	mov	r7, r0
 80075e2:	b928      	cbnz	r0, 80075f0 <_dtoa_r+0x9d8>
 80075e4:	4602      	mov	r2, r0
 80075e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075ea:	4b7f      	ldr	r3, [pc, #508]	; (80077e8 <_dtoa_r+0xbd0>)
 80075ec:	f7ff bb28 	b.w	8006c40 <_dtoa_r+0x28>
 80075f0:	6932      	ldr	r2, [r6, #16]
 80075f2:	f106 010c 	add.w	r1, r6, #12
 80075f6:	3202      	adds	r2, #2
 80075f8:	0092      	lsls	r2, r2, #2
 80075fa:	300c      	adds	r0, #12
 80075fc:	f000 fa20 	bl	8007a40 <memcpy>
 8007600:	2201      	movs	r2, #1
 8007602:	4639      	mov	r1, r7
 8007604:	4628      	mov	r0, r5
 8007606:	f000 fc37 	bl	8007e78 <__lshift>
 800760a:	46b0      	mov	r8, r6
 800760c:	4606      	mov	r6, r0
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	9308      	str	r3, [sp, #32]
 8007614:	9b03      	ldr	r3, [sp, #12]
 8007616:	444b      	add	r3, r9
 8007618:	930a      	str	r3, [sp, #40]	; 0x28
 800761a:	9b04      	ldr	r3, [sp, #16]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	9309      	str	r3, [sp, #36]	; 0x24
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	4621      	mov	r1, r4
 8007626:	3b01      	subs	r3, #1
 8007628:	4658      	mov	r0, fp
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	f7ff fa66 	bl	8006afc <quorem>
 8007630:	4603      	mov	r3, r0
 8007632:	4641      	mov	r1, r8
 8007634:	3330      	adds	r3, #48	; 0x30
 8007636:	9006      	str	r0, [sp, #24]
 8007638:	4658      	mov	r0, fp
 800763a:	930b      	str	r3, [sp, #44]	; 0x2c
 800763c:	f000 fc8c 	bl	8007f58 <__mcmp>
 8007640:	4632      	mov	r2, r6
 8007642:	4681      	mov	r9, r0
 8007644:	4621      	mov	r1, r4
 8007646:	4628      	mov	r0, r5
 8007648:	f000 fca2 	bl	8007f90 <__mdiff>
 800764c:	68c2      	ldr	r2, [r0, #12]
 800764e:	4607      	mov	r7, r0
 8007650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007652:	bb02      	cbnz	r2, 8007696 <_dtoa_r+0xa7e>
 8007654:	4601      	mov	r1, r0
 8007656:	4658      	mov	r0, fp
 8007658:	f000 fc7e 	bl	8007f58 <__mcmp>
 800765c:	4602      	mov	r2, r0
 800765e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007660:	4639      	mov	r1, r7
 8007662:	4628      	mov	r0, r5
 8007664:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007668:	f000 fa38 	bl	8007adc <_Bfree>
 800766c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800766e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007670:	9f08      	ldr	r7, [sp, #32]
 8007672:	ea43 0102 	orr.w	r1, r3, r2
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	430b      	orrs	r3, r1
 800767a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800767c:	d10d      	bne.n	800769a <_dtoa_r+0xa82>
 800767e:	2b39      	cmp	r3, #57	; 0x39
 8007680:	d029      	beq.n	80076d6 <_dtoa_r+0xabe>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	dd01      	ble.n	800768c <_dtoa_r+0xa74>
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	3331      	adds	r3, #49	; 0x31
 800768c:	9a04      	ldr	r2, [sp, #16]
 800768e:	7013      	strb	r3, [r2, #0]
 8007690:	e776      	b.n	8007580 <_dtoa_r+0x968>
 8007692:	4630      	mov	r0, r6
 8007694:	e7b9      	b.n	800760a <_dtoa_r+0x9f2>
 8007696:	2201      	movs	r2, #1
 8007698:	e7e2      	b.n	8007660 <_dtoa_r+0xa48>
 800769a:	f1b9 0f00 	cmp.w	r9, #0
 800769e:	db06      	blt.n	80076ae <_dtoa_r+0xa96>
 80076a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076a2:	ea41 0909 	orr.w	r9, r1, r9
 80076a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a8:	ea59 0101 	orrs.w	r1, r9, r1
 80076ac:	d120      	bne.n	80076f0 <_dtoa_r+0xad8>
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	ddec      	ble.n	800768c <_dtoa_r+0xa74>
 80076b2:	4659      	mov	r1, fp
 80076b4:	2201      	movs	r2, #1
 80076b6:	4628      	mov	r0, r5
 80076b8:	9308      	str	r3, [sp, #32]
 80076ba:	f000 fbdd 	bl	8007e78 <__lshift>
 80076be:	4621      	mov	r1, r4
 80076c0:	4683      	mov	fp, r0
 80076c2:	f000 fc49 	bl	8007f58 <__mcmp>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	9b08      	ldr	r3, [sp, #32]
 80076ca:	dc02      	bgt.n	80076d2 <_dtoa_r+0xaba>
 80076cc:	d1de      	bne.n	800768c <_dtoa_r+0xa74>
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d5dc      	bpl.n	800768c <_dtoa_r+0xa74>
 80076d2:	2b39      	cmp	r3, #57	; 0x39
 80076d4:	d1d8      	bne.n	8007688 <_dtoa_r+0xa70>
 80076d6:	2339      	movs	r3, #57	; 0x39
 80076d8:	9a04      	ldr	r2, [sp, #16]
 80076da:	7013      	strb	r3, [r2, #0]
 80076dc:	463b      	mov	r3, r7
 80076de:	461f      	mov	r7, r3
 80076e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2a39      	cmp	r2, #57	; 0x39
 80076e8:	d050      	beq.n	800778c <_dtoa_r+0xb74>
 80076ea:	3201      	adds	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	e747      	b.n	8007580 <_dtoa_r+0x968>
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	dd03      	ble.n	80076fc <_dtoa_r+0xae4>
 80076f4:	2b39      	cmp	r3, #57	; 0x39
 80076f6:	d0ee      	beq.n	80076d6 <_dtoa_r+0xabe>
 80076f8:	3301      	adds	r3, #1
 80076fa:	e7c7      	b.n	800768c <_dtoa_r+0xa74>
 80076fc:	9a08      	ldr	r2, [sp, #32]
 80076fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007700:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007704:	428a      	cmp	r2, r1
 8007706:	d02a      	beq.n	800775e <_dtoa_r+0xb46>
 8007708:	4659      	mov	r1, fp
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	4628      	mov	r0, r5
 8007710:	f000 fa06 	bl	8007b20 <__multadd>
 8007714:	45b0      	cmp	r8, r6
 8007716:	4683      	mov	fp, r0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	f04f 020a 	mov.w	r2, #10
 8007720:	4641      	mov	r1, r8
 8007722:	4628      	mov	r0, r5
 8007724:	d107      	bne.n	8007736 <_dtoa_r+0xb1e>
 8007726:	f000 f9fb 	bl	8007b20 <__multadd>
 800772a:	4680      	mov	r8, r0
 800772c:	4606      	mov	r6, r0
 800772e:	9b08      	ldr	r3, [sp, #32]
 8007730:	3301      	adds	r3, #1
 8007732:	9308      	str	r3, [sp, #32]
 8007734:	e775      	b.n	8007622 <_dtoa_r+0xa0a>
 8007736:	f000 f9f3 	bl	8007b20 <__multadd>
 800773a:	4631      	mov	r1, r6
 800773c:	4680      	mov	r8, r0
 800773e:	2300      	movs	r3, #0
 8007740:	220a      	movs	r2, #10
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f9ec 	bl	8007b20 <__multadd>
 8007748:	4606      	mov	r6, r0
 800774a:	e7f0      	b.n	800772e <_dtoa_r+0xb16>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	bfcc      	ite	gt
 8007752:	464f      	movgt	r7, r9
 8007754:	2701      	movle	r7, #1
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	9a03      	ldr	r2, [sp, #12]
 800775c:	4417      	add	r7, r2
 800775e:	4659      	mov	r1, fp
 8007760:	2201      	movs	r2, #1
 8007762:	4628      	mov	r0, r5
 8007764:	9308      	str	r3, [sp, #32]
 8007766:	f000 fb87 	bl	8007e78 <__lshift>
 800776a:	4621      	mov	r1, r4
 800776c:	4683      	mov	fp, r0
 800776e:	f000 fbf3 	bl	8007f58 <__mcmp>
 8007772:	2800      	cmp	r0, #0
 8007774:	dcb2      	bgt.n	80076dc <_dtoa_r+0xac4>
 8007776:	d102      	bne.n	800777e <_dtoa_r+0xb66>
 8007778:	9b08      	ldr	r3, [sp, #32]
 800777a:	07db      	lsls	r3, r3, #31
 800777c:	d4ae      	bmi.n	80076dc <_dtoa_r+0xac4>
 800777e:	463b      	mov	r3, r7
 8007780:	461f      	mov	r7, r3
 8007782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007786:	2a30      	cmp	r2, #48	; 0x30
 8007788:	d0fa      	beq.n	8007780 <_dtoa_r+0xb68>
 800778a:	e6f9      	b.n	8007580 <_dtoa_r+0x968>
 800778c:	9a03      	ldr	r2, [sp, #12]
 800778e:	429a      	cmp	r2, r3
 8007790:	d1a5      	bne.n	80076de <_dtoa_r+0xac6>
 8007792:	2331      	movs	r3, #49	; 0x31
 8007794:	f10a 0a01 	add.w	sl, sl, #1
 8007798:	e779      	b.n	800768e <_dtoa_r+0xa76>
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <_dtoa_r+0xbd4>)
 800779c:	f7ff baa8 	b.w	8006cf0 <_dtoa_r+0xd8>
 80077a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f47f aa81 	bne.w	8006caa <_dtoa_r+0x92>
 80077a8:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <_dtoa_r+0xbd8>)
 80077aa:	f7ff baa1 	b.w	8006cf0 <_dtoa_r+0xd8>
 80077ae:	f1b9 0f00 	cmp.w	r9, #0
 80077b2:	dc03      	bgt.n	80077bc <_dtoa_r+0xba4>
 80077b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	f73f aecb 	bgt.w	8007552 <_dtoa_r+0x93a>
 80077bc:	9f03      	ldr	r7, [sp, #12]
 80077be:	4621      	mov	r1, r4
 80077c0:	4658      	mov	r0, fp
 80077c2:	f7ff f99b 	bl	8006afc <quorem>
 80077c6:	9a03      	ldr	r2, [sp, #12]
 80077c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80077cc:	f807 3b01 	strb.w	r3, [r7], #1
 80077d0:	1aba      	subs	r2, r7, r2
 80077d2:	4591      	cmp	r9, r2
 80077d4:	ddba      	ble.n	800774c <_dtoa_r+0xb34>
 80077d6:	4659      	mov	r1, fp
 80077d8:	2300      	movs	r3, #0
 80077da:	220a      	movs	r2, #10
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 f99f 	bl	8007b20 <__multadd>
 80077e2:	4683      	mov	fp, r0
 80077e4:	e7eb      	b.n	80077be <_dtoa_r+0xba6>
 80077e6:	bf00      	nop
 80077e8:	0800918e 	.word	0x0800918e
 80077ec:	08009054 	.word	0x08009054
 80077f0:	08009126 	.word	0x08009126

080077f4 <std>:
 80077f4:	2300      	movs	r3, #0
 80077f6:	b510      	push	{r4, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	e9c0 3300 	strd	r3, r3, [r0]
 80077fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007802:	6083      	str	r3, [r0, #8]
 8007804:	8181      	strh	r1, [r0, #12]
 8007806:	6643      	str	r3, [r0, #100]	; 0x64
 8007808:	81c2      	strh	r2, [r0, #14]
 800780a:	6183      	str	r3, [r0, #24]
 800780c:	4619      	mov	r1, r3
 800780e:	2208      	movs	r2, #8
 8007810:	305c      	adds	r0, #92	; 0x5c
 8007812:	f7fe fc77 	bl	8006104 <memset>
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <std+0x38>)
 8007818:	6224      	str	r4, [r4, #32]
 800781a:	6263      	str	r3, [r4, #36]	; 0x24
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <std+0x3c>)
 800781e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <std+0x40>)
 8007822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <std+0x44>)
 8007826:	6323      	str	r3, [r4, #48]	; 0x30
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	080088c9 	.word	0x080088c9
 8007830:	080088eb 	.word	0x080088eb
 8007834:	08008923 	.word	0x08008923
 8007838:	08008947 	.word	0x08008947

0800783c <_cleanup_r>:
 800783c:	4901      	ldr	r1, [pc, #4]	; (8007844 <_cleanup_r+0x8>)
 800783e:	f000 b8c1 	b.w	80079c4 <_fwalk_reent>
 8007842:	bf00      	nop
 8007844:	08008c29 	.word	0x08008c29

08007848 <__sfmoreglue>:
 8007848:	2268      	movs	r2, #104	; 0x68
 800784a:	b570      	push	{r4, r5, r6, lr}
 800784c:	1e4d      	subs	r5, r1, #1
 800784e:	4355      	muls	r5, r2
 8007850:	460e      	mov	r6, r1
 8007852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007856:	f000 fcff 	bl	8008258 <_malloc_r>
 800785a:	4604      	mov	r4, r0
 800785c:	b140      	cbz	r0, 8007870 <__sfmoreglue+0x28>
 800785e:	2100      	movs	r1, #0
 8007860:	e9c0 1600 	strd	r1, r6, [r0]
 8007864:	300c      	adds	r0, #12
 8007866:	60a0      	str	r0, [r4, #8]
 8007868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800786c:	f7fe fc4a 	bl	8006104 <memset>
 8007870:	4620      	mov	r0, r4
 8007872:	bd70      	pop	{r4, r5, r6, pc}

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 b8ca 	b.w	8007a0e <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	200004c9 	.word	0x200004c9

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 b8c5 	b.w	8007a10 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	200004c9 	.word	0x200004c9

0800788c <__sinit_lock_acquire>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__sinit_lock_acquire+0x8>)
 800788e:	f000 b8be 	b.w	8007a0e <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	200004ca 	.word	0x200004ca

08007898 <__sinit_lock_release>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__sinit_lock_release+0x8>)
 800789a:	f000 b8b9 	b.w	8007a10 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	200004ca 	.word	0x200004ca

080078a4 <__sinit>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	f7ff fff0 	bl	800788c <__sinit_lock_acquire>
 80078ac:	69a3      	ldr	r3, [r4, #24]
 80078ae:	b11b      	cbz	r3, 80078b8 <__sinit+0x14>
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f7ff bff0 	b.w	8007898 <__sinit_lock_release>
 80078b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078bc:	6523      	str	r3, [r4, #80]	; 0x50
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <__sinit+0x68>)
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <__sinit+0x6c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	bf08      	it	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	4620      	mov	r0, r4
 80078ce:	bf08      	it	eq
 80078d0:	61a3      	streq	r3, [r4, #24]
 80078d2:	f000 f81f 	bl	8007914 <__sfp>
 80078d6:	6060      	str	r0, [r4, #4]
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 f81b 	bl	8007914 <__sfp>
 80078de:	60a0      	str	r0, [r4, #8]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 f817 	bl	8007914 <__sfp>
 80078e6:	2200      	movs	r2, #0
 80078e8:	2104      	movs	r1, #4
 80078ea:	60e0      	str	r0, [r4, #12]
 80078ec:	6860      	ldr	r0, [r4, #4]
 80078ee:	f7ff ff81 	bl	80077f4 <std>
 80078f2:	2201      	movs	r2, #1
 80078f4:	2109      	movs	r1, #9
 80078f6:	68a0      	ldr	r0, [r4, #8]
 80078f8:	f7ff ff7c 	bl	80077f4 <std>
 80078fc:	2202      	movs	r2, #2
 80078fe:	2112      	movs	r1, #18
 8007900:	68e0      	ldr	r0, [r4, #12]
 8007902:	f7ff ff77 	bl	80077f4 <std>
 8007906:	2301      	movs	r3, #1
 8007908:	61a3      	str	r3, [r4, #24]
 800790a:	e7d1      	b.n	80078b0 <__sinit+0xc>
 800790c:	08009040 	.word	0x08009040
 8007910:	0800783d 	.word	0x0800783d

08007914 <__sfp>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	4607      	mov	r7, r0
 8007918:	f7ff ffac 	bl	8007874 <__sfp_lock_acquire>
 800791c:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <__sfp+0x84>)
 800791e:	681e      	ldr	r6, [r3, #0]
 8007920:	69b3      	ldr	r3, [r6, #24]
 8007922:	b913      	cbnz	r3, 800792a <__sfp+0x16>
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffbd 	bl	80078a4 <__sinit>
 800792a:	3648      	adds	r6, #72	; 0x48
 800792c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	d503      	bpl.n	800793c <__sfp+0x28>
 8007934:	6833      	ldr	r3, [r6, #0]
 8007936:	b30b      	cbz	r3, 800797c <__sfp+0x68>
 8007938:	6836      	ldr	r6, [r6, #0]
 800793a:	e7f7      	b.n	800792c <__sfp+0x18>
 800793c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007940:	b9d5      	cbnz	r5, 8007978 <__sfp+0x64>
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <__sfp+0x88>)
 8007944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007948:	60e3      	str	r3, [r4, #12]
 800794a:	6665      	str	r5, [r4, #100]	; 0x64
 800794c:	f000 f85e 	bl	8007a0c <__retarget_lock_init_recursive>
 8007950:	f7ff ff96 	bl	8007880 <__sfp_lock_release>
 8007954:	2208      	movs	r2, #8
 8007956:	4629      	mov	r1, r5
 8007958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800795c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	61a5      	str	r5, [r4, #24]
 8007964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007968:	f7fe fbcc 	bl	8006104 <memset>
 800796c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007974:	4620      	mov	r0, r4
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	3468      	adds	r4, #104	; 0x68
 800797a:	e7d9      	b.n	8007930 <__sfp+0x1c>
 800797c:	2104      	movs	r1, #4
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff ff62 	bl	8007848 <__sfmoreglue>
 8007984:	4604      	mov	r4, r0
 8007986:	6030      	str	r0, [r6, #0]
 8007988:	2800      	cmp	r0, #0
 800798a:	d1d5      	bne.n	8007938 <__sfp+0x24>
 800798c:	f7ff ff78 	bl	8007880 <__sfp_lock_release>
 8007990:	230c      	movs	r3, #12
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	e7ee      	b.n	8007974 <__sfp+0x60>
 8007996:	bf00      	nop
 8007998:	08009040 	.word	0x08009040
 800799c:	ffff0001 	.word	0xffff0001

080079a0 <fiprintf>:
 80079a0:	b40e      	push	{r1, r2, r3}
 80079a2:	b503      	push	{r0, r1, lr}
 80079a4:	4601      	mov	r1, r0
 80079a6:	ab03      	add	r3, sp, #12
 80079a8:	4805      	ldr	r0, [pc, #20]	; (80079c0 <fiprintf+0x20>)
 80079aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ae:	6800      	ldr	r0, [r0, #0]
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	f000 fe49 	bl	8008648 <_vfiprintf_r>
 80079b6:	b002      	add	sp, #8
 80079b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079bc:	b003      	add	sp, #12
 80079be:	4770      	bx	lr
 80079c0:	20000010 	.word	0x20000010

080079c4 <_fwalk_reent>:
 80079c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c8:	4606      	mov	r6, r0
 80079ca:	4688      	mov	r8, r1
 80079cc:	2700      	movs	r7, #0
 80079ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079d6:	f1b9 0901 	subs.w	r9, r9, #1
 80079da:	d505      	bpl.n	80079e8 <_fwalk_reent+0x24>
 80079dc:	6824      	ldr	r4, [r4, #0]
 80079de:	2c00      	cmp	r4, #0
 80079e0:	d1f7      	bne.n	80079d2 <_fwalk_reent+0xe>
 80079e2:	4638      	mov	r0, r7
 80079e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e8:	89ab      	ldrh	r3, [r5, #12]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d907      	bls.n	80079fe <_fwalk_reent+0x3a>
 80079ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f2:	3301      	adds	r3, #1
 80079f4:	d003      	beq.n	80079fe <_fwalk_reent+0x3a>
 80079f6:	4629      	mov	r1, r5
 80079f8:	4630      	mov	r0, r6
 80079fa:	47c0      	blx	r8
 80079fc:	4307      	orrs	r7, r0
 80079fe:	3568      	adds	r5, #104	; 0x68
 8007a00:	e7e9      	b.n	80079d6 <_fwalk_reent+0x12>
	...

08007a04 <_localeconv_r>:
 8007a04:	4800      	ldr	r0, [pc, #0]	; (8007a08 <_localeconv_r+0x4>)
 8007a06:	4770      	bx	lr
 8007a08:	20000164 	.word	0x20000164

08007a0c <__retarget_lock_init_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_acquire_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <__retarget_lock_release_recursive>:
 8007a10:	4770      	bx	lr
	...

08007a14 <malloc>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <malloc+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 bc1d 	b.w	8008258 <_malloc_r>
 8007a1e:	bf00      	nop
 8007a20:	20000010 	.word	0x20000010

08007a24 <memchr>:
 8007a24:	4603      	mov	r3, r0
 8007a26:	b510      	push	{r4, lr}
 8007a28:	b2c9      	uxtb	r1, r1
 8007a2a:	4402      	add	r2, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	d101      	bne.n	8007a36 <memchr+0x12>
 8007a32:	2000      	movs	r0, #0
 8007a34:	e003      	b.n	8007a3e <memchr+0x1a>
 8007a36:	7804      	ldrb	r4, [r0, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	428c      	cmp	r4, r1
 8007a3c:	d1f6      	bne.n	8007a2c <memchr+0x8>
 8007a3e:	bd10      	pop	{r4, pc}

08007a40 <memcpy>:
 8007a40:	440a      	add	r2, r1
 8007a42:	4291      	cmp	r1, r2
 8007a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a48:	d100      	bne.n	8007a4c <memcpy+0xc>
 8007a4a:	4770      	bx	lr
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a58:	d1f9      	bne.n	8007a4e <memcpy+0xe>
 8007a5a:	bd10      	pop	{r4, pc}

08007a5c <_Balloc>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
 8007a64:	b976      	cbnz	r6, 8007a84 <_Balloc+0x28>
 8007a66:	2010      	movs	r0, #16
 8007a68:	f7ff ffd4 	bl	8007a14 <malloc>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a70:	b920      	cbnz	r0, 8007a7c <_Balloc+0x20>
 8007a72:	2166      	movs	r1, #102	; 0x66
 8007a74:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <_Balloc+0x78>)
 8007a76:	4818      	ldr	r0, [pc, #96]	; (8007ad8 <_Balloc+0x7c>)
 8007a78:	f7ff f822 	bl	8006ac0 <__assert_func>
 8007a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a80:	6006      	str	r6, [r0, #0]
 8007a82:	60c6      	str	r6, [r0, #12]
 8007a84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a86:	68f3      	ldr	r3, [r6, #12]
 8007a88:	b183      	cbz	r3, 8007aac <_Balloc+0x50>
 8007a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a92:	b9b8      	cbnz	r0, 8007ac4 <_Balloc+0x68>
 8007a94:	2101      	movs	r1, #1
 8007a96:	fa01 f605 	lsl.w	r6, r1, r5
 8007a9a:	1d72      	adds	r2, r6, #5
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	f000 fb5e 	bl	8008160 <_calloc_r>
 8007aa4:	b160      	cbz	r0, 8007ac0 <_Balloc+0x64>
 8007aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aaa:	e00e      	b.n	8007aca <_Balloc+0x6e>
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	2104      	movs	r1, #4
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fb55 	bl	8008160 <_calloc_r>
 8007ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab8:	60f0      	str	r0, [r6, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e4      	bne.n	8007a8a <_Balloc+0x2e>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	6802      	ldr	r2, [r0, #0]
 8007ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aca:	2300      	movs	r3, #0
 8007acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad0:	e7f7      	b.n	8007ac2 <_Balloc+0x66>
 8007ad2:	bf00      	nop
 8007ad4:	08009078 	.word	0x08009078
 8007ad8:	08009200 	.word	0x08009200

08007adc <_Bfree>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b976      	cbnz	r6, 8007b04 <_Bfree+0x28>
 8007ae6:	2010      	movs	r0, #16
 8007ae8:	f7ff ff94 	bl	8007a14 <malloc>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6268      	str	r0, [r5, #36]	; 0x24
 8007af0:	b920      	cbnz	r0, 8007afc <_Bfree+0x20>
 8007af2:	218a      	movs	r1, #138	; 0x8a
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <_Bfree+0x3c>)
 8007af6:	4809      	ldr	r0, [pc, #36]	; (8007b1c <_Bfree+0x40>)
 8007af8:	f7fe ffe2 	bl	8006ac0 <__assert_func>
 8007afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b00:	6006      	str	r6, [r0, #0]
 8007b02:	60c6      	str	r6, [r0, #12]
 8007b04:	b13c      	cbz	r4, 8007b16 <_Bfree+0x3a>
 8007b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b10:	6021      	str	r1, [r4, #0]
 8007b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	08009078 	.word	0x08009078
 8007b1c:	08009200 	.word	0x08009200

08007b20 <__multadd>:
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	4607      	mov	r7, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	461e      	mov	r6, r3
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	690d      	ldr	r5, [r1, #16]
 8007b2e:	f101 0c14 	add.w	ip, r1, #20
 8007b32:	f8dc 3000 	ldr.w	r3, [ip]
 8007b36:	3001      	adds	r0, #1
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	fb02 6101 	mla	r1, r2, r1, r6
 8007b3e:	0c1e      	lsrs	r6, r3, #16
 8007b40:	0c0b      	lsrs	r3, r1, #16
 8007b42:	fb02 3306 	mla	r3, r2, r6, r3
 8007b46:	b289      	uxth	r1, r1
 8007b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b4c:	4285      	cmp	r5, r0
 8007b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b52:	f84c 1b04 	str.w	r1, [ip], #4
 8007b56:	dcec      	bgt.n	8007b32 <__multadd+0x12>
 8007b58:	b30e      	cbz	r6, 8007b9e <__multadd+0x7e>
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dc19      	bgt.n	8007b94 <__multadd+0x74>
 8007b60:	6861      	ldr	r1, [r4, #4]
 8007b62:	4638      	mov	r0, r7
 8007b64:	3101      	adds	r1, #1
 8007b66:	f7ff ff79 	bl	8007a5c <_Balloc>
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	b928      	cbnz	r0, 8007b7a <__multadd+0x5a>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	21b5      	movs	r1, #181	; 0xb5
 8007b72:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <__multadd+0x84>)
 8007b74:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <__multadd+0x88>)
 8007b76:	f7fe ffa3 	bl	8006ac0 <__assert_func>
 8007b7a:	6922      	ldr	r2, [r4, #16]
 8007b7c:	f104 010c 	add.w	r1, r4, #12
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	300c      	adds	r0, #12
 8007b86:	f7ff ff5b 	bl	8007a40 <memcpy>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff ffa5 	bl	8007adc <_Bfree>
 8007b92:	4644      	mov	r4, r8
 8007b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b98:	3501      	adds	r5, #1
 8007b9a:	615e      	str	r6, [r3, #20]
 8007b9c:	6125      	str	r5, [r4, #16]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba4:	0800918e 	.word	0x0800918e
 8007ba8:	08009200 	.word	0x08009200

08007bac <__hi0bits>:
 8007bac:	0c02      	lsrs	r2, r0, #16
 8007bae:	0412      	lsls	r2, r2, #16
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	b9ca      	cbnz	r2, 8007be8 <__hi0bits+0x3c>
 8007bb4:	0403      	lsls	r3, r0, #16
 8007bb6:	2010      	movs	r0, #16
 8007bb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bbc:	bf04      	itt	eq
 8007bbe:	021b      	lsleq	r3, r3, #8
 8007bc0:	3008      	addeq	r0, #8
 8007bc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bc6:	bf04      	itt	eq
 8007bc8:	011b      	lsleq	r3, r3, #4
 8007bca:	3004      	addeq	r0, #4
 8007bcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bd0:	bf04      	itt	eq
 8007bd2:	009b      	lsleq	r3, r3, #2
 8007bd4:	3002      	addeq	r0, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	db05      	blt.n	8007be6 <__hi0bits+0x3a>
 8007bda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	bf08      	it	eq
 8007be4:	2020      	moveq	r0, #32
 8007be6:	4770      	bx	lr
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7e5      	b.n	8007bb8 <__hi0bits+0xc>

08007bec <__lo0bits>:
 8007bec:	6803      	ldr	r3, [r0, #0]
 8007bee:	4602      	mov	r2, r0
 8007bf0:	f013 0007 	ands.w	r0, r3, #7
 8007bf4:	d00b      	beq.n	8007c0e <__lo0bits+0x22>
 8007bf6:	07d9      	lsls	r1, r3, #31
 8007bf8:	d421      	bmi.n	8007c3e <__lo0bits+0x52>
 8007bfa:	0798      	lsls	r0, r3, #30
 8007bfc:	bf49      	itett	mi
 8007bfe:	085b      	lsrmi	r3, r3, #1
 8007c00:	089b      	lsrpl	r3, r3, #2
 8007c02:	2001      	movmi	r0, #1
 8007c04:	6013      	strmi	r3, [r2, #0]
 8007c06:	bf5c      	itt	pl
 8007c08:	2002      	movpl	r0, #2
 8007c0a:	6013      	strpl	r3, [r2, #0]
 8007c0c:	4770      	bx	lr
 8007c0e:	b299      	uxth	r1, r3
 8007c10:	b909      	cbnz	r1, 8007c16 <__lo0bits+0x2a>
 8007c12:	2010      	movs	r0, #16
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	b2d9      	uxtb	r1, r3
 8007c18:	b909      	cbnz	r1, 8007c1e <__lo0bits+0x32>
 8007c1a:	3008      	adds	r0, #8
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	0719      	lsls	r1, r3, #28
 8007c20:	bf04      	itt	eq
 8007c22:	091b      	lsreq	r3, r3, #4
 8007c24:	3004      	addeq	r0, #4
 8007c26:	0799      	lsls	r1, r3, #30
 8007c28:	bf04      	itt	eq
 8007c2a:	089b      	lsreq	r3, r3, #2
 8007c2c:	3002      	addeq	r0, #2
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	d403      	bmi.n	8007c3a <__lo0bits+0x4e>
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	f100 0001 	add.w	r0, r0, #1
 8007c38:	d003      	beq.n	8007c42 <__lo0bits+0x56>
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	2000      	movs	r0, #0
 8007c40:	4770      	bx	lr
 8007c42:	2020      	movs	r0, #32
 8007c44:	4770      	bx	lr
	...

08007c48 <__i2b>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	f7ff ff05 	bl	8007a5c <_Balloc>
 8007c52:	4602      	mov	r2, r0
 8007c54:	b928      	cbnz	r0, 8007c62 <__i2b+0x1a>
 8007c56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c5a:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <__i2b+0x24>)
 8007c5c:	4804      	ldr	r0, [pc, #16]	; (8007c70 <__i2b+0x28>)
 8007c5e:	f7fe ff2f 	bl	8006ac0 <__assert_func>
 8007c62:	2301      	movs	r3, #1
 8007c64:	6144      	str	r4, [r0, #20]
 8007c66:	6103      	str	r3, [r0, #16]
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	0800918e 	.word	0x0800918e
 8007c70:	08009200 	.word	0x08009200

08007c74 <__multiply>:
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	4691      	mov	r9, r2
 8007c7a:	690a      	ldr	r2, [r1, #16]
 8007c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c80:	460c      	mov	r4, r1
 8007c82:	429a      	cmp	r2, r3
 8007c84:	bfbe      	ittt	lt
 8007c86:	460b      	movlt	r3, r1
 8007c88:	464c      	movlt	r4, r9
 8007c8a:	4699      	movlt	r9, r3
 8007c8c:	6927      	ldr	r7, [r4, #16]
 8007c8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	6861      	ldr	r1, [r4, #4]
 8007c96:	eb07 060a 	add.w	r6, r7, sl
 8007c9a:	42b3      	cmp	r3, r6
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	bfb8      	it	lt
 8007ca0:	3101      	addlt	r1, #1
 8007ca2:	f7ff fedb 	bl	8007a5c <_Balloc>
 8007ca6:	b930      	cbnz	r0, 8007cb6 <__multiply+0x42>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	f240 115d 	movw	r1, #349	; 0x15d
 8007cae:	4b43      	ldr	r3, [pc, #268]	; (8007dbc <__multiply+0x148>)
 8007cb0:	4843      	ldr	r0, [pc, #268]	; (8007dc0 <__multiply+0x14c>)
 8007cb2:	f7fe ff05 	bl	8006ac0 <__assert_func>
 8007cb6:	f100 0514 	add.w	r5, r0, #20
 8007cba:	462b      	mov	r3, r5
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cc2:	4543      	cmp	r3, r8
 8007cc4:	d321      	bcc.n	8007d0a <__multiply+0x96>
 8007cc6:	f104 0314 	add.w	r3, r4, #20
 8007cca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cce:	f109 0314 	add.w	r3, r9, #20
 8007cd2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	1b3a      	subs	r2, r7, r4
 8007cda:	3a15      	subs	r2, #21
 8007cdc:	f022 0203 	bic.w	r2, r2, #3
 8007ce0:	3204      	adds	r2, #4
 8007ce2:	f104 0115 	add.w	r1, r4, #21
 8007ce6:	428f      	cmp	r7, r1
 8007ce8:	bf38      	it	cc
 8007cea:	2204      	movcc	r2, #4
 8007cec:	9201      	str	r2, [sp, #4]
 8007cee:	9a02      	ldr	r2, [sp, #8]
 8007cf0:	9303      	str	r3, [sp, #12]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d80c      	bhi.n	8007d10 <__multiply+0x9c>
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	dd03      	ble.n	8007d02 <__multiply+0x8e>
 8007cfa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d059      	beq.n	8007db6 <__multiply+0x142>
 8007d02:	6106      	str	r6, [r0, #16]
 8007d04:	b005      	add	sp, #20
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	f843 2b04 	str.w	r2, [r3], #4
 8007d0e:	e7d8      	b.n	8007cc2 <__multiply+0x4e>
 8007d10:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d14:	f1ba 0f00 	cmp.w	sl, #0
 8007d18:	d023      	beq.n	8007d62 <__multiply+0xee>
 8007d1a:	46a9      	mov	r9, r5
 8007d1c:	f04f 0c00 	mov.w	ip, #0
 8007d20:	f104 0e14 	add.w	lr, r4, #20
 8007d24:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d28:	f8d9 1000 	ldr.w	r1, [r9]
 8007d2c:	fa1f fb82 	uxth.w	fp, r2
 8007d30:	b289      	uxth	r1, r1
 8007d32:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d36:	4461      	add	r1, ip
 8007d38:	f8d9 c000 	ldr.w	ip, [r9]
 8007d3c:	0c12      	lsrs	r2, r2, #16
 8007d3e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d42:	fb0a c202 	mla	r2, sl, r2, ip
 8007d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d50:	4577      	cmp	r7, lr
 8007d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d56:	f849 1b04 	str.w	r1, [r9], #4
 8007d5a:	d8e3      	bhi.n	8007d24 <__multiply+0xb0>
 8007d5c:	9a01      	ldr	r2, [sp, #4]
 8007d5e:	f845 c002 	str.w	ip, [r5, r2]
 8007d62:	9a03      	ldr	r2, [sp, #12]
 8007d64:	3304      	adds	r3, #4
 8007d66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d6a:	f1b9 0f00 	cmp.w	r9, #0
 8007d6e:	d020      	beq.n	8007db2 <__multiply+0x13e>
 8007d70:	46ae      	mov	lr, r5
 8007d72:	f04f 0a00 	mov.w	sl, #0
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	f104 0c14 	add.w	ip, r4, #20
 8007d7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d84:	b289      	uxth	r1, r1
 8007d86:	fb09 220b 	mla	r2, r9, fp, r2
 8007d8a:	4492      	add	sl, r2
 8007d8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d90:	f84e 1b04 	str.w	r1, [lr], #4
 8007d94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d98:	f8be 1000 	ldrh.w	r1, [lr]
 8007d9c:	0c12      	lsrs	r2, r2, #16
 8007d9e:	fb09 1102 	mla	r1, r9, r2, r1
 8007da2:	4567      	cmp	r7, ip
 8007da4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007da8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dac:	d8e6      	bhi.n	8007d7c <__multiply+0x108>
 8007dae:	9a01      	ldr	r2, [sp, #4]
 8007db0:	50a9      	str	r1, [r5, r2]
 8007db2:	3504      	adds	r5, #4
 8007db4:	e79b      	b.n	8007cee <__multiply+0x7a>
 8007db6:	3e01      	subs	r6, #1
 8007db8:	e79d      	b.n	8007cf6 <__multiply+0x82>
 8007dba:	bf00      	nop
 8007dbc:	0800918e 	.word	0x0800918e
 8007dc0:	08009200 	.word	0x08009200

08007dc4 <__pow5mult>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4615      	mov	r5, r2
 8007dca:	f012 0203 	ands.w	r2, r2, #3
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	d007      	beq.n	8007de4 <__pow5mult+0x20>
 8007dd4:	4c25      	ldr	r4, [pc, #148]	; (8007e6c <__pow5mult+0xa8>)
 8007dd6:	3a01      	subs	r2, #1
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dde:	f7ff fe9f 	bl	8007b20 <__multadd>
 8007de2:	4607      	mov	r7, r0
 8007de4:	10ad      	asrs	r5, r5, #2
 8007de6:	d03d      	beq.n	8007e64 <__pow5mult+0xa0>
 8007de8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dea:	b97c      	cbnz	r4, 8007e0c <__pow5mult+0x48>
 8007dec:	2010      	movs	r0, #16
 8007dee:	f7ff fe11 	bl	8007a14 <malloc>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6270      	str	r0, [r6, #36]	; 0x24
 8007df6:	b928      	cbnz	r0, 8007e04 <__pow5mult+0x40>
 8007df8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <__pow5mult+0xac>)
 8007dfe:	481d      	ldr	r0, [pc, #116]	; (8007e74 <__pow5mult+0xb0>)
 8007e00:	f7fe fe5e 	bl	8006ac0 <__assert_func>
 8007e04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e08:	6004      	str	r4, [r0, #0]
 8007e0a:	60c4      	str	r4, [r0, #12]
 8007e0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e14:	b94c      	cbnz	r4, 8007e2a <__pow5mult+0x66>
 8007e16:	f240 2171 	movw	r1, #625	; 0x271
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7ff ff14 	bl	8007c48 <__i2b>
 8007e20:	2300      	movs	r3, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e28:	6003      	str	r3, [r0, #0]
 8007e2a:	f04f 0900 	mov.w	r9, #0
 8007e2e:	07eb      	lsls	r3, r5, #31
 8007e30:	d50a      	bpl.n	8007e48 <__pow5mult+0x84>
 8007e32:	4639      	mov	r1, r7
 8007e34:	4622      	mov	r2, r4
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ff1c 	bl	8007c74 <__multiply>
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	4639      	mov	r1, r7
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff fe4b 	bl	8007adc <_Bfree>
 8007e46:	4647      	mov	r7, r8
 8007e48:	106d      	asrs	r5, r5, #1
 8007e4a:	d00b      	beq.n	8007e64 <__pow5mult+0xa0>
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	b938      	cbnz	r0, 8007e60 <__pow5mult+0x9c>
 8007e50:	4622      	mov	r2, r4
 8007e52:	4621      	mov	r1, r4
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7ff ff0d 	bl	8007c74 <__multiply>
 8007e5a:	6020      	str	r0, [r4, #0]
 8007e5c:	f8c0 9000 	str.w	r9, [r0]
 8007e60:	4604      	mov	r4, r0
 8007e62:	e7e4      	b.n	8007e2e <__pow5mult+0x6a>
 8007e64:	4638      	mov	r0, r7
 8007e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	bf00      	nop
 8007e6c:	08009350 	.word	0x08009350
 8007e70:	08009078 	.word	0x08009078
 8007e74:	08009200 	.word	0x08009200

08007e78 <__lshift>:
 8007e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	4607      	mov	r7, r0
 8007e80:	4691      	mov	r9, r2
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	6849      	ldr	r1, [r1, #4]
 8007e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e90:	f108 0601 	add.w	r6, r8, #1
 8007e94:	42b3      	cmp	r3, r6
 8007e96:	db0b      	blt.n	8007eb0 <__lshift+0x38>
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f7ff fddf 	bl	8007a5c <_Balloc>
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	b948      	cbnz	r0, 8007eb6 <__lshift+0x3e>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <__lshift+0xd8>)
 8007eaa:	482a      	ldr	r0, [pc, #168]	; (8007f54 <__lshift+0xdc>)
 8007eac:	f7fe fe08 	bl	8006ac0 <__assert_func>
 8007eb0:	3101      	adds	r1, #1
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	e7ee      	b.n	8007e94 <__lshift+0x1c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f100 0114 	add.w	r1, r0, #20
 8007ebc:	f100 0210 	add.w	r2, r0, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	4553      	cmp	r3, sl
 8007ec4:	db37      	blt.n	8007f36 <__lshift+0xbe>
 8007ec6:	6920      	ldr	r0, [r4, #16]
 8007ec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ecc:	f104 0314 	add.w	r3, r4, #20
 8007ed0:	f019 091f 	ands.w	r9, r9, #31
 8007ed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007edc:	d02f      	beq.n	8007f3e <__lshift+0xc6>
 8007ede:	468a      	mov	sl, r1
 8007ee0:	f04f 0c00 	mov.w	ip, #0
 8007ee4:	f1c9 0e20 	rsb	lr, r9, #32
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	fa02 f209 	lsl.w	r2, r2, r9
 8007eee:	ea42 020c 	orr.w	r2, r2, ip
 8007ef2:	f84a 2b04 	str.w	r2, [sl], #4
 8007ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efa:	4298      	cmp	r0, r3
 8007efc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f00:	d8f2      	bhi.n	8007ee8 <__lshift+0x70>
 8007f02:	1b03      	subs	r3, r0, r4
 8007f04:	3b15      	subs	r3, #21
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	f104 0215 	add.w	r2, r4, #21
 8007f10:	4290      	cmp	r0, r2
 8007f12:	bf38      	it	cc
 8007f14:	2304      	movcc	r3, #4
 8007f16:	f841 c003 	str.w	ip, [r1, r3]
 8007f1a:	f1bc 0f00 	cmp.w	ip, #0
 8007f1e:	d001      	beq.n	8007f24 <__lshift+0xac>
 8007f20:	f108 0602 	add.w	r6, r8, #2
 8007f24:	3e01      	subs	r6, #1
 8007f26:	4638      	mov	r0, r7
 8007f28:	4621      	mov	r1, r4
 8007f2a:	612e      	str	r6, [r5, #16]
 8007f2c:	f7ff fdd6 	bl	8007adc <_Bfree>
 8007f30:	4628      	mov	r0, r5
 8007f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	e7c1      	b.n	8007ec2 <__lshift+0x4a>
 8007f3e:	3904      	subs	r1, #4
 8007f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f44:	4298      	cmp	r0, r3
 8007f46:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f4a:	d8f9      	bhi.n	8007f40 <__lshift+0xc8>
 8007f4c:	e7ea      	b.n	8007f24 <__lshift+0xac>
 8007f4e:	bf00      	nop
 8007f50:	0800918e 	.word	0x0800918e
 8007f54:	08009200 	.word	0x08009200

08007f58 <__mcmp>:
 8007f58:	4603      	mov	r3, r0
 8007f5a:	690a      	ldr	r2, [r1, #16]
 8007f5c:	6900      	ldr	r0, [r0, #16]
 8007f5e:	b530      	push	{r4, r5, lr}
 8007f60:	1a80      	subs	r0, r0, r2
 8007f62:	d10d      	bne.n	8007f80 <__mcmp+0x28>
 8007f64:	3314      	adds	r3, #20
 8007f66:	3114      	adds	r1, #20
 8007f68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f78:	4295      	cmp	r5, r2
 8007f7a:	d002      	beq.n	8007f82 <__mcmp+0x2a>
 8007f7c:	d304      	bcc.n	8007f88 <__mcmp+0x30>
 8007f7e:	2001      	movs	r0, #1
 8007f80:	bd30      	pop	{r4, r5, pc}
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	d3f4      	bcc.n	8007f70 <__mcmp+0x18>
 8007f86:	e7fb      	b.n	8007f80 <__mcmp+0x28>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e7f8      	b.n	8007f80 <__mcmp+0x28>
	...

08007f90 <__mdiff>:
 8007f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	460d      	mov	r5, r1
 8007f96:	4607      	mov	r7, r0
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	f7ff ffdb 	bl	8007f58 <__mcmp>
 8007fa2:	1e06      	subs	r6, r0, #0
 8007fa4:	d111      	bne.n	8007fca <__mdiff+0x3a>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff fd57 	bl	8007a5c <_Balloc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	b928      	cbnz	r0, 8007fbe <__mdiff+0x2e>
 8007fb2:	f240 2132 	movw	r1, #562	; 0x232
 8007fb6:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <__mdiff+0x110>)
 8007fb8:	483a      	ldr	r0, [pc, #232]	; (80080a4 <__mdiff+0x114>)
 8007fba:	f7fe fd81 	bl	8006ac0 <__assert_func>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fca:	bfa4      	itt	ge
 8007fcc:	4623      	movge	r3, r4
 8007fce:	462c      	movge	r4, r5
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	6861      	ldr	r1, [r4, #4]
 8007fd4:	bfa6      	itte	ge
 8007fd6:	461d      	movge	r5, r3
 8007fd8:	2600      	movge	r6, #0
 8007fda:	2601      	movlt	r6, #1
 8007fdc:	f7ff fd3e 	bl	8007a5c <_Balloc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	b918      	cbnz	r0, 8007fec <__mdiff+0x5c>
 8007fe4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fe8:	4b2d      	ldr	r3, [pc, #180]	; (80080a0 <__mdiff+0x110>)
 8007fea:	e7e5      	b.n	8007fb8 <__mdiff+0x28>
 8007fec:	f102 0814 	add.w	r8, r2, #20
 8007ff0:	46c2      	mov	sl, r8
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	6927      	ldr	r7, [r4, #16]
 8007ff8:	60c6      	str	r6, [r0, #12]
 8007ffa:	692e      	ldr	r6, [r5, #16]
 8007ffc:	f104 0014 	add.w	r0, r4, #20
 8008000:	f105 0914 	add.w	r9, r5, #20
 8008004:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800800c:	3410      	adds	r4, #16
 800800e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008012:	f859 3b04 	ldr.w	r3, [r9], #4
 8008016:	fa1f f18b 	uxth.w	r1, fp
 800801a:	448c      	add	ip, r1
 800801c:	b299      	uxth	r1, r3
 800801e:	0c1b      	lsrs	r3, r3, #16
 8008020:	ebac 0101 	sub.w	r1, ip, r1
 8008024:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008028:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800802c:	b289      	uxth	r1, r1
 800802e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008032:	454e      	cmp	r6, r9
 8008034:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008038:	f84a 3b04 	str.w	r3, [sl], #4
 800803c:	d8e7      	bhi.n	800800e <__mdiff+0x7e>
 800803e:	1b73      	subs	r3, r6, r5
 8008040:	3b15      	subs	r3, #21
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	3515      	adds	r5, #21
 8008048:	3304      	adds	r3, #4
 800804a:	42ae      	cmp	r6, r5
 800804c:	bf38      	it	cc
 800804e:	2304      	movcc	r3, #4
 8008050:	4418      	add	r0, r3
 8008052:	4443      	add	r3, r8
 8008054:	461e      	mov	r6, r3
 8008056:	4605      	mov	r5, r0
 8008058:	4575      	cmp	r5, lr
 800805a:	d30e      	bcc.n	800807a <__mdiff+0xea>
 800805c:	f10e 0103 	add.w	r1, lr, #3
 8008060:	1a09      	subs	r1, r1, r0
 8008062:	f021 0103 	bic.w	r1, r1, #3
 8008066:	3803      	subs	r0, #3
 8008068:	4586      	cmp	lr, r0
 800806a:	bf38      	it	cc
 800806c:	2100      	movcc	r1, #0
 800806e:	4419      	add	r1, r3
 8008070:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008074:	b18b      	cbz	r3, 800809a <__mdiff+0x10a>
 8008076:	6117      	str	r7, [r2, #16]
 8008078:	e7a4      	b.n	8007fc4 <__mdiff+0x34>
 800807a:	f855 8b04 	ldr.w	r8, [r5], #4
 800807e:	fa1f f188 	uxth.w	r1, r8
 8008082:	4461      	add	r1, ip
 8008084:	140c      	asrs	r4, r1, #16
 8008086:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800808a:	b289      	uxth	r1, r1
 800808c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008090:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008094:	f846 1b04 	str.w	r1, [r6], #4
 8008098:	e7de      	b.n	8008058 <__mdiff+0xc8>
 800809a:	3f01      	subs	r7, #1
 800809c:	e7e8      	b.n	8008070 <__mdiff+0xe0>
 800809e:	bf00      	nop
 80080a0:	0800918e 	.word	0x0800918e
 80080a4:	08009200 	.word	0x08009200

080080a8 <__d2b>:
 80080a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080ac:	2101      	movs	r1, #1
 80080ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80080b2:	4690      	mov	r8, r2
 80080b4:	461d      	mov	r5, r3
 80080b6:	f7ff fcd1 	bl	8007a5c <_Balloc>
 80080ba:	4604      	mov	r4, r0
 80080bc:	b930      	cbnz	r0, 80080cc <__d2b+0x24>
 80080be:	4602      	mov	r2, r0
 80080c0:	f240 310a 	movw	r1, #778	; 0x30a
 80080c4:	4b24      	ldr	r3, [pc, #144]	; (8008158 <__d2b+0xb0>)
 80080c6:	4825      	ldr	r0, [pc, #148]	; (800815c <__d2b+0xb4>)
 80080c8:	f7fe fcfa 	bl	8006ac0 <__assert_func>
 80080cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080d4:	bb2d      	cbnz	r5, 8008122 <__d2b+0x7a>
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	f1b8 0300 	subs.w	r3, r8, #0
 80080dc:	d026      	beq.n	800812c <__d2b+0x84>
 80080de:	4668      	mov	r0, sp
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	f7ff fd83 	bl	8007bec <__lo0bits>
 80080e6:	9900      	ldr	r1, [sp, #0]
 80080e8:	b1f0      	cbz	r0, 8008128 <__d2b+0x80>
 80080ea:	9a01      	ldr	r2, [sp, #4]
 80080ec:	f1c0 0320 	rsb	r3, r0, #32
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	430b      	orrs	r3, r1
 80080f6:	40c2      	lsrs	r2, r0
 80080f8:	6163      	str	r3, [r4, #20]
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bf14      	ite	ne
 8008102:	2102      	movne	r1, #2
 8008104:	2101      	moveq	r1, #1
 8008106:	61a3      	str	r3, [r4, #24]
 8008108:	6121      	str	r1, [r4, #16]
 800810a:	b1c5      	cbz	r5, 800813e <__d2b+0x96>
 800810c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008110:	4405      	add	r5, r0
 8008112:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008116:	603d      	str	r5, [r7, #0]
 8008118:	6030      	str	r0, [r6, #0]
 800811a:	4620      	mov	r0, r4
 800811c:	b002      	add	sp, #8
 800811e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008126:	e7d6      	b.n	80080d6 <__d2b+0x2e>
 8008128:	6161      	str	r1, [r4, #20]
 800812a:	e7e7      	b.n	80080fc <__d2b+0x54>
 800812c:	a801      	add	r0, sp, #4
 800812e:	f7ff fd5d 	bl	8007bec <__lo0bits>
 8008132:	2101      	movs	r1, #1
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	6121      	str	r1, [r4, #16]
 8008138:	6163      	str	r3, [r4, #20]
 800813a:	3020      	adds	r0, #32
 800813c:	e7e5      	b.n	800810a <__d2b+0x62>
 800813e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008142:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008146:	6038      	str	r0, [r7, #0]
 8008148:	6918      	ldr	r0, [r3, #16]
 800814a:	f7ff fd2f 	bl	8007bac <__hi0bits>
 800814e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008152:	6031      	str	r1, [r6, #0]
 8008154:	e7e1      	b.n	800811a <__d2b+0x72>
 8008156:	bf00      	nop
 8008158:	0800918e 	.word	0x0800918e
 800815c:	08009200 	.word	0x08009200

08008160 <_calloc_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	fba1 5402 	umull	r5, r4, r1, r2
 8008166:	b934      	cbnz	r4, 8008176 <_calloc_r+0x16>
 8008168:	4629      	mov	r1, r5
 800816a:	f000 f875 	bl	8008258 <_malloc_r>
 800816e:	4606      	mov	r6, r0
 8008170:	b928      	cbnz	r0, 800817e <_calloc_r+0x1e>
 8008172:	4630      	mov	r0, r6
 8008174:	bd70      	pop	{r4, r5, r6, pc}
 8008176:	220c      	movs	r2, #12
 8008178:	2600      	movs	r6, #0
 800817a:	6002      	str	r2, [r0, #0]
 800817c:	e7f9      	b.n	8008172 <_calloc_r+0x12>
 800817e:	462a      	mov	r2, r5
 8008180:	4621      	mov	r1, r4
 8008182:	f7fd ffbf 	bl	8006104 <memset>
 8008186:	e7f4      	b.n	8008172 <_calloc_r+0x12>

08008188 <_free_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4605      	mov	r5, r0
 800818c:	2900      	cmp	r1, #0
 800818e:	d040      	beq.n	8008212 <_free_r+0x8a>
 8008190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008194:	1f0c      	subs	r4, r1, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfb8      	it	lt
 800819a:	18e4      	addlt	r4, r4, r3
 800819c:	f000 fe24 	bl	8008de8 <__malloc_lock>
 80081a0:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <_free_r+0x8c>)
 80081a2:	6813      	ldr	r3, [r2, #0]
 80081a4:	b933      	cbnz	r3, 80081b4 <_free_r+0x2c>
 80081a6:	6063      	str	r3, [r4, #4]
 80081a8:	6014      	str	r4, [r2, #0]
 80081aa:	4628      	mov	r0, r5
 80081ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081b0:	f000 be20 	b.w	8008df4 <__malloc_unlock>
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d908      	bls.n	80081ca <_free_r+0x42>
 80081b8:	6820      	ldr	r0, [r4, #0]
 80081ba:	1821      	adds	r1, r4, r0
 80081bc:	428b      	cmp	r3, r1
 80081be:	bf01      	itttt	eq
 80081c0:	6819      	ldreq	r1, [r3, #0]
 80081c2:	685b      	ldreq	r3, [r3, #4]
 80081c4:	1809      	addeq	r1, r1, r0
 80081c6:	6021      	streq	r1, [r4, #0]
 80081c8:	e7ed      	b.n	80081a6 <_free_r+0x1e>
 80081ca:	461a      	mov	r2, r3
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	b10b      	cbz	r3, 80081d4 <_free_r+0x4c>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d9fa      	bls.n	80081ca <_free_r+0x42>
 80081d4:	6811      	ldr	r1, [r2, #0]
 80081d6:	1850      	adds	r0, r2, r1
 80081d8:	42a0      	cmp	r0, r4
 80081da:	d10b      	bne.n	80081f4 <_free_r+0x6c>
 80081dc:	6820      	ldr	r0, [r4, #0]
 80081de:	4401      	add	r1, r0
 80081e0:	1850      	adds	r0, r2, r1
 80081e2:	4283      	cmp	r3, r0
 80081e4:	6011      	str	r1, [r2, #0]
 80081e6:	d1e0      	bne.n	80081aa <_free_r+0x22>
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4401      	add	r1, r0
 80081ee:	6011      	str	r1, [r2, #0]
 80081f0:	6053      	str	r3, [r2, #4]
 80081f2:	e7da      	b.n	80081aa <_free_r+0x22>
 80081f4:	d902      	bls.n	80081fc <_free_r+0x74>
 80081f6:	230c      	movs	r3, #12
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	e7d6      	b.n	80081aa <_free_r+0x22>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	1821      	adds	r1, r4, r0
 8008200:	428b      	cmp	r3, r1
 8008202:	bf01      	itttt	eq
 8008204:	6819      	ldreq	r1, [r3, #0]
 8008206:	685b      	ldreq	r3, [r3, #4]
 8008208:	1809      	addeq	r1, r1, r0
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6054      	str	r4, [r2, #4]
 8008210:	e7cb      	b.n	80081aa <_free_r+0x22>
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	200004cc 	.word	0x200004cc

08008218 <sbrk_aligned>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4e0e      	ldr	r6, [pc, #56]	; (8008254 <sbrk_aligned+0x3c>)
 800821c:	460c      	mov	r4, r1
 800821e:	6831      	ldr	r1, [r6, #0]
 8008220:	4605      	mov	r5, r0
 8008222:	b911      	cbnz	r1, 800822a <sbrk_aligned+0x12>
 8008224:	f000 fb40 	bl	80088a8 <_sbrk_r>
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 fb3b 	bl	80088a8 <_sbrk_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d00a      	beq.n	800824c <sbrk_aligned+0x34>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d007      	beq.n	8008250 <sbrk_aligned+0x38>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4628      	mov	r0, r5
 8008244:	f000 fb30 	bl	80088a8 <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d101      	bne.n	8008250 <sbrk_aligned+0x38>
 800824c:	f04f 34ff 	mov.w	r4, #4294967295
 8008250:	4620      	mov	r0, r4
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	200004d0 	.word	0x200004d0

08008258 <_malloc_r>:
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	1ccd      	adds	r5, r1, #3
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	2d00      	cmp	r5, #0
 800826c:	4607      	mov	r7, r0
 800826e:	db01      	blt.n	8008274 <_malloc_r+0x1c>
 8008270:	42a9      	cmp	r1, r5
 8008272:	d905      	bls.n	8008280 <_malloc_r+0x28>
 8008274:	230c      	movs	r3, #12
 8008276:	2600      	movs	r6, #0
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	4630      	mov	r0, r6
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	4e2e      	ldr	r6, [pc, #184]	; (800833c <_malloc_r+0xe4>)
 8008282:	f000 fdb1 	bl	8008de8 <__malloc_lock>
 8008286:	6833      	ldr	r3, [r6, #0]
 8008288:	461c      	mov	r4, r3
 800828a:	bb34      	cbnz	r4, 80082da <_malloc_r+0x82>
 800828c:	4629      	mov	r1, r5
 800828e:	4638      	mov	r0, r7
 8008290:	f7ff ffc2 	bl	8008218 <sbrk_aligned>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	4604      	mov	r4, r0
 8008298:	d14d      	bne.n	8008336 <_malloc_r+0xde>
 800829a:	6834      	ldr	r4, [r6, #0]
 800829c:	4626      	mov	r6, r4
 800829e:	2e00      	cmp	r6, #0
 80082a0:	d140      	bne.n	8008324 <_malloc_r+0xcc>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4638      	mov	r0, r7
 80082a8:	eb04 0803 	add.w	r8, r4, r3
 80082ac:	f000 fafc 	bl	80088a8 <_sbrk_r>
 80082b0:	4580      	cmp	r8, r0
 80082b2:	d13a      	bne.n	800832a <_malloc_r+0xd2>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	3503      	adds	r5, #3
 80082b8:	1a6d      	subs	r5, r5, r1
 80082ba:	f025 0503 	bic.w	r5, r5, #3
 80082be:	3508      	adds	r5, #8
 80082c0:	2d0c      	cmp	r5, #12
 80082c2:	bf38      	it	cc
 80082c4:	250c      	movcc	r5, #12
 80082c6:	4638      	mov	r0, r7
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7ff ffa5 	bl	8008218 <sbrk_aligned>
 80082ce:	3001      	adds	r0, #1
 80082d0:	d02b      	beq.n	800832a <_malloc_r+0xd2>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	442b      	add	r3, r5
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	e00e      	b.n	80082f8 <_malloc_r+0xa0>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	1b52      	subs	r2, r2, r5
 80082de:	d41e      	bmi.n	800831e <_malloc_r+0xc6>
 80082e0:	2a0b      	cmp	r2, #11
 80082e2:	d916      	bls.n	8008312 <_malloc_r+0xba>
 80082e4:	1961      	adds	r1, r4, r5
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	6025      	str	r5, [r4, #0]
 80082ea:	bf18      	it	ne
 80082ec:	6059      	strne	r1, [r3, #4]
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	bf08      	it	eq
 80082f2:	6031      	streq	r1, [r6, #0]
 80082f4:	5162      	str	r2, [r4, r5]
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	4638      	mov	r0, r7
 80082fa:	f104 060b 	add.w	r6, r4, #11
 80082fe:	f000 fd79 	bl	8008df4 <__malloc_unlock>
 8008302:	f026 0607 	bic.w	r6, r6, #7
 8008306:	1d23      	adds	r3, r4, #4
 8008308:	1af2      	subs	r2, r6, r3
 800830a:	d0b6      	beq.n	800827a <_malloc_r+0x22>
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	50a3      	str	r3, [r4, r2]
 8008310:	e7b3      	b.n	800827a <_malloc_r+0x22>
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	42a3      	cmp	r3, r4
 8008316:	bf0c      	ite	eq
 8008318:	6032      	streq	r2, [r6, #0]
 800831a:	605a      	strne	r2, [r3, #4]
 800831c:	e7ec      	b.n	80082f8 <_malloc_r+0xa0>
 800831e:	4623      	mov	r3, r4
 8008320:	6864      	ldr	r4, [r4, #4]
 8008322:	e7b2      	b.n	800828a <_malloc_r+0x32>
 8008324:	4634      	mov	r4, r6
 8008326:	6876      	ldr	r6, [r6, #4]
 8008328:	e7b9      	b.n	800829e <_malloc_r+0x46>
 800832a:	230c      	movs	r3, #12
 800832c:	4638      	mov	r0, r7
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	f000 fd60 	bl	8008df4 <__malloc_unlock>
 8008334:	e7a1      	b.n	800827a <_malloc_r+0x22>
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	e7de      	b.n	80082f8 <_malloc_r+0xa0>
 800833a:	bf00      	nop
 800833c:	200004cc 	.word	0x200004cc

08008340 <__ssputs_r>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	688e      	ldr	r6, [r1, #8]
 8008346:	4682      	mov	sl, r0
 8008348:	429e      	cmp	r6, r3
 800834a:	460c      	mov	r4, r1
 800834c:	4690      	mov	r8, r2
 800834e:	461f      	mov	r7, r3
 8008350:	d838      	bhi.n	80083c4 <__ssputs_r+0x84>
 8008352:	898a      	ldrh	r2, [r1, #12]
 8008354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008358:	d032      	beq.n	80083c0 <__ssputs_r+0x80>
 800835a:	6825      	ldr	r5, [r4, #0]
 800835c:	6909      	ldr	r1, [r1, #16]
 800835e:	3301      	adds	r3, #1
 8008360:	eba5 0901 	sub.w	r9, r5, r1
 8008364:	6965      	ldr	r5, [r4, #20]
 8008366:	444b      	add	r3, r9
 8008368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800836c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008370:	106d      	asrs	r5, r5, #1
 8008372:	429d      	cmp	r5, r3
 8008374:	bf38      	it	cc
 8008376:	461d      	movcc	r5, r3
 8008378:	0553      	lsls	r3, r2, #21
 800837a:	d531      	bpl.n	80083e0 <__ssputs_r+0xa0>
 800837c:	4629      	mov	r1, r5
 800837e:	f7ff ff6b 	bl	8008258 <_malloc_r>
 8008382:	4606      	mov	r6, r0
 8008384:	b950      	cbnz	r0, 800839c <__ssputs_r+0x5c>
 8008386:	230c      	movs	r3, #12
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	f8ca 3000 	str.w	r3, [sl]
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	464a      	mov	r2, r9
 800839e:	6921      	ldr	r1, [r4, #16]
 80083a0:	f7ff fb4e 	bl	8007a40 <memcpy>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	6126      	str	r6, [r4, #16]
 80083b2:	444e      	add	r6, r9
 80083b4:	6026      	str	r6, [r4, #0]
 80083b6:	463e      	mov	r6, r7
 80083b8:	6165      	str	r5, [r4, #20]
 80083ba:	eba5 0509 	sub.w	r5, r5, r9
 80083be:	60a5      	str	r5, [r4, #8]
 80083c0:	42be      	cmp	r6, r7
 80083c2:	d900      	bls.n	80083c6 <__ssputs_r+0x86>
 80083c4:	463e      	mov	r6, r7
 80083c6:	4632      	mov	r2, r6
 80083c8:	4641      	mov	r1, r8
 80083ca:	6820      	ldr	r0, [r4, #0]
 80083cc:	f000 fcf2 	bl	8008db4 <memmove>
 80083d0:	68a3      	ldr	r3, [r4, #8]
 80083d2:	2000      	movs	r0, #0
 80083d4:	1b9b      	subs	r3, r3, r6
 80083d6:	60a3      	str	r3, [r4, #8]
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	4433      	add	r3, r6
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	e7db      	b.n	8008398 <__ssputs_r+0x58>
 80083e0:	462a      	mov	r2, r5
 80083e2:	f000 fd0d 	bl	8008e00 <_realloc_r>
 80083e6:	4606      	mov	r6, r0
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d1e1      	bne.n	80083b0 <__ssputs_r+0x70>
 80083ec:	4650      	mov	r0, sl
 80083ee:	6921      	ldr	r1, [r4, #16]
 80083f0:	f7ff feca 	bl	8008188 <_free_r>
 80083f4:	e7c7      	b.n	8008386 <__ssputs_r+0x46>
	...

080083f8 <_svfiprintf_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	4698      	mov	r8, r3
 80083fe:	898b      	ldrh	r3, [r1, #12]
 8008400:	4607      	mov	r7, r0
 8008402:	061b      	lsls	r3, r3, #24
 8008404:	460d      	mov	r5, r1
 8008406:	4614      	mov	r4, r2
 8008408:	b09d      	sub	sp, #116	; 0x74
 800840a:	d50e      	bpl.n	800842a <_svfiprintf_r+0x32>
 800840c:	690b      	ldr	r3, [r1, #16]
 800840e:	b963      	cbnz	r3, 800842a <_svfiprintf_r+0x32>
 8008410:	2140      	movs	r1, #64	; 0x40
 8008412:	f7ff ff21 	bl	8008258 <_malloc_r>
 8008416:	6028      	str	r0, [r5, #0]
 8008418:	6128      	str	r0, [r5, #16]
 800841a:	b920      	cbnz	r0, 8008426 <_svfiprintf_r+0x2e>
 800841c:	230c      	movs	r3, #12
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	e0d1      	b.n	80085ca <_svfiprintf_r+0x1d2>
 8008426:	2340      	movs	r3, #64	; 0x40
 8008428:	616b      	str	r3, [r5, #20]
 800842a:	2300      	movs	r3, #0
 800842c:	9309      	str	r3, [sp, #36]	; 0x24
 800842e:	2320      	movs	r3, #32
 8008430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008434:	2330      	movs	r3, #48	; 0x30
 8008436:	f04f 0901 	mov.w	r9, #1
 800843a:	f8cd 800c 	str.w	r8, [sp, #12]
 800843e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085e4 <_svfiprintf_r+0x1ec>
 8008442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008446:	4623      	mov	r3, r4
 8008448:	469a      	mov	sl, r3
 800844a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844e:	b10a      	cbz	r2, 8008454 <_svfiprintf_r+0x5c>
 8008450:	2a25      	cmp	r2, #37	; 0x25
 8008452:	d1f9      	bne.n	8008448 <_svfiprintf_r+0x50>
 8008454:	ebba 0b04 	subs.w	fp, sl, r4
 8008458:	d00b      	beq.n	8008472 <_svfiprintf_r+0x7a>
 800845a:	465b      	mov	r3, fp
 800845c:	4622      	mov	r2, r4
 800845e:	4629      	mov	r1, r5
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ff6d 	bl	8008340 <__ssputs_r>
 8008466:	3001      	adds	r0, #1
 8008468:	f000 80aa 	beq.w	80085c0 <_svfiprintf_r+0x1c8>
 800846c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846e:	445a      	add	r2, fp
 8008470:	9209      	str	r2, [sp, #36]	; 0x24
 8008472:	f89a 3000 	ldrb.w	r3, [sl]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80a2 	beq.w	80085c0 <_svfiprintf_r+0x1c8>
 800847c:	2300      	movs	r3, #0
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008486:	f10a 0a01 	add.w	sl, sl, #1
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	9307      	str	r3, [sp, #28]
 800848e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008492:	931a      	str	r3, [sp, #104]	; 0x68
 8008494:	4654      	mov	r4, sl
 8008496:	2205      	movs	r2, #5
 8008498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849c:	4851      	ldr	r0, [pc, #324]	; (80085e4 <_svfiprintf_r+0x1ec>)
 800849e:	f7ff fac1 	bl	8007a24 <memchr>
 80084a2:	9a04      	ldr	r2, [sp, #16]
 80084a4:	b9d8      	cbnz	r0, 80084de <_svfiprintf_r+0xe6>
 80084a6:	06d0      	lsls	r0, r2, #27
 80084a8:	bf44      	itt	mi
 80084aa:	2320      	movmi	r3, #32
 80084ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b0:	0711      	lsls	r1, r2, #28
 80084b2:	bf44      	itt	mi
 80084b4:	232b      	movmi	r3, #43	; 0x2b
 80084b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b2a      	cmp	r3, #42	; 0x2a
 80084c0:	d015      	beq.n	80084ee <_svfiprintf_r+0xf6>
 80084c2:	4654      	mov	r4, sl
 80084c4:	2000      	movs	r0, #0
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	9a07      	ldr	r2, [sp, #28]
 80084cc:	4621      	mov	r1, r4
 80084ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d2:	3b30      	subs	r3, #48	; 0x30
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	d94e      	bls.n	8008576 <_svfiprintf_r+0x17e>
 80084d8:	b1b0      	cbz	r0, 8008508 <_svfiprintf_r+0x110>
 80084da:	9207      	str	r2, [sp, #28]
 80084dc:	e014      	b.n	8008508 <_svfiprintf_r+0x110>
 80084de:	eba0 0308 	sub.w	r3, r0, r8
 80084e2:	fa09 f303 	lsl.w	r3, r9, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	46a2      	mov	sl, r4
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	e7d2      	b.n	8008494 <_svfiprintf_r+0x9c>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	1d19      	adds	r1, r3, #4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	9103      	str	r1, [sp, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfbb      	ittet	lt
 80084fa:	425b      	neglt	r3, r3
 80084fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008500:	9307      	strge	r3, [sp, #28]
 8008502:	9307      	strlt	r3, [sp, #28]
 8008504:	bfb8      	it	lt
 8008506:	9204      	strlt	r2, [sp, #16]
 8008508:	7823      	ldrb	r3, [r4, #0]
 800850a:	2b2e      	cmp	r3, #46	; 0x2e
 800850c:	d10c      	bne.n	8008528 <_svfiprintf_r+0x130>
 800850e:	7863      	ldrb	r3, [r4, #1]
 8008510:	2b2a      	cmp	r3, #42	; 0x2a
 8008512:	d135      	bne.n	8008580 <_svfiprintf_r+0x188>
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	3402      	adds	r4, #2
 8008518:	1d1a      	adds	r2, r3, #4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	9203      	str	r2, [sp, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfb8      	it	lt
 8008522:	f04f 33ff 	movlt.w	r3, #4294967295
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80085e8 <_svfiprintf_r+0x1f0>
 800852c:	2203      	movs	r2, #3
 800852e:	4650      	mov	r0, sl
 8008530:	7821      	ldrb	r1, [r4, #0]
 8008532:	f7ff fa77 	bl	8007a24 <memchr>
 8008536:	b140      	cbz	r0, 800854a <_svfiprintf_r+0x152>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	eba0 000a 	sub.w	r0, r0, sl
 800853e:	fa03 f000 	lsl.w	r0, r3, r0
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	3401      	adds	r4, #1
 8008546:	4303      	orrs	r3, r0
 8008548:	9304      	str	r3, [sp, #16]
 800854a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854e:	2206      	movs	r2, #6
 8008550:	4826      	ldr	r0, [pc, #152]	; (80085ec <_svfiprintf_r+0x1f4>)
 8008552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008556:	f7ff fa65 	bl	8007a24 <memchr>
 800855a:	2800      	cmp	r0, #0
 800855c:	d038      	beq.n	80085d0 <_svfiprintf_r+0x1d8>
 800855e:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <_svfiprintf_r+0x1f8>)
 8008560:	bb1b      	cbnz	r3, 80085aa <_svfiprintf_r+0x1b2>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	3307      	adds	r3, #7
 8008566:	f023 0307 	bic.w	r3, r3, #7
 800856a:	3308      	adds	r3, #8
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	4433      	add	r3, r6
 8008572:	9309      	str	r3, [sp, #36]	; 0x24
 8008574:	e767      	b.n	8008446 <_svfiprintf_r+0x4e>
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	fb0c 3202 	mla	r2, ip, r2, r3
 800857e:	e7a5      	b.n	80084cc <_svfiprintf_r+0xd4>
 8008580:	2300      	movs	r3, #0
 8008582:	f04f 0c0a 	mov.w	ip, #10
 8008586:	4619      	mov	r1, r3
 8008588:	3401      	adds	r4, #1
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	4620      	mov	r0, r4
 800858e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008592:	3a30      	subs	r2, #48	; 0x30
 8008594:	2a09      	cmp	r2, #9
 8008596:	d903      	bls.n	80085a0 <_svfiprintf_r+0x1a8>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0c5      	beq.n	8008528 <_svfiprintf_r+0x130>
 800859c:	9105      	str	r1, [sp, #20]
 800859e:	e7c3      	b.n	8008528 <_svfiprintf_r+0x130>
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a8:	e7f0      	b.n	800858c <_svfiprintf_r+0x194>
 80085aa:	ab03      	add	r3, sp, #12
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	462a      	mov	r2, r5
 80085b0:	4638      	mov	r0, r7
 80085b2:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <_svfiprintf_r+0x1fc>)
 80085b4:	a904      	add	r1, sp, #16
 80085b6:	f7fd fe4b 	bl	8006250 <_printf_float>
 80085ba:	1c42      	adds	r2, r0, #1
 80085bc:	4606      	mov	r6, r0
 80085be:	d1d6      	bne.n	800856e <_svfiprintf_r+0x176>
 80085c0:	89ab      	ldrh	r3, [r5, #12]
 80085c2:	065b      	lsls	r3, r3, #25
 80085c4:	f53f af2c 	bmi.w	8008420 <_svfiprintf_r+0x28>
 80085c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ca:	b01d      	add	sp, #116	; 0x74
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	ab03      	add	r3, sp, #12
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	462a      	mov	r2, r5
 80085d6:	4638      	mov	r0, r7
 80085d8:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <_svfiprintf_r+0x1fc>)
 80085da:	a904      	add	r1, sp, #16
 80085dc:	f7fe f8d4 	bl	8006788 <_printf_i>
 80085e0:	e7eb      	b.n	80085ba <_svfiprintf_r+0x1c2>
 80085e2:	bf00      	nop
 80085e4:	0800935c 	.word	0x0800935c
 80085e8:	08009362 	.word	0x08009362
 80085ec:	08009366 	.word	0x08009366
 80085f0:	08006251 	.word	0x08006251
 80085f4:	08008341 	.word	0x08008341

080085f8 <__sfputc_r>:
 80085f8:	6893      	ldr	r3, [r2, #8]
 80085fa:	b410      	push	{r4}
 80085fc:	3b01      	subs	r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	6093      	str	r3, [r2, #8]
 8008602:	da07      	bge.n	8008614 <__sfputc_r+0x1c>
 8008604:	6994      	ldr	r4, [r2, #24]
 8008606:	42a3      	cmp	r3, r4
 8008608:	db01      	blt.n	800860e <__sfputc_r+0x16>
 800860a:	290a      	cmp	r1, #10
 800860c:	d102      	bne.n	8008614 <__sfputc_r+0x1c>
 800860e:	bc10      	pop	{r4}
 8008610:	f000 b99e 	b.w	8008950 <__swbuf_r>
 8008614:	6813      	ldr	r3, [r2, #0]
 8008616:	1c58      	adds	r0, r3, #1
 8008618:	6010      	str	r0, [r2, #0]
 800861a:	7019      	strb	r1, [r3, #0]
 800861c:	4608      	mov	r0, r1
 800861e:	bc10      	pop	{r4}
 8008620:	4770      	bx	lr

08008622 <__sfputs_r>:
 8008622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008624:	4606      	mov	r6, r0
 8008626:	460f      	mov	r7, r1
 8008628:	4614      	mov	r4, r2
 800862a:	18d5      	adds	r5, r2, r3
 800862c:	42ac      	cmp	r4, r5
 800862e:	d101      	bne.n	8008634 <__sfputs_r+0x12>
 8008630:	2000      	movs	r0, #0
 8008632:	e007      	b.n	8008644 <__sfputs_r+0x22>
 8008634:	463a      	mov	r2, r7
 8008636:	4630      	mov	r0, r6
 8008638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863c:	f7ff ffdc 	bl	80085f8 <__sfputc_r>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d1f3      	bne.n	800862c <__sfputs_r+0xa>
 8008644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008648 <_vfiprintf_r>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	460d      	mov	r5, r1
 800864e:	4614      	mov	r4, r2
 8008650:	4698      	mov	r8, r3
 8008652:	4606      	mov	r6, r0
 8008654:	b09d      	sub	sp, #116	; 0x74
 8008656:	b118      	cbz	r0, 8008660 <_vfiprintf_r+0x18>
 8008658:	6983      	ldr	r3, [r0, #24]
 800865a:	b90b      	cbnz	r3, 8008660 <_vfiprintf_r+0x18>
 800865c:	f7ff f922 	bl	80078a4 <__sinit>
 8008660:	4b89      	ldr	r3, [pc, #548]	; (8008888 <_vfiprintf_r+0x240>)
 8008662:	429d      	cmp	r5, r3
 8008664:	d11b      	bne.n	800869e <_vfiprintf_r+0x56>
 8008666:	6875      	ldr	r5, [r6, #4]
 8008668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800866a:	07d9      	lsls	r1, r3, #31
 800866c:	d405      	bmi.n	800867a <_vfiprintf_r+0x32>
 800866e:	89ab      	ldrh	r3, [r5, #12]
 8008670:	059a      	lsls	r2, r3, #22
 8008672:	d402      	bmi.n	800867a <_vfiprintf_r+0x32>
 8008674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008676:	f7ff f9ca 	bl	8007a0e <__retarget_lock_acquire_recursive>
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	071b      	lsls	r3, r3, #28
 800867e:	d501      	bpl.n	8008684 <_vfiprintf_r+0x3c>
 8008680:	692b      	ldr	r3, [r5, #16]
 8008682:	b9eb      	cbnz	r3, 80086c0 <_vfiprintf_r+0x78>
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f000 f9c6 	bl	8008a18 <__swsetup_r>
 800868c:	b1c0      	cbz	r0, 80086c0 <_vfiprintf_r+0x78>
 800868e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008690:	07dc      	lsls	r4, r3, #31
 8008692:	d50e      	bpl.n	80086b2 <_vfiprintf_r+0x6a>
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	b01d      	add	sp, #116	; 0x74
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	4b7b      	ldr	r3, [pc, #492]	; (800888c <_vfiprintf_r+0x244>)
 80086a0:	429d      	cmp	r5, r3
 80086a2:	d101      	bne.n	80086a8 <_vfiprintf_r+0x60>
 80086a4:	68b5      	ldr	r5, [r6, #8]
 80086a6:	e7df      	b.n	8008668 <_vfiprintf_r+0x20>
 80086a8:	4b79      	ldr	r3, [pc, #484]	; (8008890 <_vfiprintf_r+0x248>)
 80086aa:	429d      	cmp	r5, r3
 80086ac:	bf08      	it	eq
 80086ae:	68f5      	ldreq	r5, [r6, #12]
 80086b0:	e7da      	b.n	8008668 <_vfiprintf_r+0x20>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	0598      	lsls	r0, r3, #22
 80086b6:	d4ed      	bmi.n	8008694 <_vfiprintf_r+0x4c>
 80086b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ba:	f7ff f9a9 	bl	8007a10 <__retarget_lock_release_recursive>
 80086be:	e7e9      	b.n	8008694 <_vfiprintf_r+0x4c>
 80086c0:	2300      	movs	r3, #0
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	2320      	movs	r3, #32
 80086c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ca:	2330      	movs	r3, #48	; 0x30
 80086cc:	f04f 0901 	mov.w	r9, #1
 80086d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008894 <_vfiprintf_r+0x24c>
 80086d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086dc:	4623      	mov	r3, r4
 80086de:	469a      	mov	sl, r3
 80086e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e4:	b10a      	cbz	r2, 80086ea <_vfiprintf_r+0xa2>
 80086e6:	2a25      	cmp	r2, #37	; 0x25
 80086e8:	d1f9      	bne.n	80086de <_vfiprintf_r+0x96>
 80086ea:	ebba 0b04 	subs.w	fp, sl, r4
 80086ee:	d00b      	beq.n	8008708 <_vfiprintf_r+0xc0>
 80086f0:	465b      	mov	r3, fp
 80086f2:	4622      	mov	r2, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ff93 	bl	8008622 <__sfputs_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	f000 80aa 	beq.w	8008856 <_vfiprintf_r+0x20e>
 8008702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008704:	445a      	add	r2, fp
 8008706:	9209      	str	r2, [sp, #36]	; 0x24
 8008708:	f89a 3000 	ldrb.w	r3, [sl]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80a2 	beq.w	8008856 <_vfiprintf_r+0x20e>
 8008712:	2300      	movs	r3, #0
 8008714:	f04f 32ff 	mov.w	r2, #4294967295
 8008718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871c:	f10a 0a01 	add.w	sl, sl, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	9307      	str	r3, [sp, #28]
 8008724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008728:	931a      	str	r3, [sp, #104]	; 0x68
 800872a:	4654      	mov	r4, sl
 800872c:	2205      	movs	r2, #5
 800872e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008732:	4858      	ldr	r0, [pc, #352]	; (8008894 <_vfiprintf_r+0x24c>)
 8008734:	f7ff f976 	bl	8007a24 <memchr>
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	b9d8      	cbnz	r0, 8008774 <_vfiprintf_r+0x12c>
 800873c:	06d1      	lsls	r1, r2, #27
 800873e:	bf44      	itt	mi
 8008740:	2320      	movmi	r3, #32
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	0713      	lsls	r3, r2, #28
 8008748:	bf44      	itt	mi
 800874a:	232b      	movmi	r3, #43	; 0x2b
 800874c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008750:	f89a 3000 	ldrb.w	r3, [sl]
 8008754:	2b2a      	cmp	r3, #42	; 0x2a
 8008756:	d015      	beq.n	8008784 <_vfiprintf_r+0x13c>
 8008758:	4654      	mov	r4, sl
 800875a:	2000      	movs	r0, #0
 800875c:	f04f 0c0a 	mov.w	ip, #10
 8008760:	9a07      	ldr	r2, [sp, #28]
 8008762:	4621      	mov	r1, r4
 8008764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008768:	3b30      	subs	r3, #48	; 0x30
 800876a:	2b09      	cmp	r3, #9
 800876c:	d94e      	bls.n	800880c <_vfiprintf_r+0x1c4>
 800876e:	b1b0      	cbz	r0, 800879e <_vfiprintf_r+0x156>
 8008770:	9207      	str	r2, [sp, #28]
 8008772:	e014      	b.n	800879e <_vfiprintf_r+0x156>
 8008774:	eba0 0308 	sub.w	r3, r0, r8
 8008778:	fa09 f303 	lsl.w	r3, r9, r3
 800877c:	4313      	orrs	r3, r2
 800877e:	46a2      	mov	sl, r4
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	e7d2      	b.n	800872a <_vfiprintf_r+0xe2>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	1d19      	adds	r1, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	9103      	str	r1, [sp, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	bfbb      	ittet	lt
 8008790:	425b      	neglt	r3, r3
 8008792:	f042 0202 	orrlt.w	r2, r2, #2
 8008796:	9307      	strge	r3, [sp, #28]
 8008798:	9307      	strlt	r3, [sp, #28]
 800879a:	bfb8      	it	lt
 800879c:	9204      	strlt	r2, [sp, #16]
 800879e:	7823      	ldrb	r3, [r4, #0]
 80087a0:	2b2e      	cmp	r3, #46	; 0x2e
 80087a2:	d10c      	bne.n	80087be <_vfiprintf_r+0x176>
 80087a4:	7863      	ldrb	r3, [r4, #1]
 80087a6:	2b2a      	cmp	r3, #42	; 0x2a
 80087a8:	d135      	bne.n	8008816 <_vfiprintf_r+0x1ce>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	3402      	adds	r4, #2
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	9203      	str	r2, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfb8      	it	lt
 80087b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087bc:	9305      	str	r3, [sp, #20]
 80087be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008898 <_vfiprintf_r+0x250>
 80087c2:	2203      	movs	r2, #3
 80087c4:	4650      	mov	r0, sl
 80087c6:	7821      	ldrb	r1, [r4, #0]
 80087c8:	f7ff f92c 	bl	8007a24 <memchr>
 80087cc:	b140      	cbz	r0, 80087e0 <_vfiprintf_r+0x198>
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	eba0 000a 	sub.w	r0, r0, sl
 80087d4:	fa03 f000 	lsl.w	r0, r3, r0
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	3401      	adds	r4, #1
 80087dc:	4303      	orrs	r3, r0
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	2206      	movs	r2, #6
 80087e6:	482d      	ldr	r0, [pc, #180]	; (800889c <_vfiprintf_r+0x254>)
 80087e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ec:	f7ff f91a 	bl	8007a24 <memchr>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d03f      	beq.n	8008874 <_vfiprintf_r+0x22c>
 80087f4:	4b2a      	ldr	r3, [pc, #168]	; (80088a0 <_vfiprintf_r+0x258>)
 80087f6:	bb1b      	cbnz	r3, 8008840 <_vfiprintf_r+0x1f8>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	3307      	adds	r3, #7
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	3308      	adds	r3, #8
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	443b      	add	r3, r7
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	e767      	b.n	80086dc <_vfiprintf_r+0x94>
 800880c:	460c      	mov	r4, r1
 800880e:	2001      	movs	r0, #1
 8008810:	fb0c 3202 	mla	r2, ip, r2, r3
 8008814:	e7a5      	b.n	8008762 <_vfiprintf_r+0x11a>
 8008816:	2300      	movs	r3, #0
 8008818:	f04f 0c0a 	mov.w	ip, #10
 800881c:	4619      	mov	r1, r3
 800881e:	3401      	adds	r4, #1
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	4620      	mov	r0, r4
 8008824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008828:	3a30      	subs	r2, #48	; 0x30
 800882a:	2a09      	cmp	r2, #9
 800882c:	d903      	bls.n	8008836 <_vfiprintf_r+0x1ee>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c5      	beq.n	80087be <_vfiprintf_r+0x176>
 8008832:	9105      	str	r1, [sp, #20]
 8008834:	e7c3      	b.n	80087be <_vfiprintf_r+0x176>
 8008836:	4604      	mov	r4, r0
 8008838:	2301      	movs	r3, #1
 800883a:	fb0c 2101 	mla	r1, ip, r1, r2
 800883e:	e7f0      	b.n	8008822 <_vfiprintf_r+0x1da>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4630      	mov	r0, r6
 8008848:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <_vfiprintf_r+0x25c>)
 800884a:	a904      	add	r1, sp, #16
 800884c:	f7fd fd00 	bl	8006250 <_printf_float>
 8008850:	4607      	mov	r7, r0
 8008852:	1c78      	adds	r0, r7, #1
 8008854:	d1d6      	bne.n	8008804 <_vfiprintf_r+0x1bc>
 8008856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008858:	07d9      	lsls	r1, r3, #31
 800885a:	d405      	bmi.n	8008868 <_vfiprintf_r+0x220>
 800885c:	89ab      	ldrh	r3, [r5, #12]
 800885e:	059a      	lsls	r2, r3, #22
 8008860:	d402      	bmi.n	8008868 <_vfiprintf_r+0x220>
 8008862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008864:	f7ff f8d4 	bl	8007a10 <__retarget_lock_release_recursive>
 8008868:	89ab      	ldrh	r3, [r5, #12]
 800886a:	065b      	lsls	r3, r3, #25
 800886c:	f53f af12 	bmi.w	8008694 <_vfiprintf_r+0x4c>
 8008870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008872:	e711      	b.n	8008698 <_vfiprintf_r+0x50>
 8008874:	ab03      	add	r3, sp, #12
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	462a      	mov	r2, r5
 800887a:	4630      	mov	r0, r6
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <_vfiprintf_r+0x25c>)
 800887e:	a904      	add	r1, sp, #16
 8008880:	f7fd ff82 	bl	8006788 <_printf_i>
 8008884:	e7e4      	b.n	8008850 <_vfiprintf_r+0x208>
 8008886:	bf00      	nop
 8008888:	080091c0 	.word	0x080091c0
 800888c:	080091e0 	.word	0x080091e0
 8008890:	080091a0 	.word	0x080091a0
 8008894:	0800935c 	.word	0x0800935c
 8008898:	08009362 	.word	0x08009362
 800889c:	08009366 	.word	0x08009366
 80088a0:	08006251 	.word	0x08006251
 80088a4:	08008623 	.word	0x08008623

080088a8 <_sbrk_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	2300      	movs	r3, #0
 80088ac:	4d05      	ldr	r5, [pc, #20]	; (80088c4 <_sbrk_r+0x1c>)
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f9 fb56 	bl	8001f64 <_sbrk>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_sbrk_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_sbrk_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	200004d4 	.word	0x200004d4

080088c8 <__sread>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 fac6 	bl	8008e60 <_read_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	bfab      	itete	ge
 80088d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088da:	89a3      	ldrhlt	r3, [r4, #12]
 80088dc:	181b      	addge	r3, r3, r0
 80088de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088e2:	bfac      	ite	ge
 80088e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088e6:	81a3      	strhlt	r3, [r4, #12]
 80088e8:	bd10      	pop	{r4, pc}

080088ea <__swrite>:
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	461f      	mov	r7, r3
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	4605      	mov	r5, r0
 80088f4:	05db      	lsls	r3, r3, #23
 80088f6:	460c      	mov	r4, r1
 80088f8:	4616      	mov	r6, r2
 80088fa:	d505      	bpl.n	8008908 <__swrite+0x1e>
 80088fc:	2302      	movs	r3, #2
 80088fe:	2200      	movs	r2, #0
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	f000 f9cc 	bl	8008ca0 <_lseek_r>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	4632      	mov	r2, r6
 800890c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	4628      	mov	r0, r5
 8008914:	463b      	mov	r3, r7
 8008916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f000 b869 	b.w	80089f4 <_write_r>

08008922 <__sseek>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 f9b9 	bl	8008ca0 <_lseek_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	bf15      	itete	ne
 8008934:	6560      	strne	r0, [r4, #84]	; 0x54
 8008936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800893a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800893e:	81a3      	strheq	r3, [r4, #12]
 8008940:	bf18      	it	ne
 8008942:	81a3      	strhne	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__sclose>:
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 b8db 	b.w	8008b04 <_close_r>
	...

08008950 <__swbuf_r>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	460e      	mov	r6, r1
 8008954:	4614      	mov	r4, r2
 8008956:	4605      	mov	r5, r0
 8008958:	b118      	cbz	r0, 8008962 <__swbuf_r+0x12>
 800895a:	6983      	ldr	r3, [r0, #24]
 800895c:	b90b      	cbnz	r3, 8008962 <__swbuf_r+0x12>
 800895e:	f7fe ffa1 	bl	80078a4 <__sinit>
 8008962:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <__swbuf_r+0x98>)
 8008964:	429c      	cmp	r4, r3
 8008966:	d12b      	bne.n	80089c0 <__swbuf_r+0x70>
 8008968:	686c      	ldr	r4, [r5, #4]
 800896a:	69a3      	ldr	r3, [r4, #24]
 800896c:	60a3      	str	r3, [r4, #8]
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	071a      	lsls	r2, r3, #28
 8008972:	d52f      	bpl.n	80089d4 <__swbuf_r+0x84>
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	b36b      	cbz	r3, 80089d4 <__swbuf_r+0x84>
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	b2f6      	uxtb	r6, r6
 800897e:	1ac0      	subs	r0, r0, r3
 8008980:	6963      	ldr	r3, [r4, #20]
 8008982:	4637      	mov	r7, r6
 8008984:	4283      	cmp	r3, r0
 8008986:	dc04      	bgt.n	8008992 <__swbuf_r+0x42>
 8008988:	4621      	mov	r1, r4
 800898a:	4628      	mov	r0, r5
 800898c:	f000 f94c 	bl	8008c28 <_fflush_r>
 8008990:	bb30      	cbnz	r0, 80089e0 <__swbuf_r+0x90>
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	3001      	adds	r0, #1
 8008996:	3b01      	subs	r3, #1
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	701e      	strb	r6, [r3, #0]
 80089a2:	6963      	ldr	r3, [r4, #20]
 80089a4:	4283      	cmp	r3, r0
 80089a6:	d004      	beq.n	80089b2 <__swbuf_r+0x62>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	07db      	lsls	r3, r3, #31
 80089ac:	d506      	bpl.n	80089bc <__swbuf_r+0x6c>
 80089ae:	2e0a      	cmp	r6, #10
 80089b0:	d104      	bne.n	80089bc <__swbuf_r+0x6c>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 f937 	bl	8008c28 <_fflush_r>
 80089ba:	b988      	cbnz	r0, 80089e0 <__swbuf_r+0x90>
 80089bc:	4638      	mov	r0, r7
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <__swbuf_r+0x9c>)
 80089c2:	429c      	cmp	r4, r3
 80089c4:	d101      	bne.n	80089ca <__swbuf_r+0x7a>
 80089c6:	68ac      	ldr	r4, [r5, #8]
 80089c8:	e7cf      	b.n	800896a <__swbuf_r+0x1a>
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <__swbuf_r+0xa0>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	bf08      	it	eq
 80089d0:	68ec      	ldreq	r4, [r5, #12]
 80089d2:	e7ca      	b.n	800896a <__swbuf_r+0x1a>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f81e 	bl	8008a18 <__swsetup_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d0cb      	beq.n	8008978 <__swbuf_r+0x28>
 80089e0:	f04f 37ff 	mov.w	r7, #4294967295
 80089e4:	e7ea      	b.n	80089bc <__swbuf_r+0x6c>
 80089e6:	bf00      	nop
 80089e8:	080091c0 	.word	0x080091c0
 80089ec:	080091e0 	.word	0x080091e0
 80089f0:	080091a0 	.word	0x080091a0

080089f4 <_write_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	2200      	movs	r2, #0
 80089fe:	4d05      	ldr	r5, [pc, #20]	; (8008a14 <_write_r+0x20>)
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f7f9 fa62 	bl	8001ecc <_write>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_write_r+0x1e>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_write_r+0x1e>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	200004d4 	.word	0x200004d4

08008a18 <__swsetup_r>:
 8008a18:	4b32      	ldr	r3, [pc, #200]	; (8008ae4 <__swsetup_r+0xcc>)
 8008a1a:	b570      	push	{r4, r5, r6, lr}
 8008a1c:	681d      	ldr	r5, [r3, #0]
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	b125      	cbz	r5, 8008a2e <__swsetup_r+0x16>
 8008a24:	69ab      	ldr	r3, [r5, #24]
 8008a26:	b913      	cbnz	r3, 8008a2e <__swsetup_r+0x16>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f7fe ff3b 	bl	80078a4 <__sinit>
 8008a2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <__swsetup_r+0xd0>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	d10f      	bne.n	8008a54 <__swsetup_r+0x3c>
 8008a34:	686c      	ldr	r4, [r5, #4]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a3c:	0719      	lsls	r1, r3, #28
 8008a3e:	d42c      	bmi.n	8008a9a <__swsetup_r+0x82>
 8008a40:	06dd      	lsls	r5, r3, #27
 8008a42:	d411      	bmi.n	8008a68 <__swsetup_r+0x50>
 8008a44:	2309      	movs	r3, #9
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	e03e      	b.n	8008ad2 <__swsetup_r+0xba>
 8008a54:	4b25      	ldr	r3, [pc, #148]	; (8008aec <__swsetup_r+0xd4>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d101      	bne.n	8008a5e <__swsetup_r+0x46>
 8008a5a:	68ac      	ldr	r4, [r5, #8]
 8008a5c:	e7eb      	b.n	8008a36 <__swsetup_r+0x1e>
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <__swsetup_r+0xd8>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	bf08      	it	eq
 8008a64:	68ec      	ldreq	r4, [r5, #12]
 8008a66:	e7e6      	b.n	8008a36 <__swsetup_r+0x1e>
 8008a68:	0758      	lsls	r0, r3, #29
 8008a6a:	d512      	bpl.n	8008a92 <__swsetup_r+0x7a>
 8008a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a6e:	b141      	cbz	r1, 8008a82 <__swsetup_r+0x6a>
 8008a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a74:	4299      	cmp	r1, r3
 8008a76:	d002      	beq.n	8008a7e <__swsetup_r+0x66>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff fb85 	bl	8008188 <_free_r>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6363      	str	r3, [r4, #52]	; 0x34
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f043 0308 	orr.w	r3, r3, #8
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	b94b      	cbnz	r3, 8008ab2 <__swsetup_r+0x9a>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa8:	d003      	beq.n	8008ab2 <__swsetup_r+0x9a>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4630      	mov	r0, r6
 8008aae:	f000 f92f 	bl	8008d10 <__smakebuf_r>
 8008ab2:	89a0      	ldrh	r0, [r4, #12]
 8008ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab8:	f010 0301 	ands.w	r3, r0, #1
 8008abc:	d00a      	beq.n	8008ad4 <__swsetup_r+0xbc>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6963      	ldr	r3, [r4, #20]
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	61a3      	str	r3, [r4, #24]
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b943      	cbnz	r3, 8008ade <__swsetup_r+0xc6>
 8008acc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ad0:	d1ba      	bne.n	8008a48 <__swsetup_r+0x30>
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	0781      	lsls	r1, r0, #30
 8008ad6:	bf58      	it	pl
 8008ad8:	6963      	ldrpl	r3, [r4, #20]
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	e7f4      	b.n	8008ac8 <__swsetup_r+0xb0>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e7f7      	b.n	8008ad2 <__swsetup_r+0xba>
 8008ae2:	bf00      	nop
 8008ae4:	20000010 	.word	0x20000010
 8008ae8:	080091c0 	.word	0x080091c0
 8008aec:	080091e0 	.word	0x080091e0
 8008af0:	080091a0 	.word	0x080091a0

08008af4 <abort>:
 8008af4:	2006      	movs	r0, #6
 8008af6:	b508      	push	{r3, lr}
 8008af8:	f000 f9ec 	bl	8008ed4 <raise>
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7f9 f9be 	bl	8001e7e <_exit>
	...

08008b04 <_close_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	2300      	movs	r3, #0
 8008b08:	4d05      	ldr	r5, [pc, #20]	; (8008b20 <_close_r+0x1c>)
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7f9 f9f8 	bl	8001f04 <_close>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_close_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_close_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	200004d4 	.word	0x200004d4

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b28:	4605      	mov	r5, r0
 8008b2a:	0710      	lsls	r0, r2, #28
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	d457      	bmi.n	8008be0 <__sflush_r+0xbc>
 8008b30:	684b      	ldr	r3, [r1, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc04      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dc01      	bgt.n	8008b40 <__sflush_r+0x1c>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d0fa      	beq.n	8008b3c <__sflush_r+0x18>
 8008b46:	2300      	movs	r3, #0
 8008b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b4c:	682f      	ldr	r7, [r5, #0]
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	d032      	beq.n	8008bb8 <__sflush_r+0x94>
 8008b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	075a      	lsls	r2, r3, #29
 8008b58:	d505      	bpl.n	8008b66 <__sflush_r+0x42>
 8008b5a:	6863      	ldr	r3, [r4, #4]
 8008b5c:	1ac0      	subs	r0, r0, r3
 8008b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b60:	b10b      	cbz	r3, 8008b66 <__sflush_r+0x42>
 8008b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b64:	1ac0      	subs	r0, r0, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	6a21      	ldr	r1, [r4, #32]
 8008b70:	47b0      	blx	r6
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	d106      	bne.n	8008b86 <__sflush_r+0x62>
 8008b78:	6829      	ldr	r1, [r5, #0]
 8008b7a:	291d      	cmp	r1, #29
 8008b7c:	d82c      	bhi.n	8008bd8 <__sflush_r+0xb4>
 8008b7e:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <__sflush_r+0x100>)
 8008b80:	40ca      	lsrs	r2, r1
 8008b82:	07d6      	lsls	r6, r2, #31
 8008b84:	d528      	bpl.n	8008bd8 <__sflush_r+0xb4>
 8008b86:	2200      	movs	r2, #0
 8008b88:	6062      	str	r2, [r4, #4]
 8008b8a:	6922      	ldr	r2, [r4, #16]
 8008b8c:	04d9      	lsls	r1, r3, #19
 8008b8e:	6022      	str	r2, [r4, #0]
 8008b90:	d504      	bpl.n	8008b9c <__sflush_r+0x78>
 8008b92:	1c42      	adds	r2, r0, #1
 8008b94:	d101      	bne.n	8008b9a <__sflush_r+0x76>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b903      	cbnz	r3, 8008b9c <__sflush_r+0x78>
 8008b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9e:	602f      	str	r7, [r5, #0]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	d0cb      	beq.n	8008b3c <__sflush_r+0x18>
 8008ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d002      	beq.n	8008bb2 <__sflush_r+0x8e>
 8008bac:	4628      	mov	r0, r5
 8008bae:	f7ff faeb 	bl	8008188 <_free_r>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bb6:	e7c2      	b.n	8008b3e <__sflush_r+0x1a>
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b0      	blx	r6
 8008bc0:	1c41      	adds	r1, r0, #1
 8008bc2:	d1c7      	bne.n	8008b54 <__sflush_r+0x30>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0c4      	beq.n	8008b54 <__sflush_r+0x30>
 8008bca:	2b1d      	cmp	r3, #29
 8008bcc:	d001      	beq.n	8008bd2 <__sflush_r+0xae>
 8008bce:	2b16      	cmp	r3, #22
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	602f      	str	r7, [r5, #0]
 8008bd4:	e7b2      	b.n	8008b3c <__sflush_r+0x18>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	e7ae      	b.n	8008b3e <__sflush_r+0x1a>
 8008be0:	690f      	ldr	r7, [r1, #16]
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	d0aa      	beq.n	8008b3c <__sflush_r+0x18>
 8008be6:	0793      	lsls	r3, r2, #30
 8008be8:	bf18      	it	ne
 8008bea:	2300      	movne	r3, #0
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	1bf6      	subs	r6, r6, r7
 8008bf4:	600f      	str	r7, [r1, #0]
 8008bf6:	608b      	str	r3, [r1, #8]
 8008bf8:	2e00      	cmp	r6, #0
 8008bfa:	dd9f      	ble.n	8008b3c <__sflush_r+0x18>
 8008bfc:	4633      	mov	r3, r6
 8008bfe:	463a      	mov	r2, r7
 8008c00:	4628      	mov	r0, r5
 8008c02:	6a21      	ldr	r1, [r4, #32]
 8008c04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c08:	47e0      	blx	ip
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	dc06      	bgt.n	8008c1c <__sflush_r+0xf8>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e790      	b.n	8008b3e <__sflush_r+0x1a>
 8008c1c:	4407      	add	r7, r0
 8008c1e:	1a36      	subs	r6, r6, r0
 8008c20:	e7ea      	b.n	8008bf8 <__sflush_r+0xd4>
 8008c22:	bf00      	nop
 8008c24:	20400001 	.word	0x20400001

08008c28 <_fflush_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	690b      	ldr	r3, [r1, #16]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	b913      	cbnz	r3, 8008c38 <_fflush_r+0x10>
 8008c32:	2500      	movs	r5, #0
 8008c34:	4628      	mov	r0, r5
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	b118      	cbz	r0, 8008c42 <_fflush_r+0x1a>
 8008c3a:	6983      	ldr	r3, [r0, #24]
 8008c3c:	b90b      	cbnz	r3, 8008c42 <_fflush_r+0x1a>
 8008c3e:	f7fe fe31 	bl	80078a4 <__sinit>
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <_fflush_r+0x6c>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	d11b      	bne.n	8008c80 <_fflush_r+0x58>
 8008c48:	686c      	ldr	r4, [r5, #4]
 8008c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ef      	beq.n	8008c32 <_fflush_r+0xa>
 8008c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c54:	07d0      	lsls	r0, r2, #31
 8008c56:	d404      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c58:	0599      	lsls	r1, r3, #22
 8008c5a:	d402      	bmi.n	8008c62 <_fflush_r+0x3a>
 8008c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5e:	f7fe fed6 	bl	8007a0e <__retarget_lock_acquire_recursive>
 8008c62:	4628      	mov	r0, r5
 8008c64:	4621      	mov	r1, r4
 8008c66:	f7ff ff5d 	bl	8008b24 <__sflush_r>
 8008c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d4e0      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	059b      	lsls	r3, r3, #22
 8008c76:	d4dd      	bmi.n	8008c34 <_fflush_r+0xc>
 8008c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7a:	f7fe fec9 	bl	8007a10 <__retarget_lock_release_recursive>
 8008c7e:	e7d9      	b.n	8008c34 <_fflush_r+0xc>
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_fflush_r+0x70>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_fflush_r+0x62>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7df      	b.n	8008c4a <_fflush_r+0x22>
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_fflush_r+0x74>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7da      	b.n	8008c4a <_fflush_r+0x22>
 8008c94:	080091c0 	.word	0x080091c0
 8008c98:	080091e0 	.word	0x080091e0
 8008c9c:	080091a0 	.word	0x080091a0

08008ca0 <_lseek_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4d05      	ldr	r5, [pc, #20]	; (8008cc0 <_lseek_r+0x20>)
 8008cac:	602a      	str	r2, [r5, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f7f9 f94c 	bl	8001f4c <_lseek>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_lseek_r+0x1e>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_lseek_r+0x1e>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	200004d4 	.word	0x200004d4

08008cc4 <__swhatbuf_r>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	460e      	mov	r6, r1
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	4614      	mov	r4, r2
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	461d      	mov	r5, r3
 8008cd2:	b096      	sub	sp, #88	; 0x58
 8008cd4:	da08      	bge.n	8008ce8 <__swhatbuf_r+0x24>
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	061a      	lsls	r2, r3, #24
 8008ce0:	d410      	bmi.n	8008d04 <__swhatbuf_r+0x40>
 8008ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce6:	e00e      	b.n	8008d06 <__swhatbuf_r+0x42>
 8008ce8:	466a      	mov	r2, sp
 8008cea:	f000 f91d 	bl	8008f28 <_fstat_r>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	dbf1      	blt.n	8008cd6 <__swhatbuf_r+0x12>
 8008cf2:	9a01      	ldr	r2, [sp, #4]
 8008cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cfc:	425a      	negs	r2, r3
 8008cfe:	415a      	adcs	r2, r3
 8008d00:	602a      	str	r2, [r5, #0]
 8008d02:	e7ee      	b.n	8008ce2 <__swhatbuf_r+0x1e>
 8008d04:	2340      	movs	r3, #64	; 0x40
 8008d06:	2000      	movs	r0, #0
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	b016      	add	sp, #88	; 0x58
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d10 <__smakebuf_r>:
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d14:	079d      	lsls	r5, r3, #30
 8008d16:	4606      	mov	r6, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	d507      	bpl.n	8008d2c <__smakebuf_r+0x1c>
 8008d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	2301      	movs	r3, #1
 8008d26:	6163      	str	r3, [r4, #20]
 8008d28:	b002      	add	sp, #8
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	466a      	mov	r2, sp
 8008d2e:	ab01      	add	r3, sp, #4
 8008d30:	f7ff ffc8 	bl	8008cc4 <__swhatbuf_r>
 8008d34:	9900      	ldr	r1, [sp, #0]
 8008d36:	4605      	mov	r5, r0
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff fa8d 	bl	8008258 <_malloc_r>
 8008d3e:	b948      	cbnz	r0, 8008d54 <__smakebuf_r+0x44>
 8008d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d44:	059a      	lsls	r2, r3, #22
 8008d46:	d4ef      	bmi.n	8008d28 <__smakebuf_r+0x18>
 8008d48:	f023 0303 	bic.w	r3, r3, #3
 8008d4c:	f043 0302 	orr.w	r3, r3, #2
 8008d50:	81a3      	strh	r3, [r4, #12]
 8008d52:	e7e3      	b.n	8008d1c <__smakebuf_r+0xc>
 8008d54:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <__smakebuf_r+0x7c>)
 8008d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d60:	81a3      	strh	r3, [r4, #12]
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	6120      	str	r0, [r4, #16]
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	9b01      	ldr	r3, [sp, #4]
 8008d6a:	b15b      	cbz	r3, 8008d84 <__smakebuf_r+0x74>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d72:	f000 f8eb 	bl	8008f4c <_isatty_r>
 8008d76:	b128      	cbz	r0, 8008d84 <__smakebuf_r+0x74>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f023 0303 	bic.w	r3, r3, #3
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	81a3      	strh	r3, [r4, #12]
 8008d84:	89a0      	ldrh	r0, [r4, #12]
 8008d86:	4305      	orrs	r5, r0
 8008d88:	81a5      	strh	r5, [r4, #12]
 8008d8a:	e7cd      	b.n	8008d28 <__smakebuf_r+0x18>
 8008d8c:	0800783d 	.word	0x0800783d

08008d90 <__ascii_mbtowc>:
 8008d90:	b082      	sub	sp, #8
 8008d92:	b901      	cbnz	r1, 8008d96 <__ascii_mbtowc+0x6>
 8008d94:	a901      	add	r1, sp, #4
 8008d96:	b142      	cbz	r2, 8008daa <__ascii_mbtowc+0x1a>
 8008d98:	b14b      	cbz	r3, 8008dae <__ascii_mbtowc+0x1e>
 8008d9a:	7813      	ldrb	r3, [r2, #0]
 8008d9c:	600b      	str	r3, [r1, #0]
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	1e10      	subs	r0, r2, #0
 8008da2:	bf18      	it	ne
 8008da4:	2001      	movne	r0, #1
 8008da6:	b002      	add	sp, #8
 8008da8:	4770      	bx	lr
 8008daa:	4610      	mov	r0, r2
 8008dac:	e7fb      	b.n	8008da6 <__ascii_mbtowc+0x16>
 8008dae:	f06f 0001 	mvn.w	r0, #1
 8008db2:	e7f8      	b.n	8008da6 <__ascii_mbtowc+0x16>

08008db4 <memmove>:
 8008db4:	4288      	cmp	r0, r1
 8008db6:	b510      	push	{r4, lr}
 8008db8:	eb01 0402 	add.w	r4, r1, r2
 8008dbc:	d902      	bls.n	8008dc4 <memmove+0x10>
 8008dbe:	4284      	cmp	r4, r0
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	d807      	bhi.n	8008dd4 <memmove+0x20>
 8008dc4:	1e43      	subs	r3, r0, #1
 8008dc6:	42a1      	cmp	r1, r4
 8008dc8:	d008      	beq.n	8008ddc <memmove+0x28>
 8008dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dd2:	e7f8      	b.n	8008dc6 <memmove+0x12>
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	4402      	add	r2, r0
 8008dd8:	428a      	cmp	r2, r1
 8008dda:	d100      	bne.n	8008dde <memmove+0x2a>
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008de6:	e7f7      	b.n	8008dd8 <memmove+0x24>

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__malloc_lock+0x8>)
 8008dea:	f7fe be10 	b.w	8007a0e <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	200004c8 	.word	0x200004c8

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f7fe be0b 	b.w	8007a10 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	200004c8 	.word	0x200004c8

08008e00 <_realloc_r>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	4680      	mov	r8, r0
 8008e06:	4614      	mov	r4, r2
 8008e08:	460e      	mov	r6, r1
 8008e0a:	b921      	cbnz	r1, 8008e16 <_realloc_r+0x16>
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e12:	f7ff ba21 	b.w	8008258 <_malloc_r>
 8008e16:	b92a      	cbnz	r2, 8008e24 <_realloc_r+0x24>
 8008e18:	f7ff f9b6 	bl	8008188 <_free_r>
 8008e1c:	4625      	mov	r5, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	f000 f8a2 	bl	8008f6c <_malloc_usable_size_r>
 8008e28:	4284      	cmp	r4, r0
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	d802      	bhi.n	8008e34 <_realloc_r+0x34>
 8008e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e32:	d812      	bhi.n	8008e5a <_realloc_r+0x5a>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff fa0e 	bl	8008258 <_malloc_r>
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0ed      	beq.n	8008e1e <_realloc_r+0x1e>
 8008e42:	42bc      	cmp	r4, r7
 8008e44:	4622      	mov	r2, r4
 8008e46:	4631      	mov	r1, r6
 8008e48:	bf28      	it	cs
 8008e4a:	463a      	movcs	r2, r7
 8008e4c:	f7fe fdf8 	bl	8007a40 <memcpy>
 8008e50:	4631      	mov	r1, r6
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7ff f998 	bl	8008188 <_free_r>
 8008e58:	e7e1      	b.n	8008e1e <_realloc_r+0x1e>
 8008e5a:	4635      	mov	r5, r6
 8008e5c:	e7df      	b.n	8008e1e <_realloc_r+0x1e>
	...

08008e60 <_read_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4604      	mov	r4, r0
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4d05      	ldr	r5, [pc, #20]	; (8008e80 <_read_r+0x20>)
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f9 f80f 	bl	8001e92 <_read>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_read_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_read_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	200004d4 	.word	0x200004d4

08008e84 <_raise_r>:
 8008e84:	291f      	cmp	r1, #31
 8008e86:	b538      	push	{r3, r4, r5, lr}
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	d904      	bls.n	8008e98 <_raise_r+0x14>
 8008e8e:	2316      	movs	r3, #22
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e9a:	b112      	cbz	r2, 8008ea2 <_raise_r+0x1e>
 8008e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea0:	b94b      	cbnz	r3, 8008eb6 <_raise_r+0x32>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f830 	bl	8008f08 <_getpid_r>
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4620      	mov	r0, r4
 8008eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb2:	f000 b817 	b.w	8008ee4 <_kill_r>
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d00a      	beq.n	8008ed0 <_raise_r+0x4c>
 8008eba:	1c59      	adds	r1, r3, #1
 8008ebc:	d103      	bne.n	8008ec6 <_raise_r+0x42>
 8008ebe:	2316      	movs	r3, #22
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	e7e7      	b.n	8008e96 <_raise_r+0x12>
 8008ec6:	2400      	movs	r4, #0
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ece:	4798      	blx	r3
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7e0      	b.n	8008e96 <_raise_r+0x12>

08008ed4 <raise>:
 8008ed4:	4b02      	ldr	r3, [pc, #8]	; (8008ee0 <raise+0xc>)
 8008ed6:	4601      	mov	r1, r0
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f7ff bfd3 	b.w	8008e84 <_raise_r>
 8008ede:	bf00      	nop
 8008ee0:	20000010 	.word	0x20000010

08008ee4 <_kill_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_kill_r+0x20>)
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	f7f8 ffb4 	bl	8001e5e <_kill>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d102      	bne.n	8008f00 <_kill_r+0x1c>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b103      	cbz	r3, 8008f00 <_kill_r+0x1c>
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop
 8008f04:	200004d4 	.word	0x200004d4

08008f08 <_getpid_r>:
 8008f08:	f7f8 bfa2 	b.w	8001e50 <_getpid>

08008f0c <__ascii_wctomb>:
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	4608      	mov	r0, r1
 8008f10:	b141      	cbz	r1, 8008f24 <__ascii_wctomb+0x18>
 8008f12:	2aff      	cmp	r2, #255	; 0xff
 8008f14:	d904      	bls.n	8008f20 <__ascii_wctomb+0x14>
 8008f16:	228a      	movs	r2, #138	; 0x8a
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	4770      	bx	lr
 8008f20:	2001      	movs	r0, #1
 8008f22:	700a      	strb	r2, [r1, #0]
 8008f24:	4770      	bx	lr
	...

08008f28 <_fstat_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4d06      	ldr	r5, [pc, #24]	; (8008f48 <_fstat_r+0x20>)
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	4611      	mov	r1, r2
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	f7f8 fff0 	bl	8001f1a <_fstat>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d102      	bne.n	8008f44 <_fstat_r+0x1c>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	b103      	cbz	r3, 8008f44 <_fstat_r+0x1c>
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	200004d4 	.word	0x200004d4

08008f4c <_isatty_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4d05      	ldr	r5, [pc, #20]	; (8008f68 <_isatty_r+0x1c>)
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	602b      	str	r3, [r5, #0]
 8008f58:	f7f8 ffee 	bl	8001f38 <_isatty>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d102      	bne.n	8008f66 <_isatty_r+0x1a>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b103      	cbz	r3, 8008f66 <_isatty_r+0x1a>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	200004d4 	.word	0x200004d4

08008f6c <_malloc_usable_size_r>:
 8008f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f70:	1f18      	subs	r0, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfbc      	itt	lt
 8008f76:	580b      	ldrlt	r3, [r1, r0]
 8008f78:	18c0      	addlt	r0, r0, r3
 8008f7a:	4770      	bx	lr

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
